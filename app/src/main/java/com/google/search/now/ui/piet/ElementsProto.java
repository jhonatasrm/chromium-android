// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/search/now/ui/piet/elements.proto

package com.google.search.now.ui.piet;

public final class ElementsProto {
  private ElementsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * Controls the visibility of a UI element.
   * </pre>
   *
   * Protobuf enum {@code search.now.ui.piet.Visibility}
   */
  public enum Visibility
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>VISIBILITY_UNSPECIFIED = 0;</code>
     */
    VISIBILITY_UNSPECIFIED(0),
    /**
     * <pre>
     * By default, every element is visible. If set to VISIBLE, at least one of
     * the elements in the `values` oneof MUST be present, otherwise an error is
     * raised.
     * </pre>
     *
     * <code>VISIBLE = 1;</code>
     */
    VISIBLE(1),
    /**
     * <pre>
     * The UI element corresponding to this binding is included in
     * layout computation, but its visible UI is hidden.
     * </pre>
     *
     * <code>INVISIBLE = 2;</code>
     */
    INVISIBLE(2),
    /**
     * <pre>
     * The UI element corresponding to this binding is completely
     * removed from the view hierarchy. It is not used to compute layout. This
     * is the equivalent of Android’s visibility:GONE.
     * </pre>
     *
     * <code>GONE = 3;</code>
     */
    GONE(3),
    ;

    /**
     * <code>VISIBILITY_UNSPECIFIED = 0;</code>
     */
    public static final int VISIBILITY_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * By default, every element is visible. If set to VISIBLE, at least one of
     * the elements in the `values` oneof MUST be present, otherwise an error is
     * raised.
     * </pre>
     *
     * <code>VISIBLE = 1;</code>
     */
    public static final int VISIBLE_VALUE = 1;
    /**
     * <pre>
     * The UI element corresponding to this binding is included in
     * layout computation, but its visible UI is hidden.
     * </pre>
     *
     * <code>INVISIBLE = 2;</code>
     */
    public static final int INVISIBLE_VALUE = 2;
    /**
     * <pre>
     * The UI element corresponding to this binding is completely
     * removed from the view hierarchy. It is not used to compute layout. This
     * is the equivalent of Android’s visibility:GONE.
     * </pre>
     *
     * <code>GONE = 3;</code>
     */
    public static final int GONE_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Visibility valueOf(int value) {
      return forNumber(value);
    }

    public static Visibility forNumber(int value) {
      switch (value) {
        case 0: return VISIBILITY_UNSPECIFIED;
        case 1: return VISIBLE;
        case 2: return INVISIBLE;
        case 3: return GONE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Visibility>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Visibility> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Visibility>() {
            public Visibility findValueByNumber(int number) {
              return Visibility.forNumber(number);
            }
          };

    private final int value;

    private Visibility(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:search.now.ui.piet.Visibility)
  }

  /**
   * <pre>
   * Defines the behavior for elements that don't fit in the view
   * </pre>
   *
   * Protobuf enum {@code search.now.ui.piet.OverflowBehavior}
   */
  public enum OverflowBehavior
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Unspecified value, will default to OVERFLOW_HIDDEN.
     * </pre>
     *
     * <code>OVERFLOW_UNSPECIFIED = 0;</code>
     */
    OVERFLOW_UNSPECIFIED(0),
    /**
     * <pre>
     * All elements outside the boundaries of the view are hidden.
     * </pre>
     *
     * <code>OVERFLOW_HIDDEN = 1;</code>
     */
    OVERFLOW_HIDDEN(1),
    /**
     * <pre>
     * A scroll behavior is added to show elements that are outside of the view.
     * </pre>
     *
     * <code>OVERFLOW_SCROLL = 2;</code>
     */
    OVERFLOW_SCROLL(2),
    ;

    /**
     * <pre>
     * Unspecified value, will default to OVERFLOW_HIDDEN.
     * </pre>
     *
     * <code>OVERFLOW_UNSPECIFIED = 0;</code>
     */
    public static final int OVERFLOW_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * All elements outside the boundaries of the view are hidden.
     * </pre>
     *
     * <code>OVERFLOW_HIDDEN = 1;</code>
     */
    public static final int OVERFLOW_HIDDEN_VALUE = 1;
    /**
     * <pre>
     * A scroll behavior is added to show elements that are outside of the view.
     * </pre>
     *
     * <code>OVERFLOW_SCROLL = 2;</code>
     */
    public static final int OVERFLOW_SCROLL_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OverflowBehavior valueOf(int value) {
      return forNumber(value);
    }

    public static OverflowBehavior forNumber(int value) {
      switch (value) {
        case 0: return OVERFLOW_UNSPECIFIED;
        case 1: return OVERFLOW_HIDDEN;
        case 2: return OVERFLOW_SCROLL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OverflowBehavior>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OverflowBehavior> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OverflowBehavior>() {
            public OverflowBehavior findValueByNumber(int number) {
              return OverflowBehavior.forNumber(number);
            }
          };

    private final int value;

    private OverflowBehavior(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:search.now.ui.piet.OverflowBehavior)
  }

  public interface ContentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.Content)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Element, specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 1;</code>
     */
    boolean hasElement();
    /**
     * <pre>
     * Element, specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 1;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.Element getElement();

    /**
     * <pre>
     * A binding to look up an element.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
     */
    boolean hasBoundElement();
    /**
     * <pre>
     * A binding to look up an element.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef getBoundElement();

    /**
     * <pre>
     * An instance of a Template, represented by a TemplateInvocation.
     * If the referenced template has several binding contexts, an Element
     * instance will be created for each one.
     * This may happen in one of two cases:
     * The Content appears inside an ElementList, or repeated Element
     * --------------------------------------------------------------
     * For example:
     * In case there's an ElementList with the following Contents:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  |   Template_2 with binding  |
     *  |     values [ a , b , c ]   |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * After the bindings are resolved, it will become:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  | Template_2 {with data "a"} |
     *  +----------------------------+
     *  | Template_2 {with data "b"} |
     *  +----------------------------+
     *  | Template_2 {with data "c"} |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * The Content appears in a GridCell
     * ---------------------------------
     * A GridCell is created for each invocation of the template. The created
     * GridCells will be added to the GridRow containing this GridCell. The
     * width of the created GridCells is duplicated from the GridCell containing
     * this Content.
     * For example:
     * In case there's a GridRow with the following GridCells:
     *  +----------+------------------------+----------+
     *  |   Cell   | Cell with Content with |   Cell   |
     *  |          |  Template 2 with data  |          |
     *  |     1    |    bindings {a,b,c }   |    3     |
     *  +----------+------------------------+----------+
     * After the bindings are resolved, it will become:
     *  +----------+------------+------------+------------+---------+
     *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
     *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
     *  +----------+------------+------------+------------+---------+
     * IMPORTANT:
     * This feature may not be supported on all platforms; see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
     */
    boolean hasTemplateInvocation();
    /**
     * <pre>
     * An instance of a Template, represented by a TemplateInvocation.
     * If the referenced template has several binding contexts, an Element
     * instance will be created for each one.
     * This may happen in one of two cases:
     * The Content appears inside an ElementList, or repeated Element
     * --------------------------------------------------------------
     * For example:
     * In case there's an ElementList with the following Contents:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  |   Template_2 with binding  |
     *  |     values [ a , b , c ]   |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * After the bindings are resolved, it will become:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  | Template_2 {with data "a"} |
     *  +----------------------------+
     *  | Template_2 {with data "b"} |
     *  +----------------------------+
     *  | Template_2 {with data "c"} |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * The Content appears in a GridCell
     * ---------------------------------
     * A GridCell is created for each invocation of the template. The created
     * GridCells will be added to the GridRow containing this GridCell. The
     * width of the created GridCells is duplicated from the GridCell containing
     * this Content.
     * For example:
     * In case there's a GridRow with the following GridCells:
     *  +----------+------------------------+----------+
     *  |   Cell   | Cell with Content with |   Cell   |
     *  |          |  Template 2 with data  |          |
     *  |     1    |    bindings {a,b,c }   |    3     |
     *  +----------+------------------------+----------+
     * After the bindings are resolved, it will become:
     *  +----------+------------+------------+------------+---------+
     *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
     *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
     *  +----------+------------+------------+------------+---------+
     * IMPORTANT:
     * This feature may not be supported on all platforms; see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.TemplateInvocation getTemplateInvocation();

    /**
     * <pre>
     * See comment on template field; this looks up the template based on the
     * ID in the bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
     */
    boolean hasTemplateBinding();
    /**
     * <pre>
     * See comment on template field; this looks up the template based on the
     * ID in the bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef getTemplateBinding();

    public com.google.search.now.ui.piet.ElementsProto.Content.ContentTypeCase getContentTypeCase();
  }
  /**
   * <pre>
   * Content is a placeholder which contains a layout Element, or something which
   * resolves to a layout Element.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.Content}
   */
  public  static final class Content extends
      com.google.protobuf.GeneratedMessageLite<
          Content, Content.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.Content)
      ContentOrBuilder {
    private Content() {
    }
    private int bitField0_;
    private int contentTypeCase_ = 0;
    private java.lang.Object contentType_;
    public enum ContentTypeCase
        implements com.google.protobuf.Internal.EnumLite {
      ELEMENT(1),
      BOUND_ELEMENT(2),
      TEMPLATE_INVOCATION(3),
      TEMPLATE_BINDING(4),
      CONTENTTYPE_NOT_SET(0);
      private final int value;
      private ContentTypeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ContentTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static ContentTypeCase forNumber(int value) {
        switch (value) {
          case 1: return ELEMENT;
          case 2: return BOUND_ELEMENT;
          case 3: return TEMPLATE_INVOCATION;
          case 4: return TEMPLATE_BINDING;
          case 0: return CONTENTTYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ContentTypeCase
    getContentTypeCase() {
      return ContentTypeCase.forNumber(
          contentTypeCase_);
    }

    private void clearContentType() {
      contentTypeCase_ = 0;
      contentType_ = null;
    }

    public static final int ELEMENT_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Element, specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 1;</code>
     */
    public boolean hasElement() {
      return contentTypeCase_ == 1;
    }
    /**
     * <pre>
     * Element, specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 1;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.Element getElement() {
      if (contentTypeCase_ == 1) {
         return (com.google.search.now.ui.piet.ElementsProto.Element) contentType_;
      }
      return com.google.search.now.ui.piet.ElementsProto.Element.getDefaultInstance();
    }
    /**
     * <pre>
     * Element, specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 1;</code>
     */
    private void setElement(com.google.search.now.ui.piet.ElementsProto.Element value) {
      if (value == null) {
        throw new NullPointerException();
      }
      contentType_ = value;
      contentTypeCase_ = 1;
    }
    /**
     * <pre>
     * Element, specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 1;</code>
     */
    private void setElement(
        com.google.search.now.ui.piet.ElementsProto.Element.Builder builderForValue) {
      contentType_ = builderForValue.build();
      contentTypeCase_ = 1;
    }
    /**
     * <pre>
     * Element, specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 1;</code>
     */
    private void mergeElement(com.google.search.now.ui.piet.ElementsProto.Element value) {
      if (contentTypeCase_ == 1 &&
          contentType_ != com.google.search.now.ui.piet.ElementsProto.Element.getDefaultInstance()) {
        contentType_ = com.google.search.now.ui.piet.ElementsProto.Element.newBuilder((com.google.search.now.ui.piet.ElementsProto.Element) contentType_)
            .mergeFrom(value).buildPartial();
      } else {
        contentType_ = value;
      }
      contentTypeCase_ = 1;
    }
    /**
     * <pre>
     * Element, specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 1;</code>
     */
    private void clearElement() {
      if (contentTypeCase_ == 1) {
        contentTypeCase_ = 0;
        contentType_ = null;
      }
    }

    public static final int BOUND_ELEMENT_FIELD_NUMBER = 2;
    /**
     * <pre>
     * A binding to look up an element.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
     */
    public boolean hasBoundElement() {
      return contentTypeCase_ == 2;
    }
    /**
     * <pre>
     * A binding to look up an element.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef getBoundElement() {
      if (contentTypeCase_ == 2) {
         return (com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef) contentType_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * A binding to look up an element.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
     */
    private void setBoundElement(com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      contentType_ = value;
      contentTypeCase_ = 2;
    }
    /**
     * <pre>
     * A binding to look up an element.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
     */
    private void setBoundElement(
        com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef.Builder builderForValue) {
      contentType_ = builderForValue.build();
      contentTypeCase_ = 2;
    }
    /**
     * <pre>
     * A binding to look up an element.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
     */
    private void mergeBoundElement(com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef value) {
      if (contentTypeCase_ == 2 &&
          contentType_ != com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef.getDefaultInstance()) {
        contentType_ = com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef) contentType_)
            .mergeFrom(value).buildPartial();
      } else {
        contentType_ = value;
      }
      contentTypeCase_ = 2;
    }
    /**
     * <pre>
     * A binding to look up an element.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
     */
    private void clearBoundElement() {
      if (contentTypeCase_ == 2) {
        contentTypeCase_ = 0;
        contentType_ = null;
      }
    }

    public static final int TEMPLATE_INVOCATION_FIELD_NUMBER = 3;
    /**
     * <pre>
     * An instance of a Template, represented by a TemplateInvocation.
     * If the referenced template has several binding contexts, an Element
     * instance will be created for each one.
     * This may happen in one of two cases:
     * The Content appears inside an ElementList, or repeated Element
     * --------------------------------------------------------------
     * For example:
     * In case there's an ElementList with the following Contents:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  |   Template_2 with binding  |
     *  |     values [ a , b , c ]   |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * After the bindings are resolved, it will become:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  | Template_2 {with data "a"} |
     *  +----------------------------+
     *  | Template_2 {with data "b"} |
     *  +----------------------------+
     *  | Template_2 {with data "c"} |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * The Content appears in a GridCell
     * ---------------------------------
     * A GridCell is created for each invocation of the template. The created
     * GridCells will be added to the GridRow containing this GridCell. The
     * width of the created GridCells is duplicated from the GridCell containing
     * this Content.
     * For example:
     * In case there's a GridRow with the following GridCells:
     *  +----------+------------------------+----------+
     *  |   Cell   | Cell with Content with |   Cell   |
     *  |          |  Template 2 with data  |          |
     *  |     1    |    bindings {a,b,c }   |    3     |
     *  +----------+------------------------+----------+
     * After the bindings are resolved, it will become:
     *  +----------+------------+------------+------------+---------+
     *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
     *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
     *  +----------+------------+------------+------------+---------+
     * IMPORTANT:
     * This feature may not be supported on all platforms; see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
     */
    public boolean hasTemplateInvocation() {
      return contentTypeCase_ == 3;
    }
    /**
     * <pre>
     * An instance of a Template, represented by a TemplateInvocation.
     * If the referenced template has several binding contexts, an Element
     * instance will be created for each one.
     * This may happen in one of two cases:
     * The Content appears inside an ElementList, or repeated Element
     * --------------------------------------------------------------
     * For example:
     * In case there's an ElementList with the following Contents:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  |   Template_2 with binding  |
     *  |     values [ a , b , c ]   |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * After the bindings are resolved, it will become:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  | Template_2 {with data "a"} |
     *  +----------------------------+
     *  | Template_2 {with data "b"} |
     *  +----------------------------+
     *  | Template_2 {with data "c"} |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * The Content appears in a GridCell
     * ---------------------------------
     * A GridCell is created for each invocation of the template. The created
     * GridCells will be added to the GridRow containing this GridCell. The
     * width of the created GridCells is duplicated from the GridCell containing
     * this Content.
     * For example:
     * In case there's a GridRow with the following GridCells:
     *  +----------+------------------------+----------+
     *  |   Cell   | Cell with Content with |   Cell   |
     *  |          |  Template 2 with data  |          |
     *  |     1    |    bindings {a,b,c }   |    3     |
     *  +----------+------------------------+----------+
     * After the bindings are resolved, it will become:
     *  +----------+------------+------------+------------+---------+
     *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
     *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
     *  +----------+------------+------------+------------+---------+
     * IMPORTANT:
     * This feature may not be supported on all platforms; see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.TemplateInvocation getTemplateInvocation() {
      if (contentTypeCase_ == 3) {
         return (com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) contentType_;
      }
      return com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.getDefaultInstance();
    }
    /**
     * <pre>
     * An instance of a Template, represented by a TemplateInvocation.
     * If the referenced template has several binding contexts, an Element
     * instance will be created for each one.
     * This may happen in one of two cases:
     * The Content appears inside an ElementList, or repeated Element
     * --------------------------------------------------------------
     * For example:
     * In case there's an ElementList with the following Contents:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  |   Template_2 with binding  |
     *  |     values [ a , b , c ]   |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * After the bindings are resolved, it will become:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  | Template_2 {with data "a"} |
     *  +----------------------------+
     *  | Template_2 {with data "b"} |
     *  +----------------------------+
     *  | Template_2 {with data "c"} |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * The Content appears in a GridCell
     * ---------------------------------
     * A GridCell is created for each invocation of the template. The created
     * GridCells will be added to the GridRow containing this GridCell. The
     * width of the created GridCells is duplicated from the GridCell containing
     * this Content.
     * For example:
     * In case there's a GridRow with the following GridCells:
     *  +----------+------------------------+----------+
     *  |   Cell   | Cell with Content with |   Cell   |
     *  |          |  Template 2 with data  |          |
     *  |     1    |    bindings {a,b,c }   |    3     |
     *  +----------+------------------------+----------+
     * After the bindings are resolved, it will become:
     *  +----------+------------+------------+------------+---------+
     *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
     *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
     *  +----------+------------+------------+------------+---------+
     * IMPORTANT:
     * This feature may not be supported on all platforms; see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
     */
    private void setTemplateInvocation(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation value) {
      if (value == null) {
        throw new NullPointerException();
      }
      contentType_ = value;
      contentTypeCase_ = 3;
    }
    /**
     * <pre>
     * An instance of a Template, represented by a TemplateInvocation.
     * If the referenced template has several binding contexts, an Element
     * instance will be created for each one.
     * This may happen in one of two cases:
     * The Content appears inside an ElementList, or repeated Element
     * --------------------------------------------------------------
     * For example:
     * In case there's an ElementList with the following Contents:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  |   Template_2 with binding  |
     *  |     values [ a , b , c ]   |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * After the bindings are resolved, it will become:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  | Template_2 {with data "a"} |
     *  +----------------------------+
     *  | Template_2 {with data "b"} |
     *  +----------------------------+
     *  | Template_2 {with data "c"} |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * The Content appears in a GridCell
     * ---------------------------------
     * A GridCell is created for each invocation of the template. The created
     * GridCells will be added to the GridRow containing this GridCell. The
     * width of the created GridCells is duplicated from the GridCell containing
     * this Content.
     * For example:
     * In case there's a GridRow with the following GridCells:
     *  +----------+------------------------+----------+
     *  |   Cell   | Cell with Content with |   Cell   |
     *  |          |  Template 2 with data  |          |
     *  |     1    |    bindings {a,b,c }   |    3     |
     *  +----------+------------------------+----------+
     * After the bindings are resolved, it will become:
     *  +----------+------------+------------+------------+---------+
     *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
     *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
     *  +----------+------------+------------+------------+---------+
     * IMPORTANT:
     * This feature may not be supported on all platforms; see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
     */
    private void setTemplateInvocation(
        com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.Builder builderForValue) {
      contentType_ = builderForValue.build();
      contentTypeCase_ = 3;
    }
    /**
     * <pre>
     * An instance of a Template, represented by a TemplateInvocation.
     * If the referenced template has several binding contexts, an Element
     * instance will be created for each one.
     * This may happen in one of two cases:
     * The Content appears inside an ElementList, or repeated Element
     * --------------------------------------------------------------
     * For example:
     * In case there's an ElementList with the following Contents:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  |   Template_2 with binding  |
     *  |     values [ a , b , c ]   |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * After the bindings are resolved, it will become:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  | Template_2 {with data "a"} |
     *  +----------------------------+
     *  | Template_2 {with data "b"} |
     *  +----------------------------+
     *  | Template_2 {with data "c"} |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * The Content appears in a GridCell
     * ---------------------------------
     * A GridCell is created for each invocation of the template. The created
     * GridCells will be added to the GridRow containing this GridCell. The
     * width of the created GridCells is duplicated from the GridCell containing
     * this Content.
     * For example:
     * In case there's a GridRow with the following GridCells:
     *  +----------+------------------------+----------+
     *  |   Cell   | Cell with Content with |   Cell   |
     *  |          |  Template 2 with data  |          |
     *  |     1    |    bindings {a,b,c }   |    3     |
     *  +----------+------------------------+----------+
     * After the bindings are resolved, it will become:
     *  +----------+------------+------------+------------+---------+
     *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
     *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
     *  +----------+------------+------------+------------+---------+
     * IMPORTANT:
     * This feature may not be supported on all platforms; see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
     */
    private void mergeTemplateInvocation(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation value) {
      if (contentTypeCase_ == 3 &&
          contentType_ != com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.getDefaultInstance()) {
        contentType_ = com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.newBuilder((com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) contentType_)
            .mergeFrom(value).buildPartial();
      } else {
        contentType_ = value;
      }
      contentTypeCase_ = 3;
    }
    /**
     * <pre>
     * An instance of a Template, represented by a TemplateInvocation.
     * If the referenced template has several binding contexts, an Element
     * instance will be created for each one.
     * This may happen in one of two cases:
     * The Content appears inside an ElementList, or repeated Element
     * --------------------------------------------------------------
     * For example:
     * In case there's an ElementList with the following Contents:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  |   Template_2 with binding  |
     *  |     values [ a , b , c ]   |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * After the bindings are resolved, it will become:
     *  +----------------------------+
     *  |         Template_1         |
     *  +----------------------------+
     *  | Template_2 {with data "a"} |
     *  +----------------------------+
     *  | Template_2 {with data "b"} |
     *  +----------------------------+
     *  | Template_2 {with data "c"} |
     *  +----------------------------+
     *  |         Template_3         |
     *  +----------------------------+
     * The Content appears in a GridCell
     * ---------------------------------
     * A GridCell is created for each invocation of the template. The created
     * GridCells will be added to the GridRow containing this GridCell. The
     * width of the created GridCells is duplicated from the GridCell containing
     * this Content.
     * For example:
     * In case there's a GridRow with the following GridCells:
     *  +----------+------------------------+----------+
     *  |   Cell   | Cell with Content with |   Cell   |
     *  |          |  Template 2 with data  |          |
     *  |     1    |    bindings {a,b,c }   |    3     |
     *  +----------+------------------------+----------+
     * After the bindings are resolved, it will become:
     *  +----------+------------+------------+------------+---------+
     *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
     *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
     *  +----------+------------+------------+------------+---------+
     * IMPORTANT:
     * This feature may not be supported on all platforms; see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
     */
    private void clearTemplateInvocation() {
      if (contentTypeCase_ == 3) {
        contentTypeCase_ = 0;
        contentType_ = null;
      }
    }

    public static final int TEMPLATE_BINDING_FIELD_NUMBER = 4;
    /**
     * <pre>
     * See comment on template field; this looks up the template based on the
     * ID in the bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
     */
    public boolean hasTemplateBinding() {
      return contentTypeCase_ == 4;
    }
    /**
     * <pre>
     * See comment on template field; this looks up the template based on the
     * ID in the bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef getTemplateBinding() {
      if (contentTypeCase_ == 4) {
         return (com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef) contentType_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * See comment on template field; this looks up the template based on the
     * ID in the bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
     */
    private void setTemplateBinding(com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      contentType_ = value;
      contentTypeCase_ = 4;
    }
    /**
     * <pre>
     * See comment on template field; this looks up the template based on the
     * ID in the bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
     */
    private void setTemplateBinding(
        com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef.Builder builderForValue) {
      contentType_ = builderForValue.build();
      contentTypeCase_ = 4;
    }
    /**
     * <pre>
     * See comment on template field; this looks up the template based on the
     * ID in the bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
     */
    private void mergeTemplateBinding(com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef value) {
      if (contentTypeCase_ == 4 &&
          contentType_ != com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef.getDefaultInstance()) {
        contentType_ = com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef) contentType_)
            .mergeFrom(value).buildPartial();
      } else {
        contentType_ = value;
      }
      contentTypeCase_ = 4;
    }
    /**
     * <pre>
     * See comment on template field; this looks up the template based on the
     * ID in the bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
     */
    private void clearTemplateBinding() {
      if (contentTypeCase_ == 4) {
        contentTypeCase_ = 0;
        contentType_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (contentTypeCase_ == 1) {
        output.writeMessage(1, (com.google.search.now.ui.piet.ElementsProto.Element) contentType_);
      }
      if (contentTypeCase_ == 2) {
        output.writeMessage(2, (com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef) contentType_);
      }
      if (contentTypeCase_ == 3) {
        output.writeMessage(3, (com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) contentType_);
      }
      if (contentTypeCase_ == 4) {
        output.writeMessage(4, (com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef) contentType_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (contentTypeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.google.search.now.ui.piet.ElementsProto.Element) contentType_);
      }
      if (contentTypeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef) contentType_);
      }
      if (contentTypeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) contentType_);
      }
      if (contentTypeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef) contentType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.Content parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Content parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.Content prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Content is a placeholder which contains a layout Element, or something which
     * resolves to a layout Element.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.Content}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ElementsProto.Content, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.Content)
        com.google.search.now.ui.piet.ElementsProto.ContentOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.Content.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ContentTypeCase
          getContentTypeCase() {
        return instance.getContentTypeCase();
      }

      public Builder clearContentType() {
        copyOnWrite();
        instance.clearContentType();
        return this;
      }


      /**
       * <pre>
       * Element, specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 1;</code>
       */
      public boolean hasElement() {
        return instance.hasElement();
      }
      /**
       * <pre>
       * Element, specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 1;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.Element getElement() {
        return instance.getElement();
      }
      /**
       * <pre>
       * Element, specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 1;</code>
       */
      public Builder setElement(com.google.search.now.ui.piet.ElementsProto.Element value) {
        copyOnWrite();
        instance.setElement(value);
        return this;
      }
      /**
       * <pre>
       * Element, specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 1;</code>
       */
      public Builder setElement(
          com.google.search.now.ui.piet.ElementsProto.Element.Builder builderForValue) {
        copyOnWrite();
        instance.setElement(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Element, specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 1;</code>
       */
      public Builder mergeElement(com.google.search.now.ui.piet.ElementsProto.Element value) {
        copyOnWrite();
        instance.mergeElement(value);
        return this;
      }
      /**
       * <pre>
       * Element, specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 1;</code>
       */
      public Builder clearElement() {
        copyOnWrite();
        instance.clearElement();
        return this;
      }

      /**
       * <pre>
       * A binding to look up an element.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
       */
      public boolean hasBoundElement() {
        return instance.hasBoundElement();
      }
      /**
       * <pre>
       * A binding to look up an element.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef getBoundElement() {
        return instance.getBoundElement();
      }
      /**
       * <pre>
       * A binding to look up an element.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
       */
      public Builder setBoundElement(com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef value) {
        copyOnWrite();
        instance.setBoundElement(value);
        return this;
      }
      /**
       * <pre>
       * A binding to look up an element.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
       */
      public Builder setBoundElement(
          com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setBoundElement(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A binding to look up an element.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
       */
      public Builder mergeBoundElement(com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef value) {
        copyOnWrite();
        instance.mergeBoundElement(value);
        return this;
      }
      /**
       * <pre>
       * A binding to look up an element.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementBindingRef bound_element = 2;</code>
       */
      public Builder clearBoundElement() {
        copyOnWrite();
        instance.clearBoundElement();
        return this;
      }

      /**
       * <pre>
       * An instance of a Template, represented by a TemplateInvocation.
       * If the referenced template has several binding contexts, an Element
       * instance will be created for each one.
       * This may happen in one of two cases:
       * The Content appears inside an ElementList, or repeated Element
       * --------------------------------------------------------------
       * For example:
       * In case there's an ElementList with the following Contents:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  |   Template_2 with binding  |
       *  |     values [ a , b , c ]   |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * After the bindings are resolved, it will become:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  | Template_2 {with data "a"} |
       *  +----------------------------+
       *  | Template_2 {with data "b"} |
       *  +----------------------------+
       *  | Template_2 {with data "c"} |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * The Content appears in a GridCell
       * ---------------------------------
       * A GridCell is created for each invocation of the template. The created
       * GridCells will be added to the GridRow containing this GridCell. The
       * width of the created GridCells is duplicated from the GridCell containing
       * this Content.
       * For example:
       * In case there's a GridRow with the following GridCells:
       *  +----------+------------------------+----------+
       *  |   Cell   | Cell with Content with |   Cell   |
       *  |          |  Template 2 with data  |          |
       *  |     1    |    bindings {a,b,c }   |    3     |
       *  +----------+------------------------+----------+
       * After the bindings are resolved, it will become:
       *  +----------+------------+------------+------------+---------+
       *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
       *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
       *  +----------+------------+------------+------------+---------+
       * IMPORTANT:
       * This feature may not be supported on all platforms; see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
       */
      public boolean hasTemplateInvocation() {
        return instance.hasTemplateInvocation();
      }
      /**
       * <pre>
       * An instance of a Template, represented by a TemplateInvocation.
       * If the referenced template has several binding contexts, an Element
       * instance will be created for each one.
       * This may happen in one of two cases:
       * The Content appears inside an ElementList, or repeated Element
       * --------------------------------------------------------------
       * For example:
       * In case there's an ElementList with the following Contents:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  |   Template_2 with binding  |
       *  |     values [ a , b , c ]   |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * After the bindings are resolved, it will become:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  | Template_2 {with data "a"} |
       *  +----------------------------+
       *  | Template_2 {with data "b"} |
       *  +----------------------------+
       *  | Template_2 {with data "c"} |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * The Content appears in a GridCell
       * ---------------------------------
       * A GridCell is created for each invocation of the template. The created
       * GridCells will be added to the GridRow containing this GridCell. The
       * width of the created GridCells is duplicated from the GridCell containing
       * this Content.
       * For example:
       * In case there's a GridRow with the following GridCells:
       *  +----------+------------------------+----------+
       *  |   Cell   | Cell with Content with |   Cell   |
       *  |          |  Template 2 with data  |          |
       *  |     1    |    bindings {a,b,c }   |    3     |
       *  +----------+------------------------+----------+
       * After the bindings are resolved, it will become:
       *  +----------+------------+------------+------------+---------+
       *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
       *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
       *  +----------+------------+------------+------------+---------+
       * IMPORTANT:
       * This feature may not be supported on all platforms; see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.TemplateInvocation getTemplateInvocation() {
        return instance.getTemplateInvocation();
      }
      /**
       * <pre>
       * An instance of a Template, represented by a TemplateInvocation.
       * If the referenced template has several binding contexts, an Element
       * instance will be created for each one.
       * This may happen in one of two cases:
       * The Content appears inside an ElementList, or repeated Element
       * --------------------------------------------------------------
       * For example:
       * In case there's an ElementList with the following Contents:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  |   Template_2 with binding  |
       *  |     values [ a , b , c ]   |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * After the bindings are resolved, it will become:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  | Template_2 {with data "a"} |
       *  +----------------------------+
       *  | Template_2 {with data "b"} |
       *  +----------------------------+
       *  | Template_2 {with data "c"} |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * The Content appears in a GridCell
       * ---------------------------------
       * A GridCell is created for each invocation of the template. The created
       * GridCells will be added to the GridRow containing this GridCell. The
       * width of the created GridCells is duplicated from the GridCell containing
       * this Content.
       * For example:
       * In case there's a GridRow with the following GridCells:
       *  +----------+------------------------+----------+
       *  |   Cell   | Cell with Content with |   Cell   |
       *  |          |  Template 2 with data  |          |
       *  |     1    |    bindings {a,b,c }   |    3     |
       *  +----------+------------------------+----------+
       * After the bindings are resolved, it will become:
       *  +----------+------------+------------+------------+---------+
       *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
       *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
       *  +----------+------------+------------+------------+---------+
       * IMPORTANT:
       * This feature may not be supported on all platforms; see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
       */
      public Builder setTemplateInvocation(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation value) {
        copyOnWrite();
        instance.setTemplateInvocation(value);
        return this;
      }
      /**
       * <pre>
       * An instance of a Template, represented by a TemplateInvocation.
       * If the referenced template has several binding contexts, an Element
       * instance will be created for each one.
       * This may happen in one of two cases:
       * The Content appears inside an ElementList, or repeated Element
       * --------------------------------------------------------------
       * For example:
       * In case there's an ElementList with the following Contents:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  |   Template_2 with binding  |
       *  |     values [ a , b , c ]   |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * After the bindings are resolved, it will become:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  | Template_2 {with data "a"} |
       *  +----------------------------+
       *  | Template_2 {with data "b"} |
       *  +----------------------------+
       *  | Template_2 {with data "c"} |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * The Content appears in a GridCell
       * ---------------------------------
       * A GridCell is created for each invocation of the template. The created
       * GridCells will be added to the GridRow containing this GridCell. The
       * width of the created GridCells is duplicated from the GridCell containing
       * this Content.
       * For example:
       * In case there's a GridRow with the following GridCells:
       *  +----------+------------------------+----------+
       *  |   Cell   | Cell with Content with |   Cell   |
       *  |          |  Template 2 with data  |          |
       *  |     1    |    bindings {a,b,c }   |    3     |
       *  +----------+------------------------+----------+
       * After the bindings are resolved, it will become:
       *  +----------+------------+------------+------------+---------+
       *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
       *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
       *  +----------+------------+------------+------------+---------+
       * IMPORTANT:
       * This feature may not be supported on all platforms; see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
       */
      public Builder setTemplateInvocation(
          com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.Builder builderForValue) {
        copyOnWrite();
        instance.setTemplateInvocation(builderForValue);
        return this;
      }
      /**
       * <pre>
       * An instance of a Template, represented by a TemplateInvocation.
       * If the referenced template has several binding contexts, an Element
       * instance will be created for each one.
       * This may happen in one of two cases:
       * The Content appears inside an ElementList, or repeated Element
       * --------------------------------------------------------------
       * For example:
       * In case there's an ElementList with the following Contents:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  |   Template_2 with binding  |
       *  |     values [ a , b , c ]   |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * After the bindings are resolved, it will become:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  | Template_2 {with data "a"} |
       *  +----------------------------+
       *  | Template_2 {with data "b"} |
       *  +----------------------------+
       *  | Template_2 {with data "c"} |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * The Content appears in a GridCell
       * ---------------------------------
       * A GridCell is created for each invocation of the template. The created
       * GridCells will be added to the GridRow containing this GridCell. The
       * width of the created GridCells is duplicated from the GridCell containing
       * this Content.
       * For example:
       * In case there's a GridRow with the following GridCells:
       *  +----------+------------------------+----------+
       *  |   Cell   | Cell with Content with |   Cell   |
       *  |          |  Template 2 with data  |          |
       *  |     1    |    bindings {a,b,c }   |    3     |
       *  +----------+------------------------+----------+
       * After the bindings are resolved, it will become:
       *  +----------+------------+------------+------------+---------+
       *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
       *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
       *  +----------+------------+------------+------------+---------+
       * IMPORTANT:
       * This feature may not be supported on all platforms; see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
       */
      public Builder mergeTemplateInvocation(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation value) {
        copyOnWrite();
        instance.mergeTemplateInvocation(value);
        return this;
      }
      /**
       * <pre>
       * An instance of a Template, represented by a TemplateInvocation.
       * If the referenced template has several binding contexts, an Element
       * instance will be created for each one.
       * This may happen in one of two cases:
       * The Content appears inside an ElementList, or repeated Element
       * --------------------------------------------------------------
       * For example:
       * In case there's an ElementList with the following Contents:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  |   Template_2 with binding  |
       *  |     values [ a , b , c ]   |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * After the bindings are resolved, it will become:
       *  +----------------------------+
       *  |         Template_1         |
       *  +----------------------------+
       *  | Template_2 {with data "a"} |
       *  +----------------------------+
       *  | Template_2 {with data "b"} |
       *  +----------------------------+
       *  | Template_2 {with data "c"} |
       *  +----------------------------+
       *  |         Template_3         |
       *  +----------------------------+
       * The Content appears in a GridCell
       * ---------------------------------
       * A GridCell is created for each invocation of the template. The created
       * GridCells will be added to the GridRow containing this GridCell. The
       * width of the created GridCells is duplicated from the GridCell containing
       * this Content.
       * For example:
       * In case there's a GridRow with the following GridCells:
       *  +----------+------------------------+----------+
       *  |   Cell   | Cell with Content with |   Cell   |
       *  |          |  Template 2 with data  |          |
       *  |     1    |    bindings {a,b,c }   |    3     |
       *  +----------+------------------------+----------+
       * After the bindings are resolved, it will become:
       *  +----------+------------+------------+------------+---------+
       *  |   Cell   | Template 2 | Template 2 | Template 2 |   Cell  |
       *  |     1    | {data "a"} | {data "b"} | {data "c"} |     3   |
       *  +----------+------------+------------+------------+---------+
       * IMPORTANT:
       * This feature may not be supported on all platforms; see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 3;</code>
       */
      public Builder clearTemplateInvocation() {
        copyOnWrite();
        instance.clearTemplateInvocation();
        return this;
      }

      /**
       * <pre>
       * See comment on template field; this looks up the template based on the
       * ID in the bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
       */
      public boolean hasTemplateBinding() {
        return instance.hasTemplateBinding();
      }
      /**
       * <pre>
       * See comment on template field; this looks up the template based on the
       * ID in the bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef getTemplateBinding() {
        return instance.getTemplateBinding();
      }
      /**
       * <pre>
       * See comment on template field; this looks up the template based on the
       * ID in the bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
       */
      public Builder setTemplateBinding(com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef value) {
        copyOnWrite();
        instance.setTemplateBinding(value);
        return this;
      }
      /**
       * <pre>
       * See comment on template field; this looks up the template based on the
       * ID in the bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
       */
      public Builder setTemplateBinding(
          com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setTemplateBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * See comment on template field; this looks up the template based on the
       * ID in the bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
       */
      public Builder mergeTemplateBinding(com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef value) {
        copyOnWrite();
        instance.mergeTemplateBinding(value);
        return this;
      }
      /**
       * <pre>
       * See comment on template field; this looks up the template based on the
       * ID in the bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateBindingRef template_binding = 4;</code>
       */
      public Builder clearTemplateBinding() {
        copyOnWrite();
        instance.clearTemplateBinding();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.Content)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.Content();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasElement()) {
            if (!getElement().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasTemplateInvocation()) {
            if (!getTemplateInvocation().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.Content other = (com.google.search.now.ui.piet.ElementsProto.Content) arg1;
          switch (other.getContentTypeCase()) {
            case ELEMENT: {
              contentType_ = visitor.visitOneofMessage(
                  contentTypeCase_ == 1,
                  contentType_,
                  other.contentType_);
              break;
            }
            case BOUND_ELEMENT: {
              contentType_ = visitor.visitOneofMessage(
                  contentTypeCase_ == 2,
                  contentType_,
                  other.contentType_);
              break;
            }
            case TEMPLATE_INVOCATION: {
              contentType_ = visitor.visitOneofMessage(
                  contentTypeCase_ == 3,
                  contentType_,
                  other.contentType_);
              break;
            }
            case TEMPLATE_BINDING: {
              contentType_ = visitor.visitOneofMessage(
                  contentTypeCase_ == 4,
                  contentType_,
                  other.contentType_);
              break;
            }
            case CONTENTTYPE_NOT_SET: {
              visitor.visitOneofNotSet(contentTypeCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.contentTypeCase_ != 0) {
              contentTypeCase_ = other.contentTypeCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.ElementsProto.Element.Builder subBuilder = null;
                  if (contentTypeCase_ == 1) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.Element) contentType_).toBuilder();
                  }
                  contentType_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.Element.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.Element) contentType_);
                    contentType_ = subBuilder.buildPartial();
                  }
                  contentTypeCase_ = 1;
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef.Builder subBuilder = null;
                  if (contentTypeCase_ == 2) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef) contentType_).toBuilder();
                  }
                  contentType_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.ElementBindingRef) contentType_);
                    contentType_ = subBuilder.buildPartial();
                  }
                  contentTypeCase_ = 2;
                  break;
                }
                case 26: {
                  com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.Builder subBuilder = null;
                  if (contentTypeCase_ == 3) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) contentType_).toBuilder();
                  }
                  contentType_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) contentType_);
                    contentType_ = subBuilder.buildPartial();
                  }
                  contentTypeCase_ = 3;
                  break;
                }
                case 34: {
                  com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef.Builder subBuilder = null;
                  if (contentTypeCase_ == 4) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef) contentType_).toBuilder();
                  }
                  contentType_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.TemplateBindingRef) contentType_);
                    contentType_ = subBuilder.buildPartial();
                  }
                  contentTypeCase_ = 4;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.Content.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.Content)
    private static final com.google.search.now.ui.piet.ElementsProto.Content DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Content();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.Content getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Content> PARSER;

    public static com.google.protobuf.Parser<Content> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VisibilityStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.VisibilityState)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Binding of values.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
     */
    boolean hasOverridingBoundVisibility();
    /**
     * <pre>
     * Binding of values.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef getOverridingBoundVisibility();

    /**
     * <pre>
     * The default visibility.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
     */
    boolean hasDefaultVisibility();
    /**
     * <pre>
     * The default visibility.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
     */
    com.google.search.now.ui.piet.ElementsProto.Visibility getDefaultVisibility();
  }
  /**
   * <pre>
   * Indicates element's visibility, and the option to bind visibility state that
   * overrides the default value.
   * This message should be used to bind external values for controlling display
   * of parts of the UI.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.VisibilityState}
   */
  public  static final class VisibilityState extends
      com.google.protobuf.GeneratedMessageLite<
          VisibilityState, VisibilityState.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.VisibilityState)
      VisibilityStateOrBuilder {
    private VisibilityState() {
      defaultVisibility_ = 1;
    }
    private int bitField0_;
    public static final int OVERRIDING_BOUND_VISIBILITY_FIELD_NUMBER = 1;
    private com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef overridingBoundVisibility_;
    /**
     * <pre>
     * Binding of values.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
     */
    public boolean hasOverridingBoundVisibility() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Binding of values.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef getOverridingBoundVisibility() {
      return overridingBoundVisibility_ == null ? com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef.getDefaultInstance() : overridingBoundVisibility_;
    }
    /**
     * <pre>
     * Binding of values.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
     */
    private void setOverridingBoundVisibility(com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      overridingBoundVisibility_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Binding of values.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
     */
    private void setOverridingBoundVisibility(
        com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef.Builder builderForValue) {
      overridingBoundVisibility_ = builderForValue.build();
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Binding of values.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
     */
    private void mergeOverridingBoundVisibility(com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef value) {
      if (overridingBoundVisibility_ != null &&
          overridingBoundVisibility_ != com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef.getDefaultInstance()) {
        overridingBoundVisibility_ =
          com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef.newBuilder(overridingBoundVisibility_).mergeFrom(value).buildPartial();
      } else {
        overridingBoundVisibility_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Binding of values.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
     */
    private void clearOverridingBoundVisibility() {  overridingBoundVisibility_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int DEFAULT_VISIBILITY_FIELD_NUMBER = 2;
    private int defaultVisibility_;
    /**
     * <pre>
     * The default visibility.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
     */
    public boolean hasDefaultVisibility() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The default visibility.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.Visibility getDefaultVisibility() {
      com.google.search.now.ui.piet.ElementsProto.Visibility result = com.google.search.now.ui.piet.ElementsProto.Visibility.forNumber(defaultVisibility_);
      return result == null ? com.google.search.now.ui.piet.ElementsProto.Visibility.VISIBLE : result;
    }
    /**
     * <pre>
     * The default visibility.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
     */
    private void setDefaultVisibility(com.google.search.now.ui.piet.ElementsProto.Visibility value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      defaultVisibility_ = value.getNumber();
    }
    /**
     * <pre>
     * The default visibility.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
     */
    private void clearDefaultVisibility() {
      bitField0_ = (bitField0_ & ~0x00000002);
      defaultVisibility_ = 1;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getOverridingBoundVisibility());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, defaultVisibility_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOverridingBoundVisibility());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, defaultVisibility_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.VisibilityState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Indicates element's visibility, and the option to bind visibility state that
     * overrides the default value.
     * This message should be used to bind external values for controlling display
     * of parts of the UI.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.VisibilityState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ElementsProto.VisibilityState, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.VisibilityState)
        com.google.search.now.ui.piet.ElementsProto.VisibilityStateOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.VisibilityState.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Binding of values.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
       */
      public boolean hasOverridingBoundVisibility() {
        return instance.hasOverridingBoundVisibility();
      }
      /**
       * <pre>
       * Binding of values.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef getOverridingBoundVisibility() {
        return instance.getOverridingBoundVisibility();
      }
      /**
       * <pre>
       * Binding of values.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
       */
      public Builder setOverridingBoundVisibility(com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef value) {
        copyOnWrite();
        instance.setOverridingBoundVisibility(value);
        return this;
        }
      /**
       * <pre>
       * Binding of values.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
       */
      public Builder setOverridingBoundVisibility(
          com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setOverridingBoundVisibility(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Binding of values.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
       */
      public Builder mergeOverridingBoundVisibility(com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef value) {
        copyOnWrite();
        instance.mergeOverridingBoundVisibility(value);
        return this;
      }
      /**
       * <pre>
       * Binding of values.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityBindingRef overriding_bound_visibility = 1;</code>
       */
      public Builder clearOverridingBoundVisibility() {  copyOnWrite();
        instance.clearOverridingBoundVisibility();
        return this;
      }

      /**
       * <pre>
       * The default visibility.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
       */
      public boolean hasDefaultVisibility() {
        return instance.hasDefaultVisibility();
      }
      /**
       * <pre>
       * The default visibility.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.Visibility getDefaultVisibility() {
        return instance.getDefaultVisibility();
      }
      /**
       * <pre>
       * The default visibility.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
       */
      public Builder setDefaultVisibility(com.google.search.now.ui.piet.ElementsProto.Visibility value) {
        copyOnWrite();
        instance.setDefaultVisibility(value);
        return this;
      }
      /**
       * <pre>
       * The default visibility.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Visibility default_visibility = 2 [default = VISIBLE];</code>
       */
      public Builder clearDefaultVisibility() {
        copyOnWrite();
        instance.clearDefaultVisibility();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.VisibilityState)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.VisibilityState();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.VisibilityState other = (com.google.search.now.ui.piet.ElementsProto.VisibilityState) arg1;
          overridingBoundVisibility_ = visitor.visitMessage(overridingBoundVisibility_, other.overridingBoundVisibility_);
          defaultVisibility_ = visitor.visitInt(hasDefaultVisibility(), defaultVisibility_,
              other.hasDefaultVisibility(), other.defaultVisibility_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = overridingBoundVisibility_.toBuilder();
                  }
                  overridingBoundVisibility_ = input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.VisibilityBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(overridingBoundVisibility_);
                    overridingBoundVisibility_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
                case 16: {
                  int rawValue = input.readEnum();
                  com.google.search.now.ui.piet.ElementsProto.Visibility value = com.google.search.now.ui.piet.ElementsProto.Visibility.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(2, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    defaultVisibility_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.VisibilityState.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.VisibilityState)
    private static final com.google.search.now.ui.piet.ElementsProto.VisibilityState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new VisibilityState();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.VisibilityState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<VisibilityState> PARSER;

    public static com.google.protobuf.Parser<VisibilityState> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ElementOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.Element)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Element, Element.Builder> {

    /**
     * <pre>
     * An image container
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
     */
    boolean hasImageElement();
    /**
     * <pre>
     * An image container
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.ImageElement getImageElement();

    /**
     * <pre>
     * Add a spacer line which can be defined as a divider.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
     */
    boolean hasSpacerElement();
    /**
     * <pre>
     * Add a spacer line which can be defined as a divider.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.SpacerElement getSpacerElement();

    /**
     * <pre>
     * A simple text line
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
     */
    boolean hasTextElement();
    /**
     * <pre>
     * A simple text line
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.TextElement getTextElement();

    /**
     * <pre>
     * A horizontal layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
     */
    boolean hasGridRow();
    /**
     * <pre>
     * A horizontal layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.GridRow getGridRow();

    /**
     * <pre>
     * A vertical layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
     */
    boolean hasElementList();
    /**
     * <pre>
     * A vertical layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.ElementList getElementList();

    /**
     * <pre>
     * Multiple items stacked on top of each other (overlay).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
     */
    boolean hasElementStack();
    /**
     * <pre>
     * Multiple items stacked on top of each other (overlay).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.ElementStack getElementStack();

    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message
     * to populate a custom proto extension, which Piet passes along to the Host
     * for rendering. The Host is expected to be able to interpret and render
     * this view and return to Piet, which then simply places it within the
     * current view hierarchy at the proper position.
     * If a renderer cannot be found for a particular CustomElement in a client
     * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
     * the user at runtime. A black/grey box is displayed in place of the
     * CustomElement, but the rest of the Frame is still rendered. It is
     * possible for CustomElements to invoke Piet for rendering sub-views, but
     * only top-level Piet Frame protos can be embedded this way. (In other
     * words, do not try to embed Piet Elements directly inside a
     * CustomElement).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
     */
    boolean hasCustomElement();
    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message
     * to populate a custom proto extension, which Piet passes along to the Host
     * for rendering. The Host is expected to be able to interpret and render
     * this view and return to Piet, which then simply places it within the
     * current view hierarchy at the proper position.
     * If a renderer cannot be found for a particular CustomElement in a client
     * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
     * the user at runtime. A black/grey box is displayed in place of the
     * CustomElement, but the rest of the Frame is still rendered. It is
     * possible for CustomElements to invoke Piet for rendering sub-views, but
     * only top-level Piet Frame protos can be embedded this way. (In other
     * words, do not try to embed Piet Elements directly inside a
     * CustomElement).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.CustomElement getCustomElement();

    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones
     * are included in Piet Core. Common shareable elements can be implemented
     * in secondary Piet Modules, which are optional modules that can be
     * included in or excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference
     * being that CustomElements are rendered by non-Piet code, while
     * ModuleElements are rendered by secondary Piet Modules.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
     */
    boolean hasModuleElement();
    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones
     * are included in Piet Core. Common shareable elements can be implemented
     * in secondary Piet Modules, which are optional modules that can be
     * included in or excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference
     * being that CustomElements are rendered by non-Piet code, while
     * ModuleElements are rendered by secondary Piet Modules.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.ModuleElement getModuleElement();

    /**
     * <pre>
     * Every UI element can have accessibility-related fields.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
     */
    boolean hasAccessibility();
    /**
     * <pre>
     * Every UI element can have accessibility-related fields.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
     */
    com.google.search.now.ui.piet.AccessibilityProto.Accessibility getAccessibility();

    /**
     * <pre>
     * Inlined actions.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
     */
    boolean hasActions();
    /**
     * <pre>
     * Inlined actions.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
     */
    com.google.search.now.ui.piet.ActionsProto.Actions getActions();

    /**
     * <pre>
     * Actions coming from a template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
     */
    boolean hasActionsBinding();
    /**
     * <pre>
     * Actions coming from a template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef getActionsBinding();

    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    @java.lang.Deprecated java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> 
        getOverlaysList();
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.ElementsProto.Content getOverlays(int index);
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    @java.lang.Deprecated int getOverlaysCount();

    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Deprecated: use gravity_horizontal on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasGravityHorizontal();
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Deprecated: use gravity_horizontal on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.StylesProto.GravityHorizontal getGravityHorizontal();

    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Deprecated: use gravity_vertical on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasGravityVertical();
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Deprecated: use gravity_vertical on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.StylesProto.GravityVertical getGravityVertical();

    /**
     * <pre>
     * Defines the overflow behavior for contents that are wider than this
     * Element.
     * Contents can be wider than the container Element in two scenarios:
     *  1. An element has defined width in its style, and the width is larger
     *     than the size of the Element.
     *  2. The element is a GridRow, where the width sum of cells with defined dp
     *     width is larger than the containing Element.
     * In all other cases, contents cannot be wider than the container
     * Element.
     * IMPORTANT: This might not be supported in all implementations of Piet, due
     *   to implementation/product decisions (for example, horizontal scrolling in
     *   a swipable card might be disabled).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
     */
    boolean hasHorizontalOverflow();
    /**
     * <pre>
     * Defines the overflow behavior for contents that are wider than this
     * Element.
     * Contents can be wider than the container Element in two scenarios:
     *  1. An element has defined width in its style, and the width is larger
     *     than the size of the Element.
     *  2. The element is a GridRow, where the width sum of cells with defined dp
     *     width is larger than the containing Element.
     * In all other cases, contents cannot be wider than the container
     * Element.
     * IMPORTANT: This might not be supported in all implementations of Piet, due
     *   to implementation/product decisions (for example, horizontal scrolling in
     *   a swipable card might be disabled).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
     */
    com.google.search.now.ui.piet.ElementsProto.OverflowBehavior getHorizontalOverflow();

    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    boolean hasVed();
    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    java.lang.String getVed();
    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    com.google.protobuf.ByteString
        getVedBytes();

    /**
     * <pre>
     * A VedBindingRef to the VED that this Element will be bound to.
     * This is only meant to be used for Elements defined by a Template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
     */
    boolean hasVedBinding();
    /**
     * <pre>
     * A VedBindingRef to the VED that this Element will be bound to.
     * This is only meant to be used for Elements defined by a Template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef getVedBinding();

    /**
     * <pre>
     * Styles to apply to this Element. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
     */
    boolean hasStyleReferences();
    /**
     * <pre>
     * Styles to apply to this Element. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
     */
    com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences();

    /**
     * <pre>
     * Visibility state that can be controlled with binding.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
     */
    boolean hasVisibilityState();
    /**
     * <pre>
     * Visibility state that can be controlled with binding.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.VisibilityState getVisibilityState();

    public com.google.search.now.ui.piet.ElementsProto.Element.ElementsCase getElementsCase();

    public com.google.search.now.ui.piet.ElementsProto.Element.ActionsDataCase getActionsDataCase();

    public com.google.search.now.ui.piet.ElementsProto.Element.VedValueCase getVedValueCase();
  }
  /**
   * <pre>
   * Element is the "superclass" of all container and content types, holding all
   * shared parameters (styles, actions, etc).
   * Element size expands to fill its container, unless the content is taller than
   * the container, and the container height is not specified explicitly. In that
   * case, the Element and the container both get the height of the content.
   * Next Id: 25
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.Element}
   */
  public  static final class Element extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        Element, Element.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.Element)
      ElementOrBuilder {
    private Element() {
      overlays_ = emptyProtobufList();
      horizontalOverflow_ = 1;
    }
    private int bitField0_;
    private int elementsCase_ = 0;
    private java.lang.Object elements_;
    public enum ElementsCase
        implements com.google.protobuf.Internal.EnumLite {
      IMAGE_ELEMENT(3),
      SPACER_ELEMENT(4),
      TEXT_ELEMENT(2),
      GRID_ROW(5),
      ELEMENT_LIST(6),
      ELEMENT_STACK(24),
      CUSTOM_ELEMENT(1),
      MODULE_ELEMENT(21),
      ELEMENTS_NOT_SET(0);
      private final int value;
      private ElementsCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ElementsCase valueOf(int value) {
        return forNumber(value);
      }

      public static ElementsCase forNumber(int value) {
        switch (value) {
          case 3: return IMAGE_ELEMENT;
          case 4: return SPACER_ELEMENT;
          case 2: return TEXT_ELEMENT;
          case 5: return GRID_ROW;
          case 6: return ELEMENT_LIST;
          case 24: return ELEMENT_STACK;
          case 1: return CUSTOM_ELEMENT;
          case 21: return MODULE_ELEMENT;
          case 0: return ELEMENTS_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ElementsCase
    getElementsCase() {
      return ElementsCase.forNumber(
          elementsCase_);
    }

    private void clearElements() {
      elementsCase_ = 0;
      elements_ = null;
    }

    private int actionsDataCase_ = 0;
    private java.lang.Object actionsData_;
    public enum ActionsDataCase
        implements com.google.protobuf.Internal.EnumLite {
      ACTIONS(14),
      ACTIONS_BINDING(15),
      ACTIONSDATA_NOT_SET(0);
      private final int value;
      private ActionsDataCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ActionsDataCase valueOf(int value) {
        return forNumber(value);
      }

      public static ActionsDataCase forNumber(int value) {
        switch (value) {
          case 14: return ACTIONS;
          case 15: return ACTIONS_BINDING;
          case 0: return ACTIONSDATA_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ActionsDataCase
    getActionsDataCase() {
      return ActionsDataCase.forNumber(
          actionsDataCase_);
    }

    private void clearActionsData() {
      actionsDataCase_ = 0;
      actionsData_ = null;
    }

    private int vedValueCase_ = 0;
    private java.lang.Object vedValue_;
    public enum VedValueCase
        implements com.google.protobuf.Internal.EnumLite {
      VED(9),
      VED_BINDING(10),
      VEDVALUE_NOT_SET(0);
      private final int value;
      private VedValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static VedValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static VedValueCase forNumber(int value) {
        switch (value) {
          case 9: return VED;
          case 10: return VED_BINDING;
          case 0: return VEDVALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public VedValueCase
    getVedValueCase() {
      return VedValueCase.forNumber(
          vedValueCase_);
    }

    private void clearVedValue() {
      vedValueCase_ = 0;
      vedValue_ = null;
    }

    public static final int IMAGE_ELEMENT_FIELD_NUMBER = 3;
    /**
     * <pre>
     * An image container
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
     */
    public boolean hasImageElement() {
      return elementsCase_ == 3;
    }
    /**
     * <pre>
     * An image container
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.ImageElement getImageElement() {
      if (elementsCase_ == 3) {
         return (com.google.search.now.ui.piet.ElementsProto.ImageElement) elements_;
      }
      return com.google.search.now.ui.piet.ElementsProto.ImageElement.getDefaultInstance();
    }
    /**
     * <pre>
     * An image container
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
     */
    private void setImageElement(com.google.search.now.ui.piet.ElementsProto.ImageElement value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elements_ = value;
      elementsCase_ = 3;
    }
    /**
     * <pre>
     * An image container
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
     */
    private void setImageElement(
        com.google.search.now.ui.piet.ElementsProto.ImageElement.Builder builderForValue) {
      elements_ = builderForValue.build();
      elementsCase_ = 3;
    }
    /**
     * <pre>
     * An image container
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
     */
    private void mergeImageElement(com.google.search.now.ui.piet.ElementsProto.ImageElement value) {
      if (elementsCase_ == 3 &&
          elements_ != com.google.search.now.ui.piet.ElementsProto.ImageElement.getDefaultInstance()) {
        elements_ = com.google.search.now.ui.piet.ElementsProto.ImageElement.newBuilder((com.google.search.now.ui.piet.ElementsProto.ImageElement) elements_)
            .mergeFrom(value).buildPartial();
      } else {
        elements_ = value;
      }
      elementsCase_ = 3;
    }
    /**
     * <pre>
     * An image container
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
     */
    private void clearImageElement() {
      if (elementsCase_ == 3) {
        elementsCase_ = 0;
        elements_ = null;
      }
    }

    public static final int SPACER_ELEMENT_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Add a spacer line which can be defined as a divider.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
     */
    public boolean hasSpacerElement() {
      return elementsCase_ == 4;
    }
    /**
     * <pre>
     * Add a spacer line which can be defined as a divider.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.SpacerElement getSpacerElement() {
      if (elementsCase_ == 4) {
         return (com.google.search.now.ui.piet.ElementsProto.SpacerElement) elements_;
      }
      return com.google.search.now.ui.piet.ElementsProto.SpacerElement.getDefaultInstance();
    }
    /**
     * <pre>
     * Add a spacer line which can be defined as a divider.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
     */
    private void setSpacerElement(com.google.search.now.ui.piet.ElementsProto.SpacerElement value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elements_ = value;
      elementsCase_ = 4;
    }
    /**
     * <pre>
     * Add a spacer line which can be defined as a divider.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
     */
    private void setSpacerElement(
        com.google.search.now.ui.piet.ElementsProto.SpacerElement.Builder builderForValue) {
      elements_ = builderForValue.build();
      elementsCase_ = 4;
    }
    /**
     * <pre>
     * Add a spacer line which can be defined as a divider.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
     */
    private void mergeSpacerElement(com.google.search.now.ui.piet.ElementsProto.SpacerElement value) {
      if (elementsCase_ == 4 &&
          elements_ != com.google.search.now.ui.piet.ElementsProto.SpacerElement.getDefaultInstance()) {
        elements_ = com.google.search.now.ui.piet.ElementsProto.SpacerElement.newBuilder((com.google.search.now.ui.piet.ElementsProto.SpacerElement) elements_)
            .mergeFrom(value).buildPartial();
      } else {
        elements_ = value;
      }
      elementsCase_ = 4;
    }
    /**
     * <pre>
     * Add a spacer line which can be defined as a divider.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
     */
    private void clearSpacerElement() {
      if (elementsCase_ == 4) {
        elementsCase_ = 0;
        elements_ = null;
      }
    }

    public static final int TEXT_ELEMENT_FIELD_NUMBER = 2;
    /**
     * <pre>
     * A simple text line
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
     */
    public boolean hasTextElement() {
      return elementsCase_ == 2;
    }
    /**
     * <pre>
     * A simple text line
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.TextElement getTextElement() {
      if (elementsCase_ == 2) {
         return (com.google.search.now.ui.piet.ElementsProto.TextElement) elements_;
      }
      return com.google.search.now.ui.piet.ElementsProto.TextElement.getDefaultInstance();
    }
    /**
     * <pre>
     * A simple text line
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
     */
    private void setTextElement(com.google.search.now.ui.piet.ElementsProto.TextElement value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elements_ = value;
      elementsCase_ = 2;
    }
    /**
     * <pre>
     * A simple text line
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
     */
    private void setTextElement(
        com.google.search.now.ui.piet.ElementsProto.TextElement.Builder builderForValue) {
      elements_ = builderForValue.build();
      elementsCase_ = 2;
    }
    /**
     * <pre>
     * A simple text line
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
     */
    private void mergeTextElement(com.google.search.now.ui.piet.ElementsProto.TextElement value) {
      if (elementsCase_ == 2 &&
          elements_ != com.google.search.now.ui.piet.ElementsProto.TextElement.getDefaultInstance()) {
        elements_ = com.google.search.now.ui.piet.ElementsProto.TextElement.newBuilder((com.google.search.now.ui.piet.ElementsProto.TextElement) elements_)
            .mergeFrom(value).buildPartial();
      } else {
        elements_ = value;
      }
      elementsCase_ = 2;
    }
    /**
     * <pre>
     * A simple text line
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
     */
    private void clearTextElement() {
      if (elementsCase_ == 2) {
        elementsCase_ = 0;
        elements_ = null;
      }
    }

    public static final int GRID_ROW_FIELD_NUMBER = 5;
    /**
     * <pre>
     * A horizontal layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
     */
    public boolean hasGridRow() {
      return elementsCase_ == 5;
    }
    /**
     * <pre>
     * A horizontal layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.GridRow getGridRow() {
      if (elementsCase_ == 5) {
         return (com.google.search.now.ui.piet.ElementsProto.GridRow) elements_;
      }
      return com.google.search.now.ui.piet.ElementsProto.GridRow.getDefaultInstance();
    }
    /**
     * <pre>
     * A horizontal layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
     */
    private void setGridRow(com.google.search.now.ui.piet.ElementsProto.GridRow value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elements_ = value;
      elementsCase_ = 5;
    }
    /**
     * <pre>
     * A horizontal layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
     */
    private void setGridRow(
        com.google.search.now.ui.piet.ElementsProto.GridRow.Builder builderForValue) {
      elements_ = builderForValue.build();
      elementsCase_ = 5;
    }
    /**
     * <pre>
     * A horizontal layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
     */
    private void mergeGridRow(com.google.search.now.ui.piet.ElementsProto.GridRow value) {
      if (elementsCase_ == 5 &&
          elements_ != com.google.search.now.ui.piet.ElementsProto.GridRow.getDefaultInstance()) {
        elements_ = com.google.search.now.ui.piet.ElementsProto.GridRow.newBuilder((com.google.search.now.ui.piet.ElementsProto.GridRow) elements_)
            .mergeFrom(value).buildPartial();
      } else {
        elements_ = value;
      }
      elementsCase_ = 5;
    }
    /**
     * <pre>
     * A horizontal layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
     */
    private void clearGridRow() {
      if (elementsCase_ == 5) {
        elementsCase_ = 0;
        elements_ = null;
      }
    }

    public static final int ELEMENT_LIST_FIELD_NUMBER = 6;
    /**
     * <pre>
     * A vertical layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
     */
    public boolean hasElementList() {
      return elementsCase_ == 6;
    }
    /**
     * <pre>
     * A vertical layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.ElementList getElementList() {
      if (elementsCase_ == 6) {
         return (com.google.search.now.ui.piet.ElementsProto.ElementList) elements_;
      }
      return com.google.search.now.ui.piet.ElementsProto.ElementList.getDefaultInstance();
    }
    /**
     * <pre>
     * A vertical layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
     */
    private void setElementList(com.google.search.now.ui.piet.ElementsProto.ElementList value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elements_ = value;
      elementsCase_ = 6;
    }
    /**
     * <pre>
     * A vertical layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
     */
    private void setElementList(
        com.google.search.now.ui.piet.ElementsProto.ElementList.Builder builderForValue) {
      elements_ = builderForValue.build();
      elementsCase_ = 6;
    }
    /**
     * <pre>
     * A vertical layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
     */
    private void mergeElementList(com.google.search.now.ui.piet.ElementsProto.ElementList value) {
      if (elementsCase_ == 6 &&
          elements_ != com.google.search.now.ui.piet.ElementsProto.ElementList.getDefaultInstance()) {
        elements_ = com.google.search.now.ui.piet.ElementsProto.ElementList.newBuilder((com.google.search.now.ui.piet.ElementsProto.ElementList) elements_)
            .mergeFrom(value).buildPartial();
      } else {
        elements_ = value;
      }
      elementsCase_ = 6;
    }
    /**
     * <pre>
     * A vertical layout of multiple items.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
     */
    private void clearElementList() {
      if (elementsCase_ == 6) {
        elementsCase_ = 0;
        elements_ = null;
      }
    }

    public static final int ELEMENT_STACK_FIELD_NUMBER = 24;
    /**
     * <pre>
     * Multiple items stacked on top of each other (overlay).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
     */
    public boolean hasElementStack() {
      return elementsCase_ == 24;
    }
    /**
     * <pre>
     * Multiple items stacked on top of each other (overlay).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.ElementStack getElementStack() {
      if (elementsCase_ == 24) {
         return (com.google.search.now.ui.piet.ElementsProto.ElementStack) elements_;
      }
      return com.google.search.now.ui.piet.ElementsProto.ElementStack.getDefaultInstance();
    }
    /**
     * <pre>
     * Multiple items stacked on top of each other (overlay).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
     */
    private void setElementStack(com.google.search.now.ui.piet.ElementsProto.ElementStack value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elements_ = value;
      elementsCase_ = 24;
    }
    /**
     * <pre>
     * Multiple items stacked on top of each other (overlay).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
     */
    private void setElementStack(
        com.google.search.now.ui.piet.ElementsProto.ElementStack.Builder builderForValue) {
      elements_ = builderForValue.build();
      elementsCase_ = 24;
    }
    /**
     * <pre>
     * Multiple items stacked on top of each other (overlay).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
     */
    private void mergeElementStack(com.google.search.now.ui.piet.ElementsProto.ElementStack value) {
      if (elementsCase_ == 24 &&
          elements_ != com.google.search.now.ui.piet.ElementsProto.ElementStack.getDefaultInstance()) {
        elements_ = com.google.search.now.ui.piet.ElementsProto.ElementStack.newBuilder((com.google.search.now.ui.piet.ElementsProto.ElementStack) elements_)
            .mergeFrom(value).buildPartial();
      } else {
        elements_ = value;
      }
      elementsCase_ = 24;
    }
    /**
     * <pre>
     * Multiple items stacked on top of each other (overlay).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
     */
    private void clearElementStack() {
      if (elementsCase_ == 24) {
        elementsCase_ = 0;
        elements_ = null;
      }
    }

    public static final int CUSTOM_ELEMENT_FIELD_NUMBER = 1;
    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message
     * to populate a custom proto extension, which Piet passes along to the Host
     * for rendering. The Host is expected to be able to interpret and render
     * this view and return to Piet, which then simply places it within the
     * current view hierarchy at the proper position.
     * If a renderer cannot be found for a particular CustomElement in a client
     * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
     * the user at runtime. A black/grey box is displayed in place of the
     * CustomElement, but the rest of the Frame is still rendered. It is
     * possible for CustomElements to invoke Piet for rendering sub-views, but
     * only top-level Piet Frame protos can be embedded this way. (In other
     * words, do not try to embed Piet Elements directly inside a
     * CustomElement).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
     */
    public boolean hasCustomElement() {
      return elementsCase_ == 1;
    }
    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message
     * to populate a custom proto extension, which Piet passes along to the Host
     * for rendering. The Host is expected to be able to interpret and render
     * this view and return to Piet, which then simply places it within the
     * current view hierarchy at the proper position.
     * If a renderer cannot be found for a particular CustomElement in a client
     * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
     * the user at runtime. A black/grey box is displayed in place of the
     * CustomElement, but the rest of the Frame is still rendered. It is
     * possible for CustomElements to invoke Piet for rendering sub-views, but
     * only top-level Piet Frame protos can be embedded this way. (In other
     * words, do not try to embed Piet Elements directly inside a
     * CustomElement).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.CustomElement getCustomElement() {
      if (elementsCase_ == 1) {
         return (com.google.search.now.ui.piet.ElementsProto.CustomElement) elements_;
      }
      return com.google.search.now.ui.piet.ElementsProto.CustomElement.getDefaultInstance();
    }
    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message
     * to populate a custom proto extension, which Piet passes along to the Host
     * for rendering. The Host is expected to be able to interpret and render
     * this view and return to Piet, which then simply places it within the
     * current view hierarchy at the proper position.
     * If a renderer cannot be found for a particular CustomElement in a client
     * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
     * the user at runtime. A black/grey box is displayed in place of the
     * CustomElement, but the rest of the Frame is still rendered. It is
     * possible for CustomElements to invoke Piet for rendering sub-views, but
     * only top-level Piet Frame protos can be embedded this way. (In other
     * words, do not try to embed Piet Elements directly inside a
     * CustomElement).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
     */
    private void setCustomElement(com.google.search.now.ui.piet.ElementsProto.CustomElement value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elements_ = value;
      elementsCase_ = 1;
    }
    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message
     * to populate a custom proto extension, which Piet passes along to the Host
     * for rendering. The Host is expected to be able to interpret and render
     * this view and return to Piet, which then simply places it within the
     * current view hierarchy at the proper position.
     * If a renderer cannot be found for a particular CustomElement in a client
     * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
     * the user at runtime. A black/grey box is displayed in place of the
     * CustomElement, but the rest of the Frame is still rendered. It is
     * possible for CustomElements to invoke Piet for rendering sub-views, but
     * only top-level Piet Frame protos can be embedded this way. (In other
     * words, do not try to embed Piet Elements directly inside a
     * CustomElement).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
     */
    private void setCustomElement(
        com.google.search.now.ui.piet.ElementsProto.CustomElement.Builder builderForValue) {
      elements_ = builderForValue.build();
      elementsCase_ = 1;
    }
    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message
     * to populate a custom proto extension, which Piet passes along to the Host
     * for rendering. The Host is expected to be able to interpret and render
     * this view and return to Piet, which then simply places it within the
     * current view hierarchy at the proper position.
     * If a renderer cannot be found for a particular CustomElement in a client
     * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
     * the user at runtime. A black/grey box is displayed in place of the
     * CustomElement, but the rest of the Frame is still rendered. It is
     * possible for CustomElements to invoke Piet for rendering sub-views, but
     * only top-level Piet Frame protos can be embedded this way. (In other
     * words, do not try to embed Piet Elements directly inside a
     * CustomElement).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
     */
    private void mergeCustomElement(com.google.search.now.ui.piet.ElementsProto.CustomElement value) {
      if (elementsCase_ == 1 &&
          elements_ != com.google.search.now.ui.piet.ElementsProto.CustomElement.getDefaultInstance()) {
        elements_ = com.google.search.now.ui.piet.ElementsProto.CustomElement.newBuilder((com.google.search.now.ui.piet.ElementsProto.CustomElement) elements_)
            .mergeFrom(value).buildPartial();
      } else {
        elements_ = value;
      }
      elementsCase_ = 1;
    }
    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message
     * to populate a custom proto extension, which Piet passes along to the Host
     * for rendering. The Host is expected to be able to interpret and render
     * this view and return to Piet, which then simply places it within the
     * current view hierarchy at the proper position.
     * If a renderer cannot be found for a particular CustomElement in a client
     * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
     * the user at runtime. A black/grey box is displayed in place of the
     * CustomElement, but the rest of the Frame is still rendered. It is
     * possible for CustomElements to invoke Piet for rendering sub-views, but
     * only top-level Piet Frame protos can be embedded this way. (In other
     * words, do not try to embed Piet Elements directly inside a
     * CustomElement).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
     */
    private void clearCustomElement() {
      if (elementsCase_ == 1) {
        elementsCase_ = 0;
        elements_ = null;
      }
    }

    public static final int MODULE_ELEMENT_FIELD_NUMBER = 21;
    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones
     * are included in Piet Core. Common shareable elements can be implemented
     * in secondary Piet Modules, which are optional modules that can be
     * included in or excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference
     * being that CustomElements are rendered by non-Piet code, while
     * ModuleElements are rendered by secondary Piet Modules.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
     */
    public boolean hasModuleElement() {
      return elementsCase_ == 21;
    }
    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones
     * are included in Piet Core. Common shareable elements can be implemented
     * in secondary Piet Modules, which are optional modules that can be
     * included in or excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference
     * being that CustomElements are rendered by non-Piet code, while
     * ModuleElements are rendered by secondary Piet Modules.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.ModuleElement getModuleElement() {
      if (elementsCase_ == 21) {
         return (com.google.search.now.ui.piet.ElementsProto.ModuleElement) elements_;
      }
      return com.google.search.now.ui.piet.ElementsProto.ModuleElement.getDefaultInstance();
    }
    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones
     * are included in Piet Core. Common shareable elements can be implemented
     * in secondary Piet Modules, which are optional modules that can be
     * included in or excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference
     * being that CustomElements are rendered by non-Piet code, while
     * ModuleElements are rendered by secondary Piet Modules.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
     */
    private void setModuleElement(com.google.search.now.ui.piet.ElementsProto.ModuleElement value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elements_ = value;
      elementsCase_ = 21;
    }
    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones
     * are included in Piet Core. Common shareable elements can be implemented
     * in secondary Piet Modules, which are optional modules that can be
     * included in or excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference
     * being that CustomElements are rendered by non-Piet code, while
     * ModuleElements are rendered by secondary Piet Modules.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
     */
    private void setModuleElement(
        com.google.search.now.ui.piet.ElementsProto.ModuleElement.Builder builderForValue) {
      elements_ = builderForValue.build();
      elementsCase_ = 21;
    }
    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones
     * are included in Piet Core. Common shareable elements can be implemented
     * in secondary Piet Modules, which are optional modules that can be
     * included in or excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference
     * being that CustomElements are rendered by non-Piet code, while
     * ModuleElements are rendered by secondary Piet Modules.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
     */
    private void mergeModuleElement(com.google.search.now.ui.piet.ElementsProto.ModuleElement value) {
      if (elementsCase_ == 21 &&
          elements_ != com.google.search.now.ui.piet.ElementsProto.ModuleElement.getDefaultInstance()) {
        elements_ = com.google.search.now.ui.piet.ElementsProto.ModuleElement.newBuilder((com.google.search.now.ui.piet.ElementsProto.ModuleElement) elements_)
            .mergeFrom(value).buildPartial();
      } else {
        elements_ = value;
      }
      elementsCase_ = 21;
    }
    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones
     * are included in Piet Core. Common shareable elements can be implemented
     * in secondary Piet Modules, which are optional modules that can be
     * included in or excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference
     * being that CustomElements are rendered by non-Piet code, while
     * ModuleElements are rendered by secondary Piet Modules.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
     */
    private void clearModuleElement() {
      if (elementsCase_ == 21) {
        elementsCase_ = 0;
        elements_ = null;
      }
    }

    public static final int ACCESSIBILITY_FIELD_NUMBER = 11;
    private com.google.search.now.ui.piet.AccessibilityProto.Accessibility accessibility_;
    /**
     * <pre>
     * Every UI element can have accessibility-related fields.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
     */
    public boolean hasAccessibility() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * Every UI element can have accessibility-related fields.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
     */
    public com.google.search.now.ui.piet.AccessibilityProto.Accessibility getAccessibility() {
      return accessibility_ == null ? com.google.search.now.ui.piet.AccessibilityProto.Accessibility.getDefaultInstance() : accessibility_;
    }
    /**
     * <pre>
     * Every UI element can have accessibility-related fields.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
     */
    private void setAccessibility(com.google.search.now.ui.piet.AccessibilityProto.Accessibility value) {
      if (value == null) {
        throw new NullPointerException();
      }
      accessibility_ = value;
      bitField0_ |= 0x00000100;
      }
    /**
     * <pre>
     * Every UI element can have accessibility-related fields.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
     */
    private void setAccessibility(
        com.google.search.now.ui.piet.AccessibilityProto.Accessibility.Builder builderForValue) {
      accessibility_ = builderForValue.build();
      bitField0_ |= 0x00000100;
    }
    /**
     * <pre>
     * Every UI element can have accessibility-related fields.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
     */
    private void mergeAccessibility(com.google.search.now.ui.piet.AccessibilityProto.Accessibility value) {
      if (accessibility_ != null &&
          accessibility_ != com.google.search.now.ui.piet.AccessibilityProto.Accessibility.getDefaultInstance()) {
        accessibility_ =
          com.google.search.now.ui.piet.AccessibilityProto.Accessibility.newBuilder(accessibility_).mergeFrom(value).buildPartial();
      } else {
        accessibility_ = value;
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <pre>
     * Every UI element can have accessibility-related fields.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
     */
    private void clearAccessibility() {  accessibility_ = null;
      bitField0_ = (bitField0_ & ~0x00000100);
    }

    public static final int ACTIONS_FIELD_NUMBER = 14;
    /**
     * <pre>
     * Inlined actions.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
     */
    public boolean hasActions() {
      return actionsDataCase_ == 14;
    }
    /**
     * <pre>
     * Inlined actions.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.Actions getActions() {
      if (actionsDataCase_ == 14) {
         return (com.google.search.now.ui.piet.ActionsProto.Actions) actionsData_;
      }
      return com.google.search.now.ui.piet.ActionsProto.Actions.getDefaultInstance();
    }
    /**
     * <pre>
     * Inlined actions.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
     */
    private void setActions(com.google.search.now.ui.piet.ActionsProto.Actions value) {
      if (value == null) {
        throw new NullPointerException();
      }
      actionsData_ = value;
      actionsDataCase_ = 14;
    }
    /**
     * <pre>
     * Inlined actions.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
     */
    private void setActions(
        com.google.search.now.ui.piet.ActionsProto.Actions.Builder builderForValue) {
      actionsData_ = builderForValue.build();
      actionsDataCase_ = 14;
    }
    /**
     * <pre>
     * Inlined actions.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
     */
    private void mergeActions(com.google.search.now.ui.piet.ActionsProto.Actions value) {
      if (actionsDataCase_ == 14 &&
          actionsData_ != com.google.search.now.ui.piet.ActionsProto.Actions.getDefaultInstance()) {
        actionsData_ = com.google.search.now.ui.piet.ActionsProto.Actions.newBuilder((com.google.search.now.ui.piet.ActionsProto.Actions) actionsData_)
            .mergeFrom(value).buildPartial();
      } else {
        actionsData_ = value;
      }
      actionsDataCase_ = 14;
    }
    /**
     * <pre>
     * Inlined actions.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
     */
    private void clearActions() {
      if (actionsDataCase_ == 14) {
        actionsDataCase_ = 0;
        actionsData_ = null;
      }
    }

    public static final int ACTIONS_BINDING_FIELD_NUMBER = 15;
    /**
     * <pre>
     * Actions coming from a template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
     */
    public boolean hasActionsBinding() {
      return actionsDataCase_ == 15;
    }
    /**
     * <pre>
     * Actions coming from a template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef getActionsBinding() {
      if (actionsDataCase_ == 15) {
         return (com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef) actionsData_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * Actions coming from a template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
     */
    private void setActionsBinding(com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      actionsData_ = value;
      actionsDataCase_ = 15;
    }
    /**
     * <pre>
     * Actions coming from a template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
     */
    private void setActionsBinding(
        com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef.Builder builderForValue) {
      actionsData_ = builderForValue.build();
      actionsDataCase_ = 15;
    }
    /**
     * <pre>
     * Actions coming from a template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
     */
    private void mergeActionsBinding(com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef value) {
      if (actionsDataCase_ == 15 &&
          actionsData_ != com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef.getDefaultInstance()) {
        actionsData_ = com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef) actionsData_)
            .mergeFrom(value).buildPartial();
      } else {
        actionsData_ = value;
      }
      actionsDataCase_ = 15;
    }
    /**
     * <pre>
     * Actions coming from a template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
     */
    private void clearActionsBinding() {
      if (actionsDataCase_ == 15) {
        actionsDataCase_ = 0;
        actionsData_ = null;
      }
    }

    public static final int OVERLAYS_FIELD_NUMBER = 22;
    private com.google.protobuf.Internal.ProtobufList<com.google.search.now.ui.piet.ElementsProto.Content> overlays_;
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> getOverlaysList() {
      return overlays_;
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<? extends com.google.search.now.ui.piet.ElementsProto.ContentOrBuilder> 
        getOverlaysOrBuilderList() {
      return overlays_;
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    @java.lang.Deprecated public int getOverlaysCount() {
      return overlays_.size();
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.ElementsProto.Content getOverlays(int index) {
      return overlays_.get(index);
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.ElementsProto.ContentOrBuilder getOverlaysOrBuilder(
        int index) {
      return overlays_.get(index);
    }
    private void ensureOverlaysIsMutable() {
      if (!overlays_.isModifiable()) {
        overlays_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(overlays_);
       }
    }

    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void setOverlays(
        int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOverlaysIsMutable();
      overlays_.set(index, value);
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void setOverlays(
        int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureOverlaysIsMutable();
      overlays_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void addOverlays(com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOverlaysIsMutable();
      overlays_.add(value);
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void addOverlays(
        int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOverlaysIsMutable();
      overlays_.add(index, value);
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void addOverlays(
        com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureOverlaysIsMutable();
      overlays_.add(builderForValue.build());
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void addOverlays(
        int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureOverlaysIsMutable();
      overlays_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void addAllOverlays(
        java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.Content> values) {
      ensureOverlaysIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, overlays_);
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void clearOverlays() {
      overlays_ = emptyProtobufList();
    }
    /**
     * <pre>
     * A list of Contents to be overlaid on top of this Element.
     * This field is repeated to allow multiple overlay layers with different
     * gravity settings. The index of the item inside the repeated field
     * determines the order in which views will be laid out. Later items will
     * appear above the earlier ones.
     * Deprecated: To make an overlay on an Element, wrap the Element in an
     * ElementStack.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
     */
    private void removeOverlays(int index) {
      ensureOverlaysIsMutable();
      overlays_.remove(index);
    }

    public static final int GRAVITY_HORIZONTAL_FIELD_NUMBER = 12;
    private int gravityHorizontal_;
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Deprecated: use gravity_horizontal on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasGravityHorizontal() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Deprecated: use gravity_horizontal on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.GravityHorizontal getGravityHorizontal() {
      com.google.search.now.ui.piet.StylesProto.GravityHorizontal result = com.google.search.now.ui.piet.StylesProto.GravityHorizontal.forNumber(gravityHorizontal_);
      return result == null ? com.google.search.now.ui.piet.StylesProto.GravityHorizontal.GRAVITY_HORIZONTAL_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Deprecated: use gravity_horizontal on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
     */
    private void setGravityHorizontal(com.google.search.now.ui.piet.StylesProto.GravityHorizontal value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000800;
      gravityHorizontal_ = value.getNumber();
    }
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Deprecated: use gravity_horizontal on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
     */
    private void clearGravityHorizontal() {
      bitField0_ = (bitField0_ & ~0x00000800);
      gravityHorizontal_ = 0;
    }

    public static final int GRAVITY_VERTICAL_FIELD_NUMBER = 18;
    private int gravityVertical_;
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Deprecated: use gravity_vertical on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasGravityVertical() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Deprecated: use gravity_vertical on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.GravityVertical getGravityVertical() {
      com.google.search.now.ui.piet.StylesProto.GravityVertical result = com.google.search.now.ui.piet.StylesProto.GravityVertical.forNumber(gravityVertical_);
      return result == null ? com.google.search.now.ui.piet.StylesProto.GravityVertical.GRAVITY_VERTICAL_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Deprecated: use gravity_vertical on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
     */
    private void setGravityVertical(com.google.search.now.ui.piet.StylesProto.GravityVertical value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00001000;
      gravityVertical_ = value.getNumber();
    }
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Deprecated: use gravity_vertical on Style instead
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
     */
    private void clearGravityVertical() {
      bitField0_ = (bitField0_ & ~0x00001000);
      gravityVertical_ = 0;
    }

    public static final int HORIZONTAL_OVERFLOW_FIELD_NUMBER = 16;
    private int horizontalOverflow_;
    /**
     * <pre>
     * Defines the overflow behavior for contents that are wider than this
     * Element.
     * Contents can be wider than the container Element in two scenarios:
     *  1. An element has defined width in its style, and the width is larger
     *     than the size of the Element.
     *  2. The element is a GridRow, where the width sum of cells with defined dp
     *     width is larger than the containing Element.
     * In all other cases, contents cannot be wider than the container
     * Element.
     * IMPORTANT: This might not be supported in all implementations of Piet, due
     *   to implementation/product decisions (for example, horizontal scrolling in
     *   a swipable card might be disabled).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
     */
    public boolean hasHorizontalOverflow() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * Defines the overflow behavior for contents that are wider than this
     * Element.
     * Contents can be wider than the container Element in two scenarios:
     *  1. An element has defined width in its style, and the width is larger
     *     than the size of the Element.
     *  2. The element is a GridRow, where the width sum of cells with defined dp
     *     width is larger than the containing Element.
     * In all other cases, contents cannot be wider than the container
     * Element.
     * IMPORTANT: This might not be supported in all implementations of Piet, due
     *   to implementation/product decisions (for example, horizontal scrolling in
     *   a swipable card might be disabled).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.OverflowBehavior getHorizontalOverflow() {
      com.google.search.now.ui.piet.ElementsProto.OverflowBehavior result = com.google.search.now.ui.piet.ElementsProto.OverflowBehavior.forNumber(horizontalOverflow_);
      return result == null ? com.google.search.now.ui.piet.ElementsProto.OverflowBehavior.OVERFLOW_HIDDEN : result;
    }
    /**
     * <pre>
     * Defines the overflow behavior for contents that are wider than this
     * Element.
     * Contents can be wider than the container Element in two scenarios:
     *  1. An element has defined width in its style, and the width is larger
     *     than the size of the Element.
     *  2. The element is a GridRow, where the width sum of cells with defined dp
     *     width is larger than the containing Element.
     * In all other cases, contents cannot be wider than the container
     * Element.
     * IMPORTANT: This might not be supported in all implementations of Piet, due
     *   to implementation/product decisions (for example, horizontal scrolling in
     *   a swipable card might be disabled).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
     */
    private void setHorizontalOverflow(com.google.search.now.ui.piet.ElementsProto.OverflowBehavior value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00002000;
      horizontalOverflow_ = value.getNumber();
    }
    /**
     * <pre>
     * Defines the overflow behavior for contents that are wider than this
     * Element.
     * Contents can be wider than the container Element in two scenarios:
     *  1. An element has defined width in its style, and the width is larger
     *     than the size of the Element.
     *  2. The element is a GridRow, where the width sum of cells with defined dp
     *     width is larger than the containing Element.
     * In all other cases, contents cannot be wider than the container
     * Element.
     * IMPORTANT: This might not be supported in all implementations of Piet, due
     *   to implementation/product decisions (for example, horizontal scrolling in
     *   a swipable card might be disabled).
     * </pre>
     *
     * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
     */
    private void clearHorizontalOverflow() {
      bitField0_ = (bitField0_ & ~0x00002000);
      horizontalOverflow_ = 1;
    }

    public static final int VED_FIELD_NUMBER = 9;
    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    public boolean hasVed() {
      return vedValueCase_ == 9;
    }
    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    public java.lang.String getVed() {
      java.lang.String ref = "";
      if (vedValueCase_ == 9) {
        ref = (java.lang.String) vedValue_;
      }
      return ref;
    }
    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    public com.google.protobuf.ByteString
        getVedBytes() {
      java.lang.String ref = "";
      if (vedValueCase_ == 9) {
        ref = (java.lang.String) vedValue_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    private void setVed(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  vedValueCase_ = 9;
      vedValue_ = value;
    }
    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    private void clearVed() {
      if (vedValueCase_ == 9) {
        vedValueCase_ = 0;
        vedValue_ = null;
      }
    }
    /**
     * <pre>
     * A base64 encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to this piet Element.
     * </pre>
     *
     * <code>optional string ved = 9;</code>
     */
    private void setVedBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  vedValueCase_ = 9;
      vedValue_ = value.toStringUtf8();
    }

    public static final int VED_BINDING_FIELD_NUMBER = 10;
    /**
     * <pre>
     * A VedBindingRef to the VED that this Element will be bound to.
     * This is only meant to be used for Elements defined by a Template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
     */
    public boolean hasVedBinding() {
      return vedValueCase_ == 10;
    }
    /**
     * <pre>
     * A VedBindingRef to the VED that this Element will be bound to.
     * This is only meant to be used for Elements defined by a Template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef getVedBinding() {
      if (vedValueCase_ == 10) {
         return (com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef) vedValue_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * A VedBindingRef to the VED that this Element will be bound to.
     * This is only meant to be used for Elements defined by a Template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
     */
    private void setVedBinding(com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      vedValue_ = value;
      vedValueCase_ = 10;
    }
    /**
     * <pre>
     * A VedBindingRef to the VED that this Element will be bound to.
     * This is only meant to be used for Elements defined by a Template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
     */
    private void setVedBinding(
        com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef.Builder builderForValue) {
      vedValue_ = builderForValue.build();
      vedValueCase_ = 10;
    }
    /**
     * <pre>
     * A VedBindingRef to the VED that this Element will be bound to.
     * This is only meant to be used for Elements defined by a Template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
     */
    private void mergeVedBinding(com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef value) {
      if (vedValueCase_ == 10 &&
          vedValue_ != com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef.getDefaultInstance()) {
        vedValue_ = com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef) vedValue_)
            .mergeFrom(value).buildPartial();
      } else {
        vedValue_ = value;
      }
      vedValueCase_ = 10;
    }
    /**
     * <pre>
     * A VedBindingRef to the VED that this Element will be bound to.
     * This is only meant to be used for Elements defined by a Template.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
     */
    private void clearVedBinding() {
      if (vedValueCase_ == 10) {
        vedValueCase_ = 0;
        vedValue_ = null;
      }
    }

    public static final int STYLE_REFERENCES_FIELD_NUMBER = 17;
    private com.google.search.now.ui.piet.StylesProto.StyleIdsStack styleReferences_;
    /**
     * <pre>
     * Styles to apply to this Element. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
     */
    public boolean hasStyleReferences() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     * Styles to apply to this Element. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
     */
    public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
      return styleReferences_ == null ? com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance() : styleReferences_;
    }
    /**
     * <pre>
     * Styles to apply to this Element. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
     */
    private void setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (value == null) {
        throw new NullPointerException();
      }
      styleReferences_ = value;
      bitField0_ |= 0x00010000;
      }
    /**
     * <pre>
     * Styles to apply to this Element. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
     */
    private void setStyleReferences(
        com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
      styleReferences_ = builderForValue.build();
      bitField0_ |= 0x00010000;
    }
    /**
     * <pre>
     * Styles to apply to this Element. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
     */
    private void mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (styleReferences_ != null &&
          styleReferences_ != com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance()) {
        styleReferences_ =
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.newBuilder(styleReferences_).mergeFrom(value).buildPartial();
      } else {
        styleReferences_ = value;
      }
      bitField0_ |= 0x00010000;
    }
    /**
     * <pre>
     * Styles to apply to this Element. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
     */
    private void clearStyleReferences() {  styleReferences_ = null;
      bitField0_ = (bitField0_ & ~0x00010000);
    }

    public static final int VISIBILITY_STATE_FIELD_NUMBER = 23;
    private com.google.search.now.ui.piet.ElementsProto.VisibilityState visibilityState_;
    /**
     * <pre>
     * Visibility state that can be controlled with binding.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
     */
    public boolean hasVisibilityState() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     * Visibility state that can be controlled with binding.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.VisibilityState getVisibilityState() {
      return visibilityState_ == null ? com.google.search.now.ui.piet.ElementsProto.VisibilityState.getDefaultInstance() : visibilityState_;
    }
    /**
     * <pre>
     * Visibility state that can be controlled with binding.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
     */
    private void setVisibilityState(com.google.search.now.ui.piet.ElementsProto.VisibilityState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      visibilityState_ = value;
      bitField0_ |= 0x00020000;
      }
    /**
     * <pre>
     * Visibility state that can be controlled with binding.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
     */
    private void setVisibilityState(
        com.google.search.now.ui.piet.ElementsProto.VisibilityState.Builder builderForValue) {
      visibilityState_ = builderForValue.build();
      bitField0_ |= 0x00020000;
    }
    /**
     * <pre>
     * Visibility state that can be controlled with binding.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
     */
    private void mergeVisibilityState(com.google.search.now.ui.piet.ElementsProto.VisibilityState value) {
      if (visibilityState_ != null &&
          visibilityState_ != com.google.search.now.ui.piet.ElementsProto.VisibilityState.getDefaultInstance()) {
        visibilityState_ =
          com.google.search.now.ui.piet.ElementsProto.VisibilityState.newBuilder(visibilityState_).mergeFrom(value).buildPartial();
      } else {
        visibilityState_ = value;
      }
      bitField0_ |= 0x00020000;
    }
    /**
     * <pre>
     * Visibility state that can be controlled with binding.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
     */
    private void clearVisibilityState() {  visibilityState_ = null;
      bitField0_ = (bitField0_ & ~0x00020000);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.Element, com.google.search.now.ui.piet.ElementsProto.Element.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (elementsCase_ == 1) {
        output.writeMessage(1, (com.google.search.now.ui.piet.ElementsProto.CustomElement) elements_);
      }
      if (elementsCase_ == 2) {
        output.writeMessage(2, (com.google.search.now.ui.piet.ElementsProto.TextElement) elements_);
      }
      if (elementsCase_ == 3) {
        output.writeMessage(3, (com.google.search.now.ui.piet.ElementsProto.ImageElement) elements_);
      }
      if (elementsCase_ == 4) {
        output.writeMessage(4, (com.google.search.now.ui.piet.ElementsProto.SpacerElement) elements_);
      }
      if (elementsCase_ == 5) {
        output.writeMessage(5, (com.google.search.now.ui.piet.ElementsProto.GridRow) elements_);
      }
      if (elementsCase_ == 6) {
        output.writeMessage(6, (com.google.search.now.ui.piet.ElementsProto.ElementList) elements_);
      }
      if (vedValueCase_ == 9) {
        output.writeString(9, getVed());
      }
      if (vedValueCase_ == 10) {
        output.writeMessage(10, (com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef) vedValue_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(11, getAccessibility());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(12, gravityHorizontal_);
      }
      if (actionsDataCase_ == 14) {
        output.writeMessage(14, (com.google.search.now.ui.piet.ActionsProto.Actions) actionsData_);
      }
      if (actionsDataCase_ == 15) {
        output.writeMessage(15, (com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef) actionsData_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeEnum(16, horizontalOverflow_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(17, getStyleReferences());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeEnum(18, gravityVertical_);
      }
      if (elementsCase_ == 21) {
        output.writeMessage(21, (com.google.search.now.ui.piet.ElementsProto.ModuleElement) elements_);
      }
      for (int i = 0; i < overlays_.size(); i++) {
        output.writeMessage(22, overlays_.get(i));
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(23, getVisibilityState());
      }
      if (elementsCase_ == 24) {
        output.writeMessage(24, (com.google.search.now.ui.piet.ElementsProto.ElementStack) elements_);
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (elementsCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.google.search.now.ui.piet.ElementsProto.CustomElement) elements_);
      }
      if (elementsCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.search.now.ui.piet.ElementsProto.TextElement) elements_);
      }
      if (elementsCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.search.now.ui.piet.ElementsProto.ImageElement) elements_);
      }
      if (elementsCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.search.now.ui.piet.ElementsProto.SpacerElement) elements_);
      }
      if (elementsCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (com.google.search.now.ui.piet.ElementsProto.GridRow) elements_);
      }
      if (elementsCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (com.google.search.now.ui.piet.ElementsProto.ElementList) elements_);
      }
      if (vedValueCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(9, getVed());
      }
      if (vedValueCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, (com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef) vedValue_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getAccessibility());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, gravityHorizontal_);
      }
      if (actionsDataCase_ == 14) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, (com.google.search.now.ui.piet.ActionsProto.Actions) actionsData_);
      }
      if (actionsDataCase_ == 15) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, (com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef) actionsData_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, horizontalOverflow_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getStyleReferences());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(18, gravityVertical_);
      }
      if (elementsCase_ == 21) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, (com.google.search.now.ui.piet.ElementsProto.ModuleElement) elements_);
      }
      for (int i = 0; i < overlays_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, overlays_.get(i));
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, getVisibilityState());
      }
      if (elementsCase_ == 24) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, (com.google.search.now.ui.piet.ElementsProto.ElementStack) elements_);
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.Element parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.Element parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.Element prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Element is the "superclass" of all container and content types, holding all
     * shared parameters (styles, actions, etc).
     * Element size expands to fill its container, unless the content is taller than
     * the container, and the container height is not specified explicitly. In that
     * case, the Element and the container both get the height of the content.
     * Next Id: 25
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.Element}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.Element, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.Element)
        com.google.search.now.ui.piet.ElementsProto.ElementOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.Element.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ElementsCase
          getElementsCase() {
        return instance.getElementsCase();
      }

      public Builder clearElements() {
        copyOnWrite();
        instance.clearElements();
        return this;
      }

      public ActionsDataCase
          getActionsDataCase() {
        return instance.getActionsDataCase();
      }

      public Builder clearActionsData() {
        copyOnWrite();
        instance.clearActionsData();
        return this;
      }

      public VedValueCase
          getVedValueCase() {
        return instance.getVedValueCase();
      }

      public Builder clearVedValue() {
        copyOnWrite();
        instance.clearVedValue();
        return this;
      }


      /**
       * <pre>
       * An image container
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
       */
      public boolean hasImageElement() {
        return instance.hasImageElement();
      }
      /**
       * <pre>
       * An image container
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.ImageElement getImageElement() {
        return instance.getImageElement();
      }
      /**
       * <pre>
       * An image container
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
       */
      public Builder setImageElement(com.google.search.now.ui.piet.ElementsProto.ImageElement value) {
        copyOnWrite();
        instance.setImageElement(value);
        return this;
      }
      /**
       * <pre>
       * An image container
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
       */
      public Builder setImageElement(
          com.google.search.now.ui.piet.ElementsProto.ImageElement.Builder builderForValue) {
        copyOnWrite();
        instance.setImageElement(builderForValue);
        return this;
      }
      /**
       * <pre>
       * An image container
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
       */
      public Builder mergeImageElement(com.google.search.now.ui.piet.ElementsProto.ImageElement value) {
        copyOnWrite();
        instance.mergeImageElement(value);
        return this;
      }
      /**
       * <pre>
       * An image container
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageElement image_element = 3;</code>
       */
      public Builder clearImageElement() {
        copyOnWrite();
        instance.clearImageElement();
        return this;
      }

      /**
       * <pre>
       * Add a spacer line which can be defined as a divider.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
       */
      public boolean hasSpacerElement() {
        return instance.hasSpacerElement();
      }
      /**
       * <pre>
       * Add a spacer line which can be defined as a divider.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.SpacerElement getSpacerElement() {
        return instance.getSpacerElement();
      }
      /**
       * <pre>
       * Add a spacer line which can be defined as a divider.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
       */
      public Builder setSpacerElement(com.google.search.now.ui.piet.ElementsProto.SpacerElement value) {
        copyOnWrite();
        instance.setSpacerElement(value);
        return this;
      }
      /**
       * <pre>
       * Add a spacer line which can be defined as a divider.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
       */
      public Builder setSpacerElement(
          com.google.search.now.ui.piet.ElementsProto.SpacerElement.Builder builderForValue) {
        copyOnWrite();
        instance.setSpacerElement(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Add a spacer line which can be defined as a divider.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
       */
      public Builder mergeSpacerElement(com.google.search.now.ui.piet.ElementsProto.SpacerElement value) {
        copyOnWrite();
        instance.mergeSpacerElement(value);
        return this;
      }
      /**
       * <pre>
       * Add a spacer line which can be defined as a divider.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.SpacerElement spacer_element = 4;</code>
       */
      public Builder clearSpacerElement() {
        copyOnWrite();
        instance.clearSpacerElement();
        return this;
      }

      /**
       * <pre>
       * A simple text line
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
       */
      public boolean hasTextElement() {
        return instance.hasTextElement();
      }
      /**
       * <pre>
       * A simple text line
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.TextElement getTextElement() {
        return instance.getTextElement();
      }
      /**
       * <pre>
       * A simple text line
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
       */
      public Builder setTextElement(com.google.search.now.ui.piet.ElementsProto.TextElement value) {
        copyOnWrite();
        instance.setTextElement(value);
        return this;
      }
      /**
       * <pre>
       * A simple text line
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
       */
      public Builder setTextElement(
          com.google.search.now.ui.piet.ElementsProto.TextElement.Builder builderForValue) {
        copyOnWrite();
        instance.setTextElement(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A simple text line
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
       */
      public Builder mergeTextElement(com.google.search.now.ui.piet.ElementsProto.TextElement value) {
        copyOnWrite();
        instance.mergeTextElement(value);
        return this;
      }
      /**
       * <pre>
       * A simple text line
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TextElement text_element = 2;</code>
       */
      public Builder clearTextElement() {
        copyOnWrite();
        instance.clearTextElement();
        return this;
      }

      /**
       * <pre>
       * A horizontal layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
       */
      public boolean hasGridRow() {
        return instance.hasGridRow();
      }
      /**
       * <pre>
       * A horizontal layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.GridRow getGridRow() {
        return instance.getGridRow();
      }
      /**
       * <pre>
       * A horizontal layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
       */
      public Builder setGridRow(com.google.search.now.ui.piet.ElementsProto.GridRow value) {
        copyOnWrite();
        instance.setGridRow(value);
        return this;
      }
      /**
       * <pre>
       * A horizontal layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
       */
      public Builder setGridRow(
          com.google.search.now.ui.piet.ElementsProto.GridRow.Builder builderForValue) {
        copyOnWrite();
        instance.setGridRow(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A horizontal layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
       */
      public Builder mergeGridRow(com.google.search.now.ui.piet.ElementsProto.GridRow value) {
        copyOnWrite();
        instance.mergeGridRow(value);
        return this;
      }
      /**
       * <pre>
       * A horizontal layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridRow grid_row = 5;</code>
       */
      public Builder clearGridRow() {
        copyOnWrite();
        instance.clearGridRow();
        return this;
      }

      /**
       * <pre>
       * A vertical layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
       */
      public boolean hasElementList() {
        return instance.hasElementList();
      }
      /**
       * <pre>
       * A vertical layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.ElementList getElementList() {
        return instance.getElementList();
      }
      /**
       * <pre>
       * A vertical layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
       */
      public Builder setElementList(com.google.search.now.ui.piet.ElementsProto.ElementList value) {
        copyOnWrite();
        instance.setElementList(value);
        return this;
      }
      /**
       * <pre>
       * A vertical layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
       */
      public Builder setElementList(
          com.google.search.now.ui.piet.ElementsProto.ElementList.Builder builderForValue) {
        copyOnWrite();
        instance.setElementList(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A vertical layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
       */
      public Builder mergeElementList(com.google.search.now.ui.piet.ElementsProto.ElementList value) {
        copyOnWrite();
        instance.mergeElementList(value);
        return this;
      }
      /**
       * <pre>
       * A vertical layout of multiple items.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementList element_list = 6;</code>
       */
      public Builder clearElementList() {
        copyOnWrite();
        instance.clearElementList();
        return this;
      }

      /**
       * <pre>
       * Multiple items stacked on top of each other (overlay).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
       */
      public boolean hasElementStack() {
        return instance.hasElementStack();
      }
      /**
       * <pre>
       * Multiple items stacked on top of each other (overlay).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.ElementStack getElementStack() {
        return instance.getElementStack();
      }
      /**
       * <pre>
       * Multiple items stacked on top of each other (overlay).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
       */
      public Builder setElementStack(com.google.search.now.ui.piet.ElementsProto.ElementStack value) {
        copyOnWrite();
        instance.setElementStack(value);
        return this;
      }
      /**
       * <pre>
       * Multiple items stacked on top of each other (overlay).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
       */
      public Builder setElementStack(
          com.google.search.now.ui.piet.ElementsProto.ElementStack.Builder builderForValue) {
        copyOnWrite();
        instance.setElementStack(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Multiple items stacked on top of each other (overlay).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
       */
      public Builder mergeElementStack(com.google.search.now.ui.piet.ElementsProto.ElementStack value) {
        copyOnWrite();
        instance.mergeElementStack(value);
        return this;
      }
      /**
       * <pre>
       * Multiple items stacked on top of each other (overlay).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElementStack element_stack = 24;</code>
       */
      public Builder clearElementStack() {
        copyOnWrite();
        instance.clearElementStack();
        return this;
      }

      /**
       * <pre>
       * A custom view that Piet knows nothing about. Servers can use this message
       * to populate a custom proto extension, which Piet passes along to the Host
       * for rendering. The Host is expected to be able to interpret and render
       * this view and return to Piet, which then simply places it within the
       * current view hierarchy at the proper position.
       * If a renderer cannot be found for a particular CustomElement in a client
       * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
       * the user at runtime. A black/grey box is displayed in place of the
       * CustomElement, but the rest of the Frame is still rendered. It is
       * possible for CustomElements to invoke Piet for rendering sub-views, but
       * only top-level Piet Frame protos can be embedded this way. (In other
       * words, do not try to embed Piet Elements directly inside a
       * CustomElement).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
       */
      public boolean hasCustomElement() {
        return instance.hasCustomElement();
      }
      /**
       * <pre>
       * A custom view that Piet knows nothing about. Servers can use this message
       * to populate a custom proto extension, which Piet passes along to the Host
       * for rendering. The Host is expected to be able to interpret and render
       * this view and return to Piet, which then simply places it within the
       * current view hierarchy at the proper position.
       * If a renderer cannot be found for a particular CustomElement in a client
       * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
       * the user at runtime. A black/grey box is displayed in place of the
       * CustomElement, but the rest of the Frame is still rendered. It is
       * possible for CustomElements to invoke Piet for rendering sub-views, but
       * only top-level Piet Frame protos can be embedded this way. (In other
       * words, do not try to embed Piet Elements directly inside a
       * CustomElement).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.CustomElement getCustomElement() {
        return instance.getCustomElement();
      }
      /**
       * <pre>
       * A custom view that Piet knows nothing about. Servers can use this message
       * to populate a custom proto extension, which Piet passes along to the Host
       * for rendering. The Host is expected to be able to interpret and render
       * this view and return to Piet, which then simply places it within the
       * current view hierarchy at the proper position.
       * If a renderer cannot be found for a particular CustomElement in a client
       * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
       * the user at runtime. A black/grey box is displayed in place of the
       * CustomElement, but the rest of the Frame is still rendered. It is
       * possible for CustomElements to invoke Piet for rendering sub-views, but
       * only top-level Piet Frame protos can be embedded this way. (In other
       * words, do not try to embed Piet Elements directly inside a
       * CustomElement).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
       */
      public Builder setCustomElement(com.google.search.now.ui.piet.ElementsProto.CustomElement value) {
        copyOnWrite();
        instance.setCustomElement(value);
        return this;
      }
      /**
       * <pre>
       * A custom view that Piet knows nothing about. Servers can use this message
       * to populate a custom proto extension, which Piet passes along to the Host
       * for rendering. The Host is expected to be able to interpret and render
       * this view and return to Piet, which then simply places it within the
       * current view hierarchy at the proper position.
       * If a renderer cannot be found for a particular CustomElement in a client
       * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
       * the user at runtime. A black/grey box is displayed in place of the
       * CustomElement, but the rest of the Frame is still rendered. It is
       * possible for CustomElements to invoke Piet for rendering sub-views, but
       * only top-level Piet Frame protos can be embedded this way. (In other
       * words, do not try to embed Piet Elements directly inside a
       * CustomElement).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
       */
      public Builder setCustomElement(
          com.google.search.now.ui.piet.ElementsProto.CustomElement.Builder builderForValue) {
        copyOnWrite();
        instance.setCustomElement(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A custom view that Piet knows nothing about. Servers can use this message
       * to populate a custom proto extension, which Piet passes along to the Host
       * for rendering. The Host is expected to be able to interpret and render
       * this view and return to Piet, which then simply places it within the
       * current view hierarchy at the proper position.
       * If a renderer cannot be found for a particular CustomElement in a client
       * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
       * the user at runtime. A black/grey box is displayed in place of the
       * CustomElement, but the rest of the Frame is still rendered. It is
       * possible for CustomElements to invoke Piet for rendering sub-views, but
       * only top-level Piet Frame protos can be embedded this way. (In other
       * words, do not try to embed Piet Elements directly inside a
       * CustomElement).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
       */
      public Builder mergeCustomElement(com.google.search.now.ui.piet.ElementsProto.CustomElement value) {
        copyOnWrite();
        instance.mergeCustomElement(value);
        return this;
      }
      /**
       * <pre>
       * A custom view that Piet knows nothing about. Servers can use this message
       * to populate a custom proto extension, which Piet passes along to the Host
       * for rendering. The Host is expected to be able to interpret and render
       * this view and return to Piet, which then simply places it within the
       * current view hierarchy at the proper position.
       * If a renderer cannot be found for a particular CustomElement in a client
       * implementation, Piet raises a ERR_CUSTOM_ELEMENT_RENDERER_MISSING &amp; warns
       * the user at runtime. A black/grey box is displayed in place of the
       * CustomElement, but the rest of the Frame is still rendered. It is
       * possible for CustomElements to invoke Piet for rendering sub-views, but
       * only top-level Piet Frame protos can be embedded this way. (In other
       * words, do not try to embed Piet Elements directly inside a
       * CustomElement).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElement custom_element = 1;</code>
       */
      public Builder clearCustomElement() {
        copyOnWrite();
        instance.clearCustomElement();
        return this;
      }

      /**
       * <pre>
       * A view that is implemented by a secondary (non-Core) Piet Module. Not all
       * Piet Elements are useful to all clients/servers, so only the basic ones
       * are included in Piet Core. Common shareable elements can be implemented
       * in secondary Piet Modules, which are optional modules that can be
       * included in or excluded from Piet-based apps on an as-needed basis.
       * ModuleElements work similar to CustomElements, with the only difference
       * being that CustomElements are rendered by non-Piet code, while
       * ModuleElements are rendered by secondary Piet Modules.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
       */
      public boolean hasModuleElement() {
        return instance.hasModuleElement();
      }
      /**
       * <pre>
       * A view that is implemented by a secondary (non-Core) Piet Module. Not all
       * Piet Elements are useful to all clients/servers, so only the basic ones
       * are included in Piet Core. Common shareable elements can be implemented
       * in secondary Piet Modules, which are optional modules that can be
       * included in or excluded from Piet-based apps on an as-needed basis.
       * ModuleElements work similar to CustomElements, with the only difference
       * being that CustomElements are rendered by non-Piet code, while
       * ModuleElements are rendered by secondary Piet Modules.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.ModuleElement getModuleElement() {
        return instance.getModuleElement();
      }
      /**
       * <pre>
       * A view that is implemented by a secondary (non-Core) Piet Module. Not all
       * Piet Elements are useful to all clients/servers, so only the basic ones
       * are included in Piet Core. Common shareable elements can be implemented
       * in secondary Piet Modules, which are optional modules that can be
       * included in or excluded from Piet-based apps on an as-needed basis.
       * ModuleElements work similar to CustomElements, with the only difference
       * being that CustomElements are rendered by non-Piet code, while
       * ModuleElements are rendered by secondary Piet Modules.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
       */
      public Builder setModuleElement(com.google.search.now.ui.piet.ElementsProto.ModuleElement value) {
        copyOnWrite();
        instance.setModuleElement(value);
        return this;
      }
      /**
       * <pre>
       * A view that is implemented by a secondary (non-Core) Piet Module. Not all
       * Piet Elements are useful to all clients/servers, so only the basic ones
       * are included in Piet Core. Common shareable elements can be implemented
       * in secondary Piet Modules, which are optional modules that can be
       * included in or excluded from Piet-based apps on an as-needed basis.
       * ModuleElements work similar to CustomElements, with the only difference
       * being that CustomElements are rendered by non-Piet code, while
       * ModuleElements are rendered by secondary Piet Modules.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
       */
      public Builder setModuleElement(
          com.google.search.now.ui.piet.ElementsProto.ModuleElement.Builder builderForValue) {
        copyOnWrite();
        instance.setModuleElement(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A view that is implemented by a secondary (non-Core) Piet Module. Not all
       * Piet Elements are useful to all clients/servers, so only the basic ones
       * are included in Piet Core. Common shareable elements can be implemented
       * in secondary Piet Modules, which are optional modules that can be
       * included in or excluded from Piet-based apps on an as-needed basis.
       * ModuleElements work similar to CustomElements, with the only difference
       * being that CustomElements are rendered by non-Piet code, while
       * ModuleElements are rendered by secondary Piet Modules.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
       */
      public Builder mergeModuleElement(com.google.search.now.ui.piet.ElementsProto.ModuleElement value) {
        copyOnWrite();
        instance.mergeModuleElement(value);
        return this;
      }
      /**
       * <pre>
       * A view that is implemented by a secondary (non-Core) Piet Module. Not all
       * Piet Elements are useful to all clients/servers, so only the basic ones
       * are included in Piet Core. Common shareable elements can be implemented
       * in secondary Piet Modules, which are optional modules that can be
       * included in or excluded from Piet-based apps on an as-needed basis.
       * ModuleElements work similar to CustomElements, with the only difference
       * being that CustomElements are rendered by non-Piet code, while
       * ModuleElements are rendered by secondary Piet Modules.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElement module_element = 21;</code>
       */
      public Builder clearModuleElement() {
        copyOnWrite();
        instance.clearModuleElement();
        return this;
      }

      /**
       * <pre>
       * Every UI element can have accessibility-related fields.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
       */
      public boolean hasAccessibility() {
        return instance.hasAccessibility();
      }
      /**
       * <pre>
       * Every UI element can have accessibility-related fields.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
       */
      public com.google.search.now.ui.piet.AccessibilityProto.Accessibility getAccessibility() {
        return instance.getAccessibility();
      }
      /**
       * <pre>
       * Every UI element can have accessibility-related fields.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
       */
      public Builder setAccessibility(com.google.search.now.ui.piet.AccessibilityProto.Accessibility value) {
        copyOnWrite();
        instance.setAccessibility(value);
        return this;
        }
      /**
       * <pre>
       * Every UI element can have accessibility-related fields.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
       */
      public Builder setAccessibility(
          com.google.search.now.ui.piet.AccessibilityProto.Accessibility.Builder builderForValue) {
        copyOnWrite();
        instance.setAccessibility(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Every UI element can have accessibility-related fields.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
       */
      public Builder mergeAccessibility(com.google.search.now.ui.piet.AccessibilityProto.Accessibility value) {
        copyOnWrite();
        instance.mergeAccessibility(value);
        return this;
      }
      /**
       * <pre>
       * Every UI element can have accessibility-related fields.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Accessibility accessibility = 11;</code>
       */
      public Builder clearAccessibility() {  copyOnWrite();
        instance.clearAccessibility();
        return this;
      }

      /**
       * <pre>
       * Inlined actions.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
       */
      public boolean hasActions() {
        return instance.hasActions();
      }
      /**
       * <pre>
       * Inlined actions.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
       */
      public com.google.search.now.ui.piet.ActionsProto.Actions getActions() {
        return instance.getActions();
      }
      /**
       * <pre>
       * Inlined actions.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
       */
      public Builder setActions(com.google.search.now.ui.piet.ActionsProto.Actions value) {
        copyOnWrite();
        instance.setActions(value);
        return this;
      }
      /**
       * <pre>
       * Inlined actions.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
       */
      public Builder setActions(
          com.google.search.now.ui.piet.ActionsProto.Actions.Builder builderForValue) {
        copyOnWrite();
        instance.setActions(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Inlined actions.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
       */
      public Builder mergeActions(com.google.search.now.ui.piet.ActionsProto.Actions value) {
        copyOnWrite();
        instance.mergeActions(value);
        return this;
      }
      /**
       * <pre>
       * Inlined actions.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 14;</code>
       */
      public Builder clearActions() {
        copyOnWrite();
        instance.clearActions();
        return this;
      }

      /**
       * <pre>
       * Actions coming from a template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
       */
      public boolean hasActionsBinding() {
        return instance.hasActionsBinding();
      }
      /**
       * <pre>
       * Actions coming from a template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef getActionsBinding() {
        return instance.getActionsBinding();
      }
      /**
       * <pre>
       * Actions coming from a template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
       */
      public Builder setActionsBinding(com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef value) {
        copyOnWrite();
        instance.setActionsBinding(value);
        return this;
      }
      /**
       * <pre>
       * Actions coming from a template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
       */
      public Builder setActionsBinding(
          com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setActionsBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Actions coming from a template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
       */
      public Builder mergeActionsBinding(com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef value) {
        copyOnWrite();
        instance.mergeActionsBinding(value);
        return this;
      }
      /**
       * <pre>
       * Actions coming from a template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ActionsBindingRef actions_binding = 15;</code>
       */
      public Builder clearActionsBinding() {
        copyOnWrite();
        instance.clearActionsBinding();
        return this;
      }

      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> getOverlaysList() {
        return java.util.Collections.unmodifiableList(
            instance.getOverlaysList());
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public int getOverlaysCount() {
        return instance.getOverlaysCount();
      }/**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.ElementsProto.Content getOverlays(int index) {
        return instance.getOverlays(index);
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setOverlays(
          int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.setOverlays(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setOverlays(
          int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.setOverlays(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addOverlays(com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.addOverlays(value);
        return this;
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addOverlays(
          int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.addOverlays(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addOverlays(
          com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.addOverlays(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addOverlays(
          int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.addOverlays(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addAllOverlays(
          java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.Content> values) {
        copyOnWrite();
        instance.addAllOverlays(values);
        return this;
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearOverlays() {
        copyOnWrite();
        instance.clearOverlays();
        return this;
      }
      /**
       * <pre>
       * A list of Contents to be overlaid on top of this Element.
       * This field is repeated to allow multiple overlay layers with different
       * gravity settings. The index of the item inside the repeated field
       * determines the order in which views will be laid out. Later items will
       * appear above the earlier ones.
       * Deprecated: To make an overlay on an Element, wrap the Element in an
       * ElementStack.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content overlays = 22 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder removeOverlays(int index) {
        copyOnWrite();
        instance.removeOverlays(index);
        return this;
      }

      /**
       * <pre>
       * Horizontal gravity of this element's content within the parent container
       * Deprecated: use gravity_horizontal on Style instead
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasGravityHorizontal() {
        return instance.hasGravityHorizontal();
      }
      /**
       * <pre>
       * Horizontal gravity of this element's content within the parent container
       * Deprecated: use gravity_horizontal on Style instead
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.GravityHorizontal getGravityHorizontal() {
        return instance.getGravityHorizontal();
      }
      /**
       * <pre>
       * Horizontal gravity of this element's content within the parent container
       * Deprecated: use gravity_horizontal on Style instead
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setGravityHorizontal(com.google.search.now.ui.piet.StylesProto.GravityHorizontal value) {
        copyOnWrite();
        instance.setGravityHorizontal(value);
        return this;
      }
      /**
       * <pre>
       * Horizontal gravity of this element's content within the parent container
       * Deprecated: use gravity_horizontal on Style instead
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GravityHorizontal gravity_horizontal = 12 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearGravityHorizontal() {
        copyOnWrite();
        instance.clearGravityHorizontal();
        return this;
      }

      /**
       * <pre>
       * Vertical gravity of this element's content within the parent container
       * Deprecated: use gravity_vertical on Style instead
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasGravityVertical() {
        return instance.hasGravityVertical();
      }
      /**
       * <pre>
       * Vertical gravity of this element's content within the parent container
       * Deprecated: use gravity_vertical on Style instead
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.GravityVertical getGravityVertical() {
        return instance.getGravityVertical();
      }
      /**
       * <pre>
       * Vertical gravity of this element's content within the parent container
       * Deprecated: use gravity_vertical on Style instead
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setGravityVertical(com.google.search.now.ui.piet.StylesProto.GravityVertical value) {
        copyOnWrite();
        instance.setGravityVertical(value);
        return this;
      }
      /**
       * <pre>
       * Vertical gravity of this element's content within the parent container
       * Deprecated: use gravity_vertical on Style instead
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GravityVertical gravity_vertical = 18 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearGravityVertical() {
        copyOnWrite();
        instance.clearGravityVertical();
        return this;
      }

      /**
       * <pre>
       * Defines the overflow behavior for contents that are wider than this
       * Element.
       * Contents can be wider than the container Element in two scenarios:
       *  1. An element has defined width in its style, and the width is larger
       *     than the size of the Element.
       *  2. The element is a GridRow, where the width sum of cells with defined dp
       *     width is larger than the containing Element.
       * In all other cases, contents cannot be wider than the container
       * Element.
       * IMPORTANT: This might not be supported in all implementations of Piet, due
       *   to implementation/product decisions (for example, horizontal scrolling in
       *   a swipable card might be disabled).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
       */
      public boolean hasHorizontalOverflow() {
        return instance.hasHorizontalOverflow();
      }
      /**
       * <pre>
       * Defines the overflow behavior for contents that are wider than this
       * Element.
       * Contents can be wider than the container Element in two scenarios:
       *  1. An element has defined width in its style, and the width is larger
       *     than the size of the Element.
       *  2. The element is a GridRow, where the width sum of cells with defined dp
       *     width is larger than the containing Element.
       * In all other cases, contents cannot be wider than the container
       * Element.
       * IMPORTANT: This might not be supported in all implementations of Piet, due
       *   to implementation/product decisions (for example, horizontal scrolling in
       *   a swipable card might be disabled).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.OverflowBehavior getHorizontalOverflow() {
        return instance.getHorizontalOverflow();
      }
      /**
       * <pre>
       * Defines the overflow behavior for contents that are wider than this
       * Element.
       * Contents can be wider than the container Element in two scenarios:
       *  1. An element has defined width in its style, and the width is larger
       *     than the size of the Element.
       *  2. The element is a GridRow, where the width sum of cells with defined dp
       *     width is larger than the containing Element.
       * In all other cases, contents cannot be wider than the container
       * Element.
       * IMPORTANT: This might not be supported in all implementations of Piet, due
       *   to implementation/product decisions (for example, horizontal scrolling in
       *   a swipable card might be disabled).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
       */
      public Builder setHorizontalOverflow(com.google.search.now.ui.piet.ElementsProto.OverflowBehavior value) {
        copyOnWrite();
        instance.setHorizontalOverflow(value);
        return this;
      }
      /**
       * <pre>
       * Defines the overflow behavior for contents that are wider than this
       * Element.
       * Contents can be wider than the container Element in two scenarios:
       *  1. An element has defined width in its style, and the width is larger
       *     than the size of the Element.
       *  2. The element is a GridRow, where the width sum of cells with defined dp
       *     width is larger than the containing Element.
       * In all other cases, contents cannot be wider than the container
       * Element.
       * IMPORTANT: This might not be supported in all implementations of Piet, due
       *   to implementation/product decisions (for example, horizontal scrolling in
       *   a swipable card might be disabled).
       * </pre>
       *
       * <code>optional .search.now.ui.piet.OverflowBehavior horizontal_overflow = 16 [default = OVERFLOW_HIDDEN];</code>
       */
      public Builder clearHorizontalOverflow() {
        copyOnWrite();
        instance.clearHorizontalOverflow();
        return this;
      }

      /**
       * <pre>
       * A base64 encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to this piet Element.
       * </pre>
       *
       * <code>optional string ved = 9;</code>
       */
      public boolean hasVed() {
        return instance.hasVed();
      }
      /**
       * <pre>
       * A base64 encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to this piet Element.
       * </pre>
       *
       * <code>optional string ved = 9;</code>
       */
      public java.lang.String getVed() {
        return instance.getVed();
      }
      /**
       * <pre>
       * A base64 encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to this piet Element.
       * </pre>
       *
       * <code>optional string ved = 9;</code>
       */
      public com.google.protobuf.ByteString
          getVedBytes() {
        return instance.getVedBytes();
      }
      /**
       * <pre>
       * A base64 encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to this piet Element.
       * </pre>
       *
       * <code>optional string ved = 9;</code>
       */
      public Builder setVed(
          java.lang.String value) {
        copyOnWrite();
        instance.setVed(value);
        return this;
      }
      /**
       * <pre>
       * A base64 encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to this piet Element.
       * </pre>
       *
       * <code>optional string ved = 9;</code>
       */
      public Builder clearVed() {
        copyOnWrite();
        instance.clearVed();
        return this;
      }
      /**
       * <pre>
       * A base64 encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to this piet Element.
       * </pre>
       *
       * <code>optional string ved = 9;</code>
       */
      public Builder setVedBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setVedBytes(value);
        return this;
      }

      /**
       * <pre>
       * A VedBindingRef to the VED that this Element will be bound to.
       * This is only meant to be used for Elements defined by a Template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
       */
      public boolean hasVedBinding() {
        return instance.hasVedBinding();
      }
      /**
       * <pre>
       * A VedBindingRef to the VED that this Element will be bound to.
       * This is only meant to be used for Elements defined by a Template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef getVedBinding() {
        return instance.getVedBinding();
      }
      /**
       * <pre>
       * A VedBindingRef to the VED that this Element will be bound to.
       * This is only meant to be used for Elements defined by a Template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
       */
      public Builder setVedBinding(com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef value) {
        copyOnWrite();
        instance.setVedBinding(value);
        return this;
      }
      /**
       * <pre>
       * A VedBindingRef to the VED that this Element will be bound to.
       * This is only meant to be used for Elements defined by a Template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
       */
      public Builder setVedBinding(
          com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setVedBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A VedBindingRef to the VED that this Element will be bound to.
       * This is only meant to be used for Elements defined by a Template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
       */
      public Builder mergeVedBinding(com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef value) {
        copyOnWrite();
        instance.mergeVedBinding(value);
        return this;
      }
      /**
       * <pre>
       * A VedBindingRef to the VED that this Element will be bound to.
       * This is only meant to be used for Elements defined by a Template.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VedBindingRef ved_binding = 10;</code>
       */
      public Builder clearVedBinding() {
        copyOnWrite();
        instance.clearVedBinding();
        return this;
      }

      /**
       * <pre>
       * Styles to apply to this Element. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
       */
      public boolean hasStyleReferences() {
        return instance.hasStyleReferences();
      }
      /**
       * <pre>
       * Styles to apply to this Element. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
       */
      public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
        return instance.getStyleReferences();
      }
      /**
       * <pre>
       * Styles to apply to this Element. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
       */
      public Builder setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.setStyleReferences(value);
        return this;
        }
      /**
       * <pre>
       * Styles to apply to this Element. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
       */
      public Builder setStyleReferences(
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
        copyOnWrite();
        instance.setStyleReferences(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Styles to apply to this Element. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
       */
      public Builder mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.mergeStyleReferences(value);
        return this;
      }
      /**
       * <pre>
       * Styles to apply to this Element. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 17;</code>
       */
      public Builder clearStyleReferences() {  copyOnWrite();
        instance.clearStyleReferences();
        return this;
      }

      /**
       * <pre>
       * Visibility state that can be controlled with binding.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
       */
      public boolean hasVisibilityState() {
        return instance.hasVisibilityState();
      }
      /**
       * <pre>
       * Visibility state that can be controlled with binding.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.VisibilityState getVisibilityState() {
        return instance.getVisibilityState();
      }
      /**
       * <pre>
       * Visibility state that can be controlled with binding.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
       */
      public Builder setVisibilityState(com.google.search.now.ui.piet.ElementsProto.VisibilityState value) {
        copyOnWrite();
        instance.setVisibilityState(value);
        return this;
        }
      /**
       * <pre>
       * Visibility state that can be controlled with binding.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
       */
      public Builder setVisibilityState(
          com.google.search.now.ui.piet.ElementsProto.VisibilityState.Builder builderForValue) {
        copyOnWrite();
        instance.setVisibilityState(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Visibility state that can be controlled with binding.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
       */
      public Builder mergeVisibilityState(com.google.search.now.ui.piet.ElementsProto.VisibilityState value) {
        copyOnWrite();
        instance.mergeVisibilityState(value);
        return this;
      }
      /**
       * <pre>
       * Visibility state that can be controlled with binding.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.VisibilityState visibility_state = 23;</code>
       */
      public Builder clearVisibilityState() {  copyOnWrite();
        instance.clearVisibilityState();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.Element)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.Element();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasImageElement()) {
            if (!getImageElement().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasSpacerElement()) {
            if (!getSpacerElement().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasTextElement()) {
            if (!getTextElement().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasGridRow()) {
            if (!getGridRow().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasElementList()) {
            if (!getElementList().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasElementStack()) {
            if (!getElementStack().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasCustomElement()) {
            if (!getCustomElement().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasModuleElement()) {
            if (!getModuleElement().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasActions()) {
            if (!getActions().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          for (int i = 0; i < getOverlaysCount(); i++) {
            if (!getOverlays(i).isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasStyleReferences()) {
            if (!getStyleReferences().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          overlays_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.Element other = (com.google.search.now.ui.piet.ElementsProto.Element) arg1;
          accessibility_ = visitor.visitMessage(accessibility_, other.accessibility_);
          overlays_= visitor.visitList(overlays_, other.overlays_);
          gravityHorizontal_ = visitor.visitInt(hasGravityHorizontal(), gravityHorizontal_,
              other.hasGravityHorizontal(), other.gravityHorizontal_);
          gravityVertical_ = visitor.visitInt(hasGravityVertical(), gravityVertical_,
              other.hasGravityVertical(), other.gravityVertical_);
          horizontalOverflow_ = visitor.visitInt(hasHorizontalOverflow(), horizontalOverflow_,
              other.hasHorizontalOverflow(), other.horizontalOverflow_);
          styleReferences_ = visitor.visitMessage(styleReferences_, other.styleReferences_);
          visibilityState_ = visitor.visitMessage(visibilityState_, other.visibilityState_);
          switch (other.getElementsCase()) {
            case IMAGE_ELEMENT: {
              elements_ = visitor.visitOneofMessage(
                  elementsCase_ == 3,
                  elements_,
                  other.elements_);
              break;
            }
            case SPACER_ELEMENT: {
              elements_ = visitor.visitOneofMessage(
                  elementsCase_ == 4,
                  elements_,
                  other.elements_);
              break;
            }
            case TEXT_ELEMENT: {
              elements_ = visitor.visitOneofMessage(
                  elementsCase_ == 2,
                  elements_,
                  other.elements_);
              break;
            }
            case GRID_ROW: {
              elements_ = visitor.visitOneofMessage(
                  elementsCase_ == 5,
                  elements_,
                  other.elements_);
              break;
            }
            case ELEMENT_LIST: {
              elements_ = visitor.visitOneofMessage(
                  elementsCase_ == 6,
                  elements_,
                  other.elements_);
              break;
            }
            case ELEMENT_STACK: {
              elements_ = visitor.visitOneofMessage(
                  elementsCase_ == 24,
                  elements_,
                  other.elements_);
              break;
            }
            case CUSTOM_ELEMENT: {
              elements_ = visitor.visitOneofMessage(
                  elementsCase_ == 1,
                  elements_,
                  other.elements_);
              break;
            }
            case MODULE_ELEMENT: {
              elements_ = visitor.visitOneofMessage(
                  elementsCase_ == 21,
                  elements_,
                  other.elements_);
              break;
            }
            case ELEMENTS_NOT_SET: {
              visitor.visitOneofNotSet(elementsCase_ != 0);
              break;
            }
          }
          switch (other.getActionsDataCase()) {
            case ACTIONS: {
              actionsData_ = visitor.visitOneofMessage(
                  actionsDataCase_ == 14,
                  actionsData_,
                  other.actionsData_);
              break;
            }
            case ACTIONS_BINDING: {
              actionsData_ = visitor.visitOneofMessage(
                  actionsDataCase_ == 15,
                  actionsData_,
                  other.actionsData_);
              break;
            }
            case ACTIONSDATA_NOT_SET: {
              visitor.visitOneofNotSet(actionsDataCase_ != 0);
              break;
            }
          }
          switch (other.getVedValueCase()) {
            case VED: {
              vedValue_ = visitor.visitOneofString(
                 vedValueCase_ == 9, vedValue_, other.vedValue_);
              break;
            }
            case VED_BINDING: {
              vedValue_ = visitor.visitOneofMessage(
                  vedValueCase_ == 10,
                  vedValue_,
                  other.vedValue_);
              break;
            }
            case VEDVALUE_NOT_SET: {
              visitor.visitOneofNotSet(vedValueCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.elementsCase_ != 0) {
              elementsCase_ = other.elementsCase_;
            }
            if (other.actionsDataCase_ != 0) {
              actionsDataCase_ = other.actionsDataCase_;
            }
            if (other.vedValueCase_ != 0) {
              vedValueCase_ = other.vedValueCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.ElementsProto.CustomElement.Builder subBuilder = null;
                  if (elementsCase_ == 1) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.CustomElement) elements_).toBuilder();
                  }
                  elements_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.CustomElement.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.CustomElement) elements_);
                    elements_ = subBuilder.buildPartial();
                  }
                  elementsCase_ = 1;
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.ElementsProto.TextElement.Builder subBuilder = null;
                  if (elementsCase_ == 2) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.TextElement) elements_).toBuilder();
                  }
                  elements_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.TextElement.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.TextElement) elements_);
                    elements_ = subBuilder.buildPartial();
                  }
                  elementsCase_ = 2;
                  break;
                }
                case 26: {
                  com.google.search.now.ui.piet.ElementsProto.ImageElement.Builder subBuilder = null;
                  if (elementsCase_ == 3) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.ImageElement) elements_).toBuilder();
                  }
                  elements_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.ImageElement.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.ImageElement) elements_);
                    elements_ = subBuilder.buildPartial();
                  }
                  elementsCase_ = 3;
                  break;
                }
                case 34: {
                  com.google.search.now.ui.piet.ElementsProto.SpacerElement.Builder subBuilder = null;
                  if (elementsCase_ == 4) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.SpacerElement) elements_).toBuilder();
                  }
                  elements_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.SpacerElement.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.SpacerElement) elements_);
                    elements_ = subBuilder.buildPartial();
                  }
                  elementsCase_ = 4;
                  break;
                }
                case 42: {
                  com.google.search.now.ui.piet.ElementsProto.GridRow.Builder subBuilder = null;
                  if (elementsCase_ == 5) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.GridRow) elements_).toBuilder();
                  }
                  elements_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.GridRow.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.GridRow) elements_);
                    elements_ = subBuilder.buildPartial();
                  }
                  elementsCase_ = 5;
                  break;
                }
                case 50: {
                  com.google.search.now.ui.piet.ElementsProto.ElementList.Builder subBuilder = null;
                  if (elementsCase_ == 6) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.ElementList) elements_).toBuilder();
                  }
                  elements_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.ElementList.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.ElementList) elements_);
                    elements_ = subBuilder.buildPartial();
                  }
                  elementsCase_ = 6;
                  break;
                }
                case 74: {
                  String s = input.readString();
                  vedValueCase_ = 9;
                  vedValue_ = s;
                  break;
                }
                case 82: {
                  com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef.Builder subBuilder = null;
                  if (vedValueCase_ == 10) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef) vedValue_).toBuilder();
                  }
                  vedValue_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.VedBindingRef) vedValue_);
                    vedValue_ = subBuilder.buildPartial();
                  }
                  vedValueCase_ = 10;
                  break;
                }
                case 90: {
                  com.google.search.now.ui.piet.AccessibilityProto.Accessibility.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000100) == 0x00000100)) {
                    subBuilder = accessibility_.toBuilder();
                  }
                  accessibility_ = input.readMessage(com.google.search.now.ui.piet.AccessibilityProto.Accessibility.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(accessibility_);
                    accessibility_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000100;
                  break;
                }
                case 96: {
                  int rawValue = input.readEnum();
                  com.google.search.now.ui.piet.StylesProto.GravityHorizontal value = com.google.search.now.ui.piet.StylesProto.GravityHorizontal.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(12, rawValue);
                  } else {
                    bitField0_ |= 0x00000800;
                    gravityHorizontal_ = rawValue;
                  }
                  break;
                }
                case 114: {
                  com.google.search.now.ui.piet.ActionsProto.Actions.Builder subBuilder = null;
                  if (actionsDataCase_ == 14) {
                    subBuilder = ((com.google.search.now.ui.piet.ActionsProto.Actions) actionsData_).toBuilder();
                  }
                  actionsData_ =
                       input.readMessage(com.google.search.now.ui.piet.ActionsProto.Actions.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ActionsProto.Actions) actionsData_);
                    actionsData_ = subBuilder.buildPartial();
                  }
                  actionsDataCase_ = 14;
                  break;
                }
                case 122: {
                  com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef.Builder subBuilder = null;
                  if (actionsDataCase_ == 15) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef) actionsData_).toBuilder();
                  }
                  actionsData_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.ActionsBindingRef) actionsData_);
                    actionsData_ = subBuilder.buildPartial();
                  }
                  actionsDataCase_ = 15;
                  break;
                }
                case 128: {
                  int rawValue = input.readEnum();
                  com.google.search.now.ui.piet.ElementsProto.OverflowBehavior value = com.google.search.now.ui.piet.ElementsProto.OverflowBehavior.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(16, rawValue);
                  } else {
                    bitField0_ |= 0x00002000;
                    horizontalOverflow_ = rawValue;
                  }
                  break;
                }
                case 138: {
                  com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder subBuilder = null;
                  if (((bitField0_ & 0x00010000) == 0x00010000)) {
                    subBuilder = styleReferences_.toBuilder();
                  }
                  styleReferences_ = input.readMessage(com.google.search.now.ui.piet.StylesProto.StyleIdsStack.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(styleReferences_);
                    styleReferences_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00010000;
                  break;
                }
                case 144: {
                  int rawValue = input.readEnum();
                  com.google.search.now.ui.piet.StylesProto.GravityVertical value = com.google.search.now.ui.piet.StylesProto.GravityVertical.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(18, rawValue);
                  } else {
                    bitField0_ |= 0x00001000;
                    gravityVertical_ = rawValue;
                  }
                  break;
                }
                case 170: {
                  com.google.search.now.ui.piet.ElementsProto.ModuleElement.Builder subBuilder = null;
                  if (elementsCase_ == 21) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.ModuleElement) elements_).toBuilder();
                  }
                  elements_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.ModuleElement.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.ModuleElement) elements_);
                    elements_ = subBuilder.buildPartial();
                  }
                  elementsCase_ = 21;
                  break;
                }
                case 178: {
                  if (!overlays_.isModifiable()) {
                    overlays_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(overlays_);
                  }
                  overlays_.add(
                      input.readMessage(com.google.search.now.ui.piet.ElementsProto.Content.parser(), extensionRegistry));
                  break;
                }
                case 186: {
                  com.google.search.now.ui.piet.ElementsProto.VisibilityState.Builder subBuilder = null;
                  if (((bitField0_ & 0x00020000) == 0x00020000)) {
                    subBuilder = visibilityState_.toBuilder();
                  }
                  visibilityState_ = input.readMessage(com.google.search.now.ui.piet.ElementsProto.VisibilityState.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(visibilityState_);
                    visibilityState_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00020000;
                  break;
                }
                case 194: {
                  com.google.search.now.ui.piet.ElementsProto.ElementStack.Builder subBuilder = null;
                  if (elementsCase_ == 24) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.ElementStack) elements_).toBuilder();
                  }
                  elements_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.ElementStack.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.ElementStack) elements_);
                    elements_ = subBuilder.buildPartial();
                  }
                  elementsCase_ = 24;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.Element.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.Element)
    private static final com.google.search.now.ui.piet.ElementsProto.Element DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Element();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.Element getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Element> PARSER;

    public static com.google.protobuf.Parser<Element> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ImageElementOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.ImageElement)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                ImageElement, ImageElement.Builder> {

    /**
     * <pre>
     * The image to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 3;</code>
     */
    boolean hasImage();
    /**
     * <pre>
     * The image to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 3;</code>
     */
    com.google.search.now.ui.piet.ImagesProto.Image getImage();

    /**
     * <pre>
     * The binding to the BindingValue for an Image. It is an error if the
     * BindingValue doesn't define an Image.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
     */
    boolean hasImageBinding();
    /**
     * <pre>
     * The binding to the BindingValue for an Image. It is an error if the
     * BindingValue doesn't define an Image.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef getImageBinding();

    /**
     * <pre>
     * Styles applied to this ImageElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasStyleReferences();
    /**
     * <pre>
     * Styles applied to this ImageElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences();

    public com.google.search.now.ui.piet.ElementsProto.ImageElement.ContentCase getContentCase();
  }
  /**
   * <pre>
   * An Image which is displayed as a horizontal slice within a parent container.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.ImageElement}
   */
  public  static final class ImageElement extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        ImageElement, ImageElement.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.ImageElement)
      ImageElementOrBuilder {
    private ImageElement() {
    }
    private int bitField0_;
    private int contentCase_ = 0;
    private java.lang.Object content_;
    public enum ContentCase
        implements com.google.protobuf.Internal.EnumLite {
      IMAGE(3),
      IMAGE_BINDING(2),
      CONTENT_NOT_SET(0);
      private final int value;
      private ContentCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ContentCase valueOf(int value) {
        return forNumber(value);
      }

      public static ContentCase forNumber(int value) {
        switch (value) {
          case 3: return IMAGE;
          case 2: return IMAGE_BINDING;
          case 0: return CONTENT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ContentCase
    getContentCase() {
      return ContentCase.forNumber(
          contentCase_);
    }

    private void clearContent() {
      contentCase_ = 0;
      content_ = null;
    }

    public static final int IMAGE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * The image to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 3;</code>
     */
    public boolean hasImage() {
      return contentCase_ == 3;
    }
    /**
     * <pre>
     * The image to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 3;</code>
     */
    public com.google.search.now.ui.piet.ImagesProto.Image getImage() {
      if (contentCase_ == 3) {
         return (com.google.search.now.ui.piet.ImagesProto.Image) content_;
      }
      return com.google.search.now.ui.piet.ImagesProto.Image.getDefaultInstance();
    }
    /**
     * <pre>
     * The image to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 3;</code>
     */
    private void setImage(com.google.search.now.ui.piet.ImagesProto.Image value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The image to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 3;</code>
     */
    private void setImage(
        com.google.search.now.ui.piet.ImagesProto.Image.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The image to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 3;</code>
     */
    private void mergeImage(com.google.search.now.ui.piet.ImagesProto.Image value) {
      if (contentCase_ == 3 &&
          content_ != com.google.search.now.ui.piet.ImagesProto.Image.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.ImagesProto.Image.newBuilder((com.google.search.now.ui.piet.ImagesProto.Image) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The image to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 3;</code>
     */
    private void clearImage() {
      if (contentCase_ == 3) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int IMAGE_BINDING_FIELD_NUMBER = 2;
    /**
     * <pre>
     * The binding to the BindingValue for an Image. It is an error if the
     * BindingValue doesn't define an Image.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
     */
    public boolean hasImageBinding() {
      return contentCase_ == 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for an Image. It is an error if the
     * BindingValue doesn't define an Image.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef getImageBinding() {
      if (contentCase_ == 2) {
         return (com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef) content_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * The binding to the BindingValue for an Image. It is an error if the
     * BindingValue doesn't define an Image.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
     */
    private void setImageBinding(com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for an Image. It is an error if the
     * BindingValue doesn't define an Image.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
     */
    private void setImageBinding(
        com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for an Image. It is an error if the
     * BindingValue doesn't define an Image.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
     */
    private void mergeImageBinding(com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef value) {
      if (contentCase_ == 2 &&
          content_ != com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for an Image. It is an error if the
     * BindingValue doesn't define an Image.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
     */
    private void clearImageBinding() {
      if (contentCase_ == 2) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int STYLE_REFERENCES_FIELD_NUMBER = 1;
    private com.google.search.now.ui.piet.StylesProto.StyleIdsStack styleReferences_;
    /**
     * <pre>
     * Styles applied to this ImageElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasStyleReferences() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Styles applied to this ImageElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
      return styleReferences_ == null ? com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance() : styleReferences_;
    }
    /**
     * <pre>
     * Styles applied to this ImageElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (value == null) {
        throw new NullPointerException();
      }
      styleReferences_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <pre>
     * Styles applied to this ImageElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(
        com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
      styleReferences_ = builderForValue.build();
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Styles applied to this ImageElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (styleReferences_ != null &&
          styleReferences_ != com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance()) {
        styleReferences_ =
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.newBuilder(styleReferences_).mergeFrom(value).buildPartial();
      } else {
        styleReferences_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Styles applied to this ImageElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void clearStyleReferences() {  styleReferences_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.ImageElement, com.google.search.now.ui.piet.ElementsProto.ImageElement.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(1, getStyleReferences());
      }
      if (contentCase_ == 2) {
        output.writeMessage(2, (com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef) content_);
      }
      if (contentCase_ == 3) {
        output.writeMessage(3, (com.google.search.now.ui.piet.ImagesProto.Image) content_);
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStyleReferences());
      }
      if (contentCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef) content_);
      }
      if (contentCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.search.now.ui.piet.ImagesProto.Image) content_);
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ImageElement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.ImageElement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * An Image which is displayed as a horizontal slice within a parent container.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.ImageElement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.ImageElement, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.ImageElement)
        com.google.search.now.ui.piet.ElementsProto.ImageElementOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.ImageElement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ContentCase
          getContentCase() {
        return instance.getContentCase();
      }

      public Builder clearContent() {
        copyOnWrite();
        instance.clearContent();
        return this;
      }


      /**
       * <pre>
       * The image to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 3;</code>
       */
      public boolean hasImage() {
        return instance.hasImage();
      }
      /**
       * <pre>
       * The image to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 3;</code>
       */
      public com.google.search.now.ui.piet.ImagesProto.Image getImage() {
        return instance.getImage();
      }
      /**
       * <pre>
       * The image to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 3;</code>
       */
      public Builder setImage(com.google.search.now.ui.piet.ImagesProto.Image value) {
        copyOnWrite();
        instance.setImage(value);
        return this;
      }
      /**
       * <pre>
       * The image to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 3;</code>
       */
      public Builder setImage(
          com.google.search.now.ui.piet.ImagesProto.Image.Builder builderForValue) {
        copyOnWrite();
        instance.setImage(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The image to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 3;</code>
       */
      public Builder mergeImage(com.google.search.now.ui.piet.ImagesProto.Image value) {
        copyOnWrite();
        instance.mergeImage(value);
        return this;
      }
      /**
       * <pre>
       * The image to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 3;</code>
       */
      public Builder clearImage() {
        copyOnWrite();
        instance.clearImage();
        return this;
      }

      /**
       * <pre>
       * The binding to the BindingValue for an Image. It is an error if the
       * BindingValue doesn't define an Image.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
       */
      public boolean hasImageBinding() {
        return instance.hasImageBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for an Image. It is an error if the
       * BindingValue doesn't define an Image.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef getImageBinding() {
        return instance.getImageBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for an Image. It is an error if the
       * BindingValue doesn't define an Image.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
       */
      public Builder setImageBinding(com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef value) {
        copyOnWrite();
        instance.setImageBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for an Image. It is an error if the
       * BindingValue doesn't define an Image.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
       */
      public Builder setImageBinding(
          com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setImageBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for an Image. It is an error if the
       * BindingValue doesn't define an Image.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
       */
      public Builder mergeImageBinding(com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef value) {
        copyOnWrite();
        instance.mergeImageBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for an Image. It is an error if the
       * BindingValue doesn't define an Image.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ImageBindingRef image_binding = 2;</code>
       */
      public Builder clearImageBinding() {
        copyOnWrite();
        instance.clearImageBinding();
        return this;
      }

      /**
       * <pre>
       * Styles applied to this ImageElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasStyleReferences() {
        return instance.hasStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this ImageElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
        return instance.getStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this ImageElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.setStyleReferences(value);
        return this;
        }
      /**
       * <pre>
       * Styles applied to this ImageElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
        copyOnWrite();
        instance.setStyleReferences(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this ImageElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.mergeStyleReferences(value);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this ImageElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearStyleReferences() {  copyOnWrite();
        instance.clearStyleReferences();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.ImageElement)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.ImageElement();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasImage()) {
            if (!getImage().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasStyleReferences()) {
            if (!getStyleReferences().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.ImageElement other = (com.google.search.now.ui.piet.ElementsProto.ImageElement) arg1;
          styleReferences_ = visitor.visitMessage(styleReferences_, other.styleReferences_);
          switch (other.getContentCase()) {
            case IMAGE: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 3,
                  content_,
                  other.content_);
              break;
            }
            case IMAGE_BINDING: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 2,
                  content_,
                  other.content_);
              break;
            }
            case CONTENT_NOT_SET: {
              visitor.visitOneofNotSet(contentCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.contentCase_ != 0) {
              contentCase_ = other.contentCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    subBuilder = styleReferences_.toBuilder();
                  }
                  styleReferences_ = input.readMessage(com.google.search.now.ui.piet.StylesProto.StyleIdsStack.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(styleReferences_);
                    styleReferences_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000004;
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef.Builder subBuilder = null;
                  if (contentCase_ == 2) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.ImageBindingRef) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 2;
                  break;
                }
                case 26: {
                  com.google.search.now.ui.piet.ImagesProto.Image.Builder subBuilder = null;
                  if (contentCase_ == 3) {
                    subBuilder = ((com.google.search.now.ui.piet.ImagesProto.Image) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.ImagesProto.Image.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ImagesProto.Image) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 3;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.ImageElement.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.ImageElement)
    private static final com.google.search.now.ui.piet.ElementsProto.ImageElement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ImageElement();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.ImageElement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ImageElement> PARSER;

    public static com.google.protobuf.Parser<ImageElement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SpacerElementOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.SpacerElement)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                SpacerElement, SpacerElement.Builder> {

    /**
     * <pre>
     * Height in DP of this spacer.
     * </pre>
     *
     * <code>optional int32 height = 2;</code>
     */
    boolean hasHeight();
    /**
     * <pre>
     * Height in DP of this spacer.
     * </pre>
     *
     * <code>optional int32 height = 2;</code>
     */
    int getHeight();

    /**
     * <pre>
     * Styles applied to this SpacerElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasStyleReferences();
    /**
     * <pre>
     * Styles applied to this SpacerElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences();
  }
  /**
   * <pre>
   * A SpacerElement represents an empty space. Uses include gaps or dividers
   * within a card. Styles can be set on a spacer, e.g. background_color, but
   * no bindings are supported since it is always empty.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.SpacerElement}
   */
  public  static final class SpacerElement extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        SpacerElement, SpacerElement.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.SpacerElement)
      SpacerElementOrBuilder {
    private SpacerElement() {
    }
    private int bitField0_;
    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <pre>
     * Height in DP of this spacer.
     * </pre>
     *
     * <code>optional int32 height = 2;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Height in DP of this spacer.
     * </pre>
     *
     * <code>optional int32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }
    /**
     * <pre>
     * Height in DP of this spacer.
     * </pre>
     *
     * <code>optional int32 height = 2;</code>
     */
    private void setHeight(int value) {
      bitField0_ |= 0x00000001;
      height_ = value;
    }
    /**
     * <pre>
     * Height in DP of this spacer.
     * </pre>
     *
     * <code>optional int32 height = 2;</code>
     */
    private void clearHeight() {
      bitField0_ = (bitField0_ & ~0x00000001);
      height_ = 0;
    }

    public static final int STYLE_REFERENCES_FIELD_NUMBER = 1;
    private com.google.search.now.ui.piet.StylesProto.StyleIdsStack styleReferences_;
    /**
     * <pre>
     * Styles applied to this SpacerElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasStyleReferences() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Styles applied to this SpacerElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
      return styleReferences_ == null ? com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance() : styleReferences_;
    }
    /**
     * <pre>
     * Styles applied to this SpacerElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (value == null) {
        throw new NullPointerException();
      }
      styleReferences_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Styles applied to this SpacerElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(
        com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
      styleReferences_ = builderForValue.build();
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Styles applied to this SpacerElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (styleReferences_ != null &&
          styleReferences_ != com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance()) {
        styleReferences_ =
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.newBuilder(styleReferences_).mergeFrom(value).buildPartial();
      } else {
        styleReferences_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Styles applied to this SpacerElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void clearStyleReferences() {  styleReferences_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.SpacerElement, com.google.search.now.ui.piet.ElementsProto.SpacerElement.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(1, getStyleReferences());
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, height_);
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStyleReferences());
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, height_);
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.SpacerElement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A SpacerElement represents an empty space. Uses include gaps or dividers
     * within a card. Styles can be set on a spacer, e.g. background_color, but
     * no bindings are supported since it is always empty.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.SpacerElement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.SpacerElement, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.SpacerElement)
        com.google.search.now.ui.piet.ElementsProto.SpacerElementOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.SpacerElement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Height in DP of this spacer.
       * </pre>
       *
       * <code>optional int32 height = 2;</code>
       */
      public boolean hasHeight() {
        return instance.hasHeight();
      }
      /**
       * <pre>
       * Height in DP of this spacer.
       * </pre>
       *
       * <code>optional int32 height = 2;</code>
       */
      public int getHeight() {
        return instance.getHeight();
      }
      /**
       * <pre>
       * Height in DP of this spacer.
       * </pre>
       *
       * <code>optional int32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        copyOnWrite();
        instance.setHeight(value);
        return this;
      }
      /**
       * <pre>
       * Height in DP of this spacer.
       * </pre>
       *
       * <code>optional int32 height = 2;</code>
       */
      public Builder clearHeight() {
        copyOnWrite();
        instance.clearHeight();
        return this;
      }

      /**
       * <pre>
       * Styles applied to this SpacerElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasStyleReferences() {
        return instance.hasStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this SpacerElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
        return instance.getStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this SpacerElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.setStyleReferences(value);
        return this;
        }
      /**
       * <pre>
       * Styles applied to this SpacerElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
        copyOnWrite();
        instance.setStyleReferences(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this SpacerElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.mergeStyleReferences(value);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this SpacerElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearStyleReferences() {  copyOnWrite();
        instance.clearStyleReferences();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.SpacerElement)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.SpacerElement();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasStyleReferences()) {
            if (!getStyleReferences().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.SpacerElement other = (com.google.search.now.ui.piet.ElementsProto.SpacerElement) arg1;
          height_ = visitor.visitInt(
              hasHeight(), height_,
              other.hasHeight(), other.height_);
          styleReferences_ = visitor.visitMessage(styleReferences_, other.styleReferences_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = styleReferences_.toBuilder();
                  }
                  styleReferences_ = input.readMessage(com.google.search.now.ui.piet.StylesProto.StyleIdsStack.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(styleReferences_);
                    styleReferences_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000001;
                  height_ = input.readInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.SpacerElement.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.SpacerElement)
    private static final com.google.search.now.ui.piet.ElementsProto.SpacerElement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SpacerElement();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.SpacerElement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SpacerElement> PARSER;

    public static com.google.protobuf.Parser<SpacerElement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TextElementOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.TextElement)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                TextElement, TextElement.Builder> {

    /**
     * <pre>
     * ChunkedText to be displayed. Styles referenced inside the text chunks
     * should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
     */
    boolean hasChunkedText();
    /**
     * <pre>
     * ChunkedText to be displayed. Styles referenced inside the text chunks
     * should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
     */
    com.google.search.now.ui.piet.TextProto.ChunkedText getChunkedText();

    /**
     * <pre>
     * The binding to the BindingValue for a ChunkedText. It is an error if the
     * BindingValue doesn't define a ChunkedText. Styles referenced inside the
     * ChunkedText should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
     */
    boolean hasChunkedTextBinding();
    /**
     * <pre>
     * The binding to the BindingValue for a ChunkedText. It is an error if the
     * BindingValue doesn't define a ChunkedText. Styles referenced inside the
     * ChunkedText should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef getChunkedTextBinding();

    /**
     * <pre>
     * The text to display.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    boolean hasParameterizedText();
    /**
     * <pre>
     * The text to display.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    com.google.search.now.ui.piet.TextProto.ParameterizedText getParameterizedText();

    /**
     * <pre>
     * The binding to the BindingValue for a ParameterizedText. It is an error
     * if the BindingValue doesn't define a ParameterizedText.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
     */
    boolean hasParameterizedTextBinding();
    /**
     * <pre>
     * The binding to the BindingValue for a ParameterizedText. It is an error
     * if the BindingValue doesn't define a ParameterizedText.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef getParameterizedTextBinding();

    /**
     * <pre>
     * Styles applied to this TextElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasStyleReferences();
    /**
     * <pre>
     * Styles applied to this TextElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences();

    public com.google.search.now.ui.piet.ElementsProto.TextElement.ContentCase getContentCase();
  }
  /**
   * <pre>
   * A simple text line (Android TextView, iOS UILabel, or HTML &lt;div&gt;).
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.TextElement}
   */
  public  static final class TextElement extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        TextElement, TextElement.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.TextElement)
      TextElementOrBuilder {
    private TextElement() {
    }
    private int bitField0_;
    private int contentCase_ = 0;
    private java.lang.Object content_;
    public enum ContentCase
        implements com.google.protobuf.Internal.EnumLite {
      CHUNKED_TEXT(5),
      CHUNKED_TEXT_BINDING(4),
      PARAMETERIZED_TEXT(3),
      PARAMETERIZED_TEXT_BINDING(2),
      CONTENT_NOT_SET(0);
      private final int value;
      private ContentCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ContentCase valueOf(int value) {
        return forNumber(value);
      }

      public static ContentCase forNumber(int value) {
        switch (value) {
          case 5: return CHUNKED_TEXT;
          case 4: return CHUNKED_TEXT_BINDING;
          case 3: return PARAMETERIZED_TEXT;
          case 2: return PARAMETERIZED_TEXT_BINDING;
          case 0: return CONTENT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ContentCase
    getContentCase() {
      return ContentCase.forNumber(
          contentCase_);
    }

    private void clearContent() {
      contentCase_ = 0;
      content_ = null;
    }

    public static final int CHUNKED_TEXT_FIELD_NUMBER = 5;
    /**
     * <pre>
     * ChunkedText to be displayed. Styles referenced inside the text chunks
     * should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
     */
    public boolean hasChunkedText() {
      return contentCase_ == 5;
    }
    /**
     * <pre>
     * ChunkedText to be displayed. Styles referenced inside the text chunks
     * should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
     */
    public com.google.search.now.ui.piet.TextProto.ChunkedText getChunkedText() {
      if (contentCase_ == 5) {
         return (com.google.search.now.ui.piet.TextProto.ChunkedText) content_;
      }
      return com.google.search.now.ui.piet.TextProto.ChunkedText.getDefaultInstance();
    }
    /**
     * <pre>
     * ChunkedText to be displayed. Styles referenced inside the text chunks
     * should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
     */
    private void setChunkedText(com.google.search.now.ui.piet.TextProto.ChunkedText value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 5;
    }
    /**
     * <pre>
     * ChunkedText to be displayed. Styles referenced inside the text chunks
     * should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
     */
    private void setChunkedText(
        com.google.search.now.ui.piet.TextProto.ChunkedText.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 5;
    }
    /**
     * <pre>
     * ChunkedText to be displayed. Styles referenced inside the text chunks
     * should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
     */
    private void mergeChunkedText(com.google.search.now.ui.piet.TextProto.ChunkedText value) {
      if (contentCase_ == 5 &&
          content_ != com.google.search.now.ui.piet.TextProto.ChunkedText.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.TextProto.ChunkedText.newBuilder((com.google.search.now.ui.piet.TextProto.ChunkedText) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 5;
    }
    /**
     * <pre>
     * ChunkedText to be displayed. Styles referenced inside the text chunks
     * should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
     */
    private void clearChunkedText() {
      if (contentCase_ == 5) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int CHUNKED_TEXT_BINDING_FIELD_NUMBER = 4;
    /**
     * <pre>
     * The binding to the BindingValue for a ChunkedText. It is an error if the
     * BindingValue doesn't define a ChunkedText. Styles referenced inside the
     * ChunkedText should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
     */
    public boolean hasChunkedTextBinding() {
      return contentCase_ == 4;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ChunkedText. It is an error if the
     * BindingValue doesn't define a ChunkedText. Styles referenced inside the
     * ChunkedText should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef getChunkedTextBinding() {
      if (contentCase_ == 4) {
         return (com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef) content_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ChunkedText. It is an error if the
     * BindingValue doesn't define a ChunkedText. Styles referenced inside the
     * ChunkedText should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
     */
    private void setChunkedTextBinding(com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 4;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ChunkedText. It is an error if the
     * BindingValue doesn't define a ChunkedText. Styles referenced inside the
     * ChunkedText should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
     */
    private void setChunkedTextBinding(
        com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 4;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ChunkedText. It is an error if the
     * BindingValue doesn't define a ChunkedText. Styles referenced inside the
     * ChunkedText should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
     */
    private void mergeChunkedTextBinding(com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef value) {
      if (contentCase_ == 4 &&
          content_ != com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 4;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ChunkedText. It is an error if the
     * BindingValue doesn't define a ChunkedText. Styles referenced inside the
     * ChunkedText should override the style references in this TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
     */
    private void clearChunkedTextBinding() {
      if (contentCase_ == 4) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int PARAMETERIZED_TEXT_FIELD_NUMBER = 3;
    /**
     * <pre>
     * The text to display.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    public boolean hasParameterizedText() {
      return contentCase_ == 3;
    }
    /**
     * <pre>
     * The text to display.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    public com.google.search.now.ui.piet.TextProto.ParameterizedText getParameterizedText() {
      if (contentCase_ == 3) {
         return (com.google.search.now.ui.piet.TextProto.ParameterizedText) content_;
      }
      return com.google.search.now.ui.piet.TextProto.ParameterizedText.getDefaultInstance();
    }
    /**
     * <pre>
     * The text to display.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    private void setParameterizedText(com.google.search.now.ui.piet.TextProto.ParameterizedText value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The text to display.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    private void setParameterizedText(
        com.google.search.now.ui.piet.TextProto.ParameterizedText.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The text to display.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    private void mergeParameterizedText(com.google.search.now.ui.piet.TextProto.ParameterizedText value) {
      if (contentCase_ == 3 &&
          content_ != com.google.search.now.ui.piet.TextProto.ParameterizedText.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.TextProto.ParameterizedText.newBuilder((com.google.search.now.ui.piet.TextProto.ParameterizedText) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The text to display.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    private void clearParameterizedText() {
      if (contentCase_ == 3) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int PARAMETERIZED_TEXT_BINDING_FIELD_NUMBER = 2;
    /**
     * <pre>
     * The binding to the BindingValue for a ParameterizedText. It is an error
     * if the BindingValue doesn't define a ParameterizedText.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
     */
    public boolean hasParameterizedTextBinding() {
      return contentCase_ == 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ParameterizedText. It is an error
     * if the BindingValue doesn't define a ParameterizedText.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef getParameterizedTextBinding() {
      if (contentCase_ == 2) {
         return (com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef) content_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ParameterizedText. It is an error
     * if the BindingValue doesn't define a ParameterizedText.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
     */
    private void setParameterizedTextBinding(com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ParameterizedText. It is an error
     * if the BindingValue doesn't define a ParameterizedText.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
     */
    private void setParameterizedTextBinding(
        com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ParameterizedText. It is an error
     * if the BindingValue doesn't define a ParameterizedText.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
     */
    private void mergeParameterizedTextBinding(com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef value) {
      if (contentCase_ == 2 &&
          content_ != com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ParameterizedText. It is an error
     * if the BindingValue doesn't define a ParameterizedText.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
     */
    private void clearParameterizedTextBinding() {
      if (contentCase_ == 2) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int STYLE_REFERENCES_FIELD_NUMBER = 1;
    private com.google.search.now.ui.piet.StylesProto.StyleIdsStack styleReferences_;
    /**
     * <pre>
     * Styles applied to this TextElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasStyleReferences() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Styles applied to this TextElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
      return styleReferences_ == null ? com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance() : styleReferences_;
    }
    /**
     * <pre>
     * Styles applied to this TextElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (value == null) {
        throw new NullPointerException();
      }
      styleReferences_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <pre>
     * Styles applied to this TextElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(
        com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
      styleReferences_ = builderForValue.build();
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Styles applied to this TextElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (styleReferences_ != null &&
          styleReferences_ != com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance()) {
        styleReferences_ =
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.newBuilder(styleReferences_).mergeFrom(value).buildPartial();
      } else {
        styleReferences_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Styles applied to this TextElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void clearStyleReferences() {  styleReferences_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.TextElement, com.google.search.now.ui.piet.ElementsProto.TextElement.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(1, getStyleReferences());
      }
      if (contentCase_ == 2) {
        output.writeMessage(2, (com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef) content_);
      }
      if (contentCase_ == 3) {
        output.writeMessage(3, (com.google.search.now.ui.piet.TextProto.ParameterizedText) content_);
      }
      if (contentCase_ == 4) {
        output.writeMessage(4, (com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef) content_);
      }
      if (contentCase_ == 5) {
        output.writeMessage(5, (com.google.search.now.ui.piet.TextProto.ChunkedText) content_);
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStyleReferences());
      }
      if (contentCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef) content_);
      }
      if (contentCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.search.now.ui.piet.TextProto.ParameterizedText) content_);
      }
      if (contentCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef) content_);
      }
      if (contentCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (com.google.search.now.ui.piet.TextProto.ChunkedText) content_);
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TextElement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.TextElement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A simple text line (Android TextView, iOS UILabel, or HTML &lt;div&gt;).
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.TextElement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.TextElement, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.TextElement)
        com.google.search.now.ui.piet.ElementsProto.TextElementOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.TextElement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ContentCase
          getContentCase() {
        return instance.getContentCase();
      }

      public Builder clearContent() {
        copyOnWrite();
        instance.clearContent();
        return this;
      }


      /**
       * <pre>
       * ChunkedText to be displayed. Styles referenced inside the text chunks
       * should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
       */
      public boolean hasChunkedText() {
        return instance.hasChunkedText();
      }
      /**
       * <pre>
       * ChunkedText to be displayed. Styles referenced inside the text chunks
       * should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
       */
      public com.google.search.now.ui.piet.TextProto.ChunkedText getChunkedText() {
        return instance.getChunkedText();
      }
      /**
       * <pre>
       * ChunkedText to be displayed. Styles referenced inside the text chunks
       * should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
       */
      public Builder setChunkedText(com.google.search.now.ui.piet.TextProto.ChunkedText value) {
        copyOnWrite();
        instance.setChunkedText(value);
        return this;
      }
      /**
       * <pre>
       * ChunkedText to be displayed. Styles referenced inside the text chunks
       * should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
       */
      public Builder setChunkedText(
          com.google.search.now.ui.piet.TextProto.ChunkedText.Builder builderForValue) {
        copyOnWrite();
        instance.setChunkedText(builderForValue);
        return this;
      }
      /**
       * <pre>
       * ChunkedText to be displayed. Styles referenced inside the text chunks
       * should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
       */
      public Builder mergeChunkedText(com.google.search.now.ui.piet.TextProto.ChunkedText value) {
        copyOnWrite();
        instance.mergeChunkedText(value);
        return this;
      }
      /**
       * <pre>
       * ChunkedText to be displayed. Styles referenced inside the text chunks
       * should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 5;</code>
       */
      public Builder clearChunkedText() {
        copyOnWrite();
        instance.clearChunkedText();
        return this;
      }

      /**
       * <pre>
       * The binding to the BindingValue for a ChunkedText. It is an error if the
       * BindingValue doesn't define a ChunkedText. Styles referenced inside the
       * ChunkedText should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
       */
      public boolean hasChunkedTextBinding() {
        return instance.hasChunkedTextBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ChunkedText. It is an error if the
       * BindingValue doesn't define a ChunkedText. Styles referenced inside the
       * ChunkedText should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef getChunkedTextBinding() {
        return instance.getChunkedTextBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ChunkedText. It is an error if the
       * BindingValue doesn't define a ChunkedText. Styles referenced inside the
       * ChunkedText should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
       */
      public Builder setChunkedTextBinding(com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef value) {
        copyOnWrite();
        instance.setChunkedTextBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ChunkedText. It is an error if the
       * BindingValue doesn't define a ChunkedText. Styles referenced inside the
       * ChunkedText should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
       */
      public Builder setChunkedTextBinding(
          com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setChunkedTextBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ChunkedText. It is an error if the
       * BindingValue doesn't define a ChunkedText. Styles referenced inside the
       * ChunkedText should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
       */
      public Builder mergeChunkedTextBinding(com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef value) {
        copyOnWrite();
        instance.mergeChunkedTextBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ChunkedText. It is an error if the
       * BindingValue doesn't define a ChunkedText. Styles referenced inside the
       * ChunkedText should override the style references in this TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedTextBindingRef chunked_text_binding = 4;</code>
       */
      public Builder clearChunkedTextBinding() {
        copyOnWrite();
        instance.clearChunkedTextBinding();
        return this;
      }

      /**
       * <pre>
       * The text to display.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public boolean hasParameterizedText() {
        return instance.hasParameterizedText();
      }
      /**
       * <pre>
       * The text to display.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public com.google.search.now.ui.piet.TextProto.ParameterizedText getParameterizedText() {
        return instance.getParameterizedText();
      }
      /**
       * <pre>
       * The text to display.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public Builder setParameterizedText(com.google.search.now.ui.piet.TextProto.ParameterizedText value) {
        copyOnWrite();
        instance.setParameterizedText(value);
        return this;
      }
      /**
       * <pre>
       * The text to display.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public Builder setParameterizedText(
          com.google.search.now.ui.piet.TextProto.ParameterizedText.Builder builderForValue) {
        copyOnWrite();
        instance.setParameterizedText(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The text to display.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public Builder mergeParameterizedText(com.google.search.now.ui.piet.TextProto.ParameterizedText value) {
        copyOnWrite();
        instance.mergeParameterizedText(value);
        return this;
      }
      /**
       * <pre>
       * The text to display.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public Builder clearParameterizedText() {
        copyOnWrite();
        instance.clearParameterizedText();
        return this;
      }

      /**
       * <pre>
       * The binding to the BindingValue for a ParameterizedText. It is an error
       * if the BindingValue doesn't define a ParameterizedText.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
       */
      public boolean hasParameterizedTextBinding() {
        return instance.hasParameterizedTextBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ParameterizedText. It is an error
       * if the BindingValue doesn't define a ParameterizedText.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef getParameterizedTextBinding() {
        return instance.getParameterizedTextBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ParameterizedText. It is an error
       * if the BindingValue doesn't define a ParameterizedText.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
       */
      public Builder setParameterizedTextBinding(com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef value) {
        copyOnWrite();
        instance.setParameterizedTextBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ParameterizedText. It is an error
       * if the BindingValue doesn't define a ParameterizedText.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
       */
      public Builder setParameterizedTextBinding(
          com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setParameterizedTextBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ParameterizedText. It is an error
       * if the BindingValue doesn't define a ParameterizedText.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
       */
      public Builder mergeParameterizedTextBinding(com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef value) {
        copyOnWrite();
        instance.mergeParameterizedTextBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ParameterizedText. It is an error
       * if the BindingValue doesn't define a ParameterizedText.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedTextBindingRef parameterized_text_binding = 2;</code>
       */
      public Builder clearParameterizedTextBinding() {
        copyOnWrite();
        instance.clearParameterizedTextBinding();
        return this;
      }

      /**
       * <pre>
       * Styles applied to this TextElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasStyleReferences() {
        return instance.hasStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this TextElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
        return instance.getStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this TextElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.setStyleReferences(value);
        return this;
        }
      /**
       * <pre>
       * Styles applied to this TextElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
        copyOnWrite();
        instance.setStyleReferences(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this TextElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.mergeStyleReferences(value);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this TextElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearStyleReferences() {  copyOnWrite();
        instance.clearStyleReferences();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.TextElement)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.TextElement();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasChunkedText()) {
            if (!getChunkedText().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasStyleReferences()) {
            if (!getStyleReferences().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.TextElement other = (com.google.search.now.ui.piet.ElementsProto.TextElement) arg1;
          styleReferences_ = visitor.visitMessage(styleReferences_, other.styleReferences_);
          switch (other.getContentCase()) {
            case CHUNKED_TEXT: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 5,
                  content_,
                  other.content_);
              break;
            }
            case CHUNKED_TEXT_BINDING: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 4,
                  content_,
                  other.content_);
              break;
            }
            case PARAMETERIZED_TEXT: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 3,
                  content_,
                  other.content_);
              break;
            }
            case PARAMETERIZED_TEXT_BINDING: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 2,
                  content_,
                  other.content_);
              break;
            }
            case CONTENT_NOT_SET: {
              visitor.visitOneofNotSet(contentCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.contentCase_ != 0) {
              contentCase_ = other.contentCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000010) == 0x00000010)) {
                    subBuilder = styleReferences_.toBuilder();
                  }
                  styleReferences_ = input.readMessage(com.google.search.now.ui.piet.StylesProto.StyleIdsStack.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(styleReferences_);
                    styleReferences_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000010;
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef.Builder subBuilder = null;
                  if (contentCase_ == 2) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.ParameterizedTextBindingRef) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 2;
                  break;
                }
                case 26: {
                  com.google.search.now.ui.piet.TextProto.ParameterizedText.Builder subBuilder = null;
                  if (contentCase_ == 3) {
                    subBuilder = ((com.google.search.now.ui.piet.TextProto.ParameterizedText) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.TextProto.ParameterizedText.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.TextProto.ParameterizedText) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 3;
                  break;
                }
                case 34: {
                  com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef.Builder subBuilder = null;
                  if (contentCase_ == 4) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.ChunkedTextBindingRef) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 4;
                  break;
                }
                case 42: {
                  com.google.search.now.ui.piet.TextProto.ChunkedText.Builder subBuilder = null;
                  if (contentCase_ == 5) {
                    subBuilder = ((com.google.search.now.ui.piet.TextProto.ChunkedText) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.TextProto.ChunkedText.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.TextProto.ChunkedText) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 5;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.TextElement.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.TextElement)
    private static final com.google.search.now.ui.piet.ElementsProto.TextElement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TextElement();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.TextElement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TextElement> PARSER;

    public static com.google.protobuf.Parser<TextElement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GridRowOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.GridRow)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                GridRow, GridRow.Builder> {

    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    java.util.List<com.google.search.now.ui.piet.ElementsProto.GridCell> 
        getCellsList();
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.GridCell getCells(int index);
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    int getCellsCount();

    /**
     * <pre>
     * Styles applied to this GridRow.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasStyleReferences();
    /**
     * <pre>
     * Styles applied to this GridRow.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences();
  }
  /**
   * <pre>
   * A horizontally-oriented left-to-right list of Contents with specified widths.
   * Without explicit dimensions or constraints by the parent, this container is
   * as tall as its tallest child, and as wide as the sum of its cells.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.GridRow}
   */
  public  static final class GridRow extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        GridRow, GridRow.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.GridRow)
      GridRowOrBuilder {
    private GridRow() {
      cells_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int CELLS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<com.google.search.now.ui.piet.ElementsProto.GridCell> cells_;
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    public java.util.List<com.google.search.now.ui.piet.ElementsProto.GridCell> getCellsList() {
      return cells_;
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    public java.util.List<? extends com.google.search.now.ui.piet.ElementsProto.GridCellOrBuilder> 
        getCellsOrBuilderList() {
      return cells_;
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    public int getCellsCount() {
      return cells_.size();
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.GridCell getCells(int index) {
      return cells_.get(index);
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.GridCellOrBuilder getCellsOrBuilder(
        int index) {
      return cells_.get(index);
    }
    private void ensureCellsIsMutable() {
      if (!cells_.isModifiable()) {
        cells_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(cells_);
       }
    }

    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void setCells(
        int index, com.google.search.now.ui.piet.ElementsProto.GridCell value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureCellsIsMutable();
      cells_.set(index, value);
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void setCells(
        int index, com.google.search.now.ui.piet.ElementsProto.GridCell.Builder builderForValue) {
      ensureCellsIsMutable();
      cells_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void addCells(com.google.search.now.ui.piet.ElementsProto.GridCell value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureCellsIsMutable();
      cells_.add(value);
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void addCells(
        int index, com.google.search.now.ui.piet.ElementsProto.GridCell value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureCellsIsMutable();
      cells_.add(index, value);
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void addCells(
        com.google.search.now.ui.piet.ElementsProto.GridCell.Builder builderForValue) {
      ensureCellsIsMutable();
      cells_.add(builderForValue.build());
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void addCells(
        int index, com.google.search.now.ui.piet.ElementsProto.GridCell.Builder builderForValue) {
      ensureCellsIsMutable();
      cells_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void addAllCells(
        java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.GridCell> values) {
      ensureCellsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, cells_);
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void clearCells() {
      cells_ = emptyProtobufList();
    }
    /**
     * <pre>
     * A list of cells defining the content of the grid.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
     */
    private void removeCells(int index) {
      ensureCellsIsMutable();
      cells_.remove(index);
    }

    public static final int STYLE_REFERENCES_FIELD_NUMBER = 1;
    private com.google.search.now.ui.piet.StylesProto.StyleIdsStack styleReferences_;
    /**
     * <pre>
     * Styles applied to this GridRow.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasStyleReferences() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Styles applied to this GridRow.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
      return styleReferences_ == null ? com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance() : styleReferences_;
    }
    /**
     * <pre>
     * Styles applied to this GridRow.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (value == null) {
        throw new NullPointerException();
      }
      styleReferences_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Styles applied to this GridRow.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(
        com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
      styleReferences_ = builderForValue.build();
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Styles applied to this GridRow.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (styleReferences_ != null &&
          styleReferences_ != com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance()) {
        styleReferences_ =
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.newBuilder(styleReferences_).mergeFrom(value).buildPartial();
      } else {
        styleReferences_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Styles applied to this GridRow.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void clearStyleReferences() {  styleReferences_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.GridRow, com.google.search.now.ui.piet.ElementsProto.GridRow.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getStyleReferences());
      }
      for (int i = 0; i < cells_.size(); i++) {
        output.writeMessage(2, cells_.get(i));
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStyleReferences());
      }
      for (int i = 0; i < cells_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cells_.get(i));
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridRow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.GridRow prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A horizontally-oriented left-to-right list of Contents with specified widths.
     * Without explicit dimensions or constraints by the parent, this container is
     * as tall as its tallest child, and as wide as the sum of its cells.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.GridRow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.GridRow, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.GridRow)
        com.google.search.now.ui.piet.ElementsProto.GridRowOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.GridRow.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public java.util.List<com.google.search.now.ui.piet.ElementsProto.GridCell> getCellsList() {
        return java.util.Collections.unmodifiableList(
            instance.getCellsList());
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public int getCellsCount() {
        return instance.getCellsCount();
      }/**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.GridCell getCells(int index) {
        return instance.getCells(index);
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder setCells(
          int index, com.google.search.now.ui.piet.ElementsProto.GridCell value) {
        copyOnWrite();
        instance.setCells(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder setCells(
          int index, com.google.search.now.ui.piet.ElementsProto.GridCell.Builder builderForValue) {
        copyOnWrite();
        instance.setCells(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder addCells(com.google.search.now.ui.piet.ElementsProto.GridCell value) {
        copyOnWrite();
        instance.addCells(value);
        return this;
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder addCells(
          int index, com.google.search.now.ui.piet.ElementsProto.GridCell value) {
        copyOnWrite();
        instance.addCells(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder addCells(
          com.google.search.now.ui.piet.ElementsProto.GridCell.Builder builderForValue) {
        copyOnWrite();
        instance.addCells(builderForValue);
        return this;
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder addCells(
          int index, com.google.search.now.ui.piet.ElementsProto.GridCell.Builder builderForValue) {
        copyOnWrite();
        instance.addCells(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder addAllCells(
          java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.GridCell> values) {
        copyOnWrite();
        instance.addAllCells(values);
        return this;
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder clearCells() {
        copyOnWrite();
        instance.clearCells();
        return this;
      }
      /**
       * <pre>
       * A list of cells defining the content of the grid.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.GridCell cells = 2;</code>
       */
      public Builder removeCells(int index) {
        copyOnWrite();
        instance.removeCells(index);
        return this;
      }

      /**
       * <pre>
       * Styles applied to this GridRow.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasStyleReferences() {
        return instance.hasStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this GridRow.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
        return instance.getStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this GridRow.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.setStyleReferences(value);
        return this;
        }
      /**
       * <pre>
       * Styles applied to this GridRow.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
        copyOnWrite();
        instance.setStyleReferences(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this GridRow.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.mergeStyleReferences(value);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this GridRow.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearStyleReferences() {  copyOnWrite();
        instance.clearStyleReferences();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.GridRow)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.GridRow();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          for (int i = 0; i < getCellsCount(); i++) {
            if (!getCells(i).isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasStyleReferences()) {
            if (!getStyleReferences().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          cells_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.GridRow other = (com.google.search.now.ui.piet.ElementsProto.GridRow) arg1;
          cells_= visitor.visitList(cells_, other.cells_);
          styleReferences_ = visitor.visitMessage(styleReferences_, other.styleReferences_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = styleReferences_.toBuilder();
                  }
                  styleReferences_ = input.readMessage(com.google.search.now.ui.piet.StylesProto.StyleIdsStack.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(styleReferences_);
                    styleReferences_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
                case 18: {
                  if (!cells_.isModifiable()) {
                    cells_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(cells_);
                  }
                  cells_.add(
                      input.readMessage(com.google.search.now.ui.piet.ElementsProto.GridCell.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.GridRow.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.GridRow)
    private static final com.google.search.now.ui.piet.ElementsProto.GridRow DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GridRow();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.GridRow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GridRow> PARSER;

    public static com.google.protobuf.Parser<GridRow> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GridCellOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.GridCell)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                GridCell, GridCell.Builder> {

    /**
     * <pre>
     * The content of the GridCell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Content content = 7;</code>
     */
    boolean hasContent();
    /**
     * <pre>
     * The content of the GridCell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Content content = 7;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.Content getContent();

    /**
     * <pre>
     * Specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
     */
    boolean hasWidth();
    /**
     * <pre>
     * Specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.GridCellWidth getWidth();

    /**
     * <pre>
     * Width specified in bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
     */
    boolean hasWidthBinding();
    /**
     * <pre>
     * Width specified in bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef getWidthBinding();

    public com.google.search.now.ui.piet.ElementsProto.GridCell.CellWidthCase getCellWidthCase();
  }
  /**
   * <pre>
   * The Grid Cell represents the contents within a GridRow.
   * The content within each cell is always the same width as the cell (minus
   * margins) - width on the content's style is ignored. If the cell has extra
   * vertical space (the GridRow is taller than the content), the content can
   * float vertically with gravity.
   * If the child's style does not specify a height, it defaults to matching the
   * height of the GridRow.
   * Next Id: 8
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.GridCell}
   */
  public  static final class GridCell extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        GridCell, GridCell.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.GridCell)
      GridCellOrBuilder {
    private GridCell() {
    }
    private int bitField0_;
    private int cellWidthCase_ = 0;
    private java.lang.Object cellWidth_;
    public enum CellWidthCase
        implements com.google.protobuf.Internal.EnumLite {
      WIDTH(4),
      WIDTH_BINDING(5),
      CELLWIDTH_NOT_SET(0);
      private final int value;
      private CellWidthCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CellWidthCase valueOf(int value) {
        return forNumber(value);
      }

      public static CellWidthCase forNumber(int value) {
        switch (value) {
          case 4: return WIDTH;
          case 5: return WIDTH_BINDING;
          case 0: return CELLWIDTH_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public CellWidthCase
    getCellWidthCase() {
      return CellWidthCase.forNumber(
          cellWidthCase_);
    }

    private void clearCellWidth() {
      cellWidthCase_ = 0;
      cellWidth_ = null;
    }

    public static final int CONTENT_FIELD_NUMBER = 7;
    private com.google.search.now.ui.piet.ElementsProto.Content content_;
    /**
     * <pre>
     * The content of the GridCell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Content content = 7;</code>
     */
    public boolean hasContent() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The content of the GridCell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Content content = 7;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.Content getContent() {
      return content_ == null ? com.google.search.now.ui.piet.ElementsProto.Content.getDefaultInstance() : content_;
    }
    /**
     * <pre>
     * The content of the GridCell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Content content = 7;</code>
     */
    private void setContent(com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * The content of the GridCell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Content content = 7;</code>
     */
    private void setContent(
        com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      content_ = builderForValue.build();
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * The content of the GridCell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Content content = 7;</code>
     */
    private void mergeContent(com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (content_ != null &&
          content_ != com.google.search.now.ui.piet.ElementsProto.Content.getDefaultInstance()) {
        content_ =
          com.google.search.now.ui.piet.ElementsProto.Content.newBuilder(content_).mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * The content of the GridCell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Content content = 7;</code>
     */
    private void clearContent() {  content_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int WIDTH_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
     */
    public boolean hasWidth() {
      return cellWidthCase_ == 4;
    }
    /**
     * <pre>
     * Specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.GridCellWidth getWidth() {
      if (cellWidthCase_ == 4) {
         return (com.google.search.now.ui.piet.ElementsProto.GridCellWidth) cellWidth_;
      }
      return com.google.search.now.ui.piet.ElementsProto.GridCellWidth.getDefaultInstance();
    }
    /**
     * <pre>
     * Specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
     */
    private void setWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth value) {
      if (value == null) {
        throw new NullPointerException();
      }
      cellWidth_ = value;
      cellWidthCase_ = 4;
    }
    /**
     * <pre>
     * Specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
     */
    private void setWidth(
        com.google.search.now.ui.piet.ElementsProto.GridCellWidth.Builder builderForValue) {
      cellWidth_ = builderForValue.build();
      cellWidthCase_ = 4;
    }
    /**
     * <pre>
     * Specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
     */
    private void mergeWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth value) {
      if (cellWidthCase_ == 4 &&
          cellWidth_ != com.google.search.now.ui.piet.ElementsProto.GridCellWidth.getDefaultInstance()) {
        cellWidth_ = com.google.search.now.ui.piet.ElementsProto.GridCellWidth.newBuilder((com.google.search.now.ui.piet.ElementsProto.GridCellWidth) cellWidth_)
            .mergeFrom(value).buildPartial();
      } else {
        cellWidth_ = value;
      }
      cellWidthCase_ = 4;
    }
    /**
     * <pre>
     * Specified inline.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
     */
    private void clearWidth() {
      if (cellWidthCase_ == 4) {
        cellWidthCase_ = 0;
        cellWidth_ = null;
      }
    }

    public static final int WIDTH_BINDING_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Width specified in bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
     */
    public boolean hasWidthBinding() {
      return cellWidthCase_ == 5;
    }
    /**
     * <pre>
     * Width specified in bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef getWidthBinding() {
      if (cellWidthCase_ == 5) {
         return (com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef) cellWidth_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * Width specified in bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
     */
    private void setWidthBinding(com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      cellWidth_ = value;
      cellWidthCase_ = 5;
    }
    /**
     * <pre>
     * Width specified in bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
     */
    private void setWidthBinding(
        com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef.Builder builderForValue) {
      cellWidth_ = builderForValue.build();
      cellWidthCase_ = 5;
    }
    /**
     * <pre>
     * Width specified in bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
     */
    private void mergeWidthBinding(com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef value) {
      if (cellWidthCase_ == 5 &&
          cellWidth_ != com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef.getDefaultInstance()) {
        cellWidth_ = com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef) cellWidth_)
            .mergeFrom(value).buildPartial();
      } else {
        cellWidth_ = value;
      }
      cellWidthCase_ = 5;
    }
    /**
     * <pre>
     * Width specified in bindings.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
     */
    private void clearWidthBinding() {
      if (cellWidthCase_ == 5) {
        cellWidthCase_ = 0;
        cellWidth_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.GridCell, com.google.search.now.ui.piet.ElementsProto.GridCell.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (cellWidthCase_ == 4) {
        output.writeMessage(4, (com.google.search.now.ui.piet.ElementsProto.GridCellWidth) cellWidth_);
      }
      if (cellWidthCase_ == 5) {
        output.writeMessage(5, (com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef) cellWidth_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(7, getContent());
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (cellWidthCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.search.now.ui.piet.ElementsProto.GridCellWidth) cellWidth_);
      }
      if (cellWidthCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef) cellWidth_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getContent());
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCell parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.GridCell prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The Grid Cell represents the contents within a GridRow.
     * The content within each cell is always the same width as the cell (minus
     * margins) - width on the content's style is ignored. If the cell has extra
     * vertical space (the GridRow is taller than the content), the content can
     * float vertically with gravity.
     * If the child's style does not specify a height, it defaults to matching the
     * height of the GridRow.
     * Next Id: 8
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.GridCell}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.GridCell, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.GridCell)
        com.google.search.now.ui.piet.ElementsProto.GridCellOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.GridCell.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public CellWidthCase
          getCellWidthCase() {
        return instance.getCellWidthCase();
      }

      public Builder clearCellWidth() {
        copyOnWrite();
        instance.clearCellWidth();
        return this;
      }


      /**
       * <pre>
       * The content of the GridCell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Content content = 7;</code>
       */
      public boolean hasContent() {
        return instance.hasContent();
      }
      /**
       * <pre>
       * The content of the GridCell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Content content = 7;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.Content getContent() {
        return instance.getContent();
      }
      /**
       * <pre>
       * The content of the GridCell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Content content = 7;</code>
       */
      public Builder setContent(com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.setContent(value);
        return this;
        }
      /**
       * <pre>
       * The content of the GridCell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Content content = 7;</code>
       */
      public Builder setContent(
          com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.setContent(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The content of the GridCell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Content content = 7;</code>
       */
      public Builder mergeContent(com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.mergeContent(value);
        return this;
      }
      /**
       * <pre>
       * The content of the GridCell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Content content = 7;</code>
       */
      public Builder clearContent() {  copyOnWrite();
        instance.clearContent();
        return this;
      }

      /**
       * <pre>
       * Specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
       */
      public boolean hasWidth() {
        return instance.hasWidth();
      }
      /**
       * <pre>
       * Specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.GridCellWidth getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       * Specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
       */
      public Builder setWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       * Specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
       */
      public Builder setWidth(
          com.google.search.now.ui.piet.ElementsProto.GridCellWidth.Builder builderForValue) {
        copyOnWrite();
        instance.setWidth(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
       */
      public Builder mergeWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth value) {
        copyOnWrite();
        instance.mergeWidth(value);
        return this;
      }
      /**
       * <pre>
       * Specified inline.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth width = 4;</code>
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      /**
       * <pre>
       * Width specified in bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
       */
      public boolean hasWidthBinding() {
        return instance.hasWidthBinding();
      }
      /**
       * <pre>
       * Width specified in bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef getWidthBinding() {
        return instance.getWidthBinding();
      }
      /**
       * <pre>
       * Width specified in bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
       */
      public Builder setWidthBinding(com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef value) {
        copyOnWrite();
        instance.setWidthBinding(value);
        return this;
      }
      /**
       * <pre>
       * Width specified in bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
       */
      public Builder setWidthBinding(
          com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setWidthBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Width specified in bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
       */
      public Builder mergeWidthBinding(com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef value) {
        copyOnWrite();
        instance.mergeWidthBinding(value);
        return this;
      }
      /**
       * <pre>
       * Width specified in bindings.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidthBindingRef width_binding = 5;</code>
       */
      public Builder clearWidthBinding() {
        copyOnWrite();
        instance.clearWidthBinding();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.GridCell)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.GridCell();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasContent()) {
            if (!getContent().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.GridCell other = (com.google.search.now.ui.piet.ElementsProto.GridCell) arg1;
          content_ = visitor.visitMessage(content_, other.content_);
          switch (other.getCellWidthCase()) {
            case WIDTH: {
              cellWidth_ = visitor.visitOneofMessage(
                  cellWidthCase_ == 4,
                  cellWidth_,
                  other.cellWidth_);
              break;
            }
            case WIDTH_BINDING: {
              cellWidth_ = visitor.visitOneofMessage(
                  cellWidthCase_ == 5,
                  cellWidth_,
                  other.cellWidth_);
              break;
            }
            case CELLWIDTH_NOT_SET: {
              visitor.visitOneofNotSet(cellWidthCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.cellWidthCase_ != 0) {
              cellWidthCase_ = other.cellWidthCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 34: {
                  com.google.search.now.ui.piet.ElementsProto.GridCellWidth.Builder subBuilder = null;
                  if (cellWidthCase_ == 4) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.GridCellWidth) cellWidth_).toBuilder();
                  }
                  cellWidth_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.GridCellWidth.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.GridCellWidth) cellWidth_);
                    cellWidth_ = subBuilder.buildPartial();
                  }
                  cellWidthCase_ = 4;
                  break;
                }
                case 42: {
                  com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef.Builder subBuilder = null;
                  if (cellWidthCase_ == 5) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef) cellWidth_).toBuilder();
                  }
                  cellWidth_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.GridCellWidthBindingRef) cellWidth_);
                    cellWidth_ = subBuilder.buildPartial();
                  }
                  cellWidthCase_ = 5;
                  break;
                }
                case 58: {
                  com.google.search.now.ui.piet.ElementsProto.Content.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = content_.toBuilder();
                  }
                  content_ = input.readMessage(com.google.search.now.ui.piet.ElementsProto.Content.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(content_);
                    content_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.GridCell.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.GridCell)
    private static final com.google.search.now.ui.piet.ElementsProto.GridCell DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GridCell();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.GridCell getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GridCell> PARSER;

    public static com.google.protobuf.Parser<GridCell> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GridCellWidthOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.GridCellWidth)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The width of the cell expressed as DP.
     * </pre>
     *
     * <code>optional int32 dp = 1;</code>
     */
    boolean hasDp();
    /**
     * <pre>
     * The width of the cell expressed as DP.
     * </pre>
     *
     * <code>optional int32 dp = 1;</code>
     */
    int getDp();

    /**
     * <pre>
     * The width of the cell expressed as a weight. This weight is relative to
     * the remaining width, after DP and Content were allocated.
     * For more information, see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional int32 weight = 2;</code>
     */
    boolean hasWeight();
    /**
     * <pre>
     * The width of the cell expressed as a weight. This weight is relative to
     * the remaining width, after DP and Content were allocated.
     * For more information, see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional int32 weight = 2;</code>
     */
    int getWeight();

    /**
     * <pre>
     * The width of the content, limited to Content of TextElement or
     * ImageElement. In case a different content is given to the cell,
     * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
     */
    boolean hasContentWidth();
    /**
     * <pre>
     * The width of the content, limited to Content of TextElement or
     * ImageElement. In case a different content is given to the cell,
     * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth getContentWidth();

    /**
     * <pre>
     * Whether this cell will shrink if the GridRow is too small for its contents.
     * This cell will always be less than or equal to the defined width.
     * If there are multiple collapsible cells in a row, they will shrink in order
     * from last to first (ex. the last cell will be width 0 before the cell
     * before it begins to shrink).
     * This is ignored if weight is set.
     * </pre>
     *
     * <code>optional bool is_collapsible = 4;</code>
     */
    boolean hasIsCollapsible();
    /**
     * <pre>
     * Whether this cell will shrink if the GridRow is too small for its contents.
     * This cell will always be less than or equal to the defined width.
     * If there are multiple collapsible cells in a row, they will shrink in order
     * from last to first (ex. the last cell will be width 0 before the cell
     * before it begins to shrink).
     * This is ignored if weight is set.
     * </pre>
     *
     * <code>optional bool is_collapsible = 4;</code>
     */
    boolean getIsCollapsible();

    public com.google.search.now.ui.piet.ElementsProto.GridCellWidth.WidthSpecCase getWidthSpecCase();
  }
  /**
   * <pre>
   * The width of a GridCell.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.GridCellWidth}
   */
  public  static final class GridCellWidth extends
      com.google.protobuf.GeneratedMessageLite<
          GridCellWidth, GridCellWidth.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.GridCellWidth)
      GridCellWidthOrBuilder {
    private GridCellWidth() {
    }
    /**
     * <pre>
     * An enum that indicates the width of the GridCell, in reference to its
     * content. The option of setting a GridCell width to be its content width
     * is supported only for GridCells with TextElement or ImageElement as their
     * content, in those cases, the width of the GridCell will be the width of the
     * contained element.
     * If this is set and the enclosed Element is anything other than a
     * TextElement or ImageElement,
     * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT will be raised.
     * </pre>
     *
     * Protobuf enum {@code search.now.ui.piet.GridCellWidth.ContentWidth}
     */
    public enum ContentWidth
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * Do not use. If used, this will raise
       * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT at runtime.
       * </pre>
       *
       * <code>INVALID_CONTENT_WIDTH = 0;</code>
       */
      INVALID_CONTENT_WIDTH(0),
      /**
       * <pre>
       * This cell will expand just enough to fit its content.
       * </pre>
       *
       * <code>CONTENT_WIDTH = 1;</code>
       */
      CONTENT_WIDTH(1),
      ;

      /**
       * <pre>
       * Do not use. If used, this will raise
       * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT at runtime.
       * </pre>
       *
       * <code>INVALID_CONTENT_WIDTH = 0;</code>
       */
      public static final int INVALID_CONTENT_WIDTH_VALUE = 0;
      /**
       * <pre>
       * This cell will expand just enough to fit its content.
       * </pre>
       *
       * <code>CONTENT_WIDTH = 1;</code>
       */
      public static final int CONTENT_WIDTH_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ContentWidth valueOf(int value) {
        return forNumber(value);
      }

      public static ContentWidth forNumber(int value) {
        switch (value) {
          case 0: return INVALID_CONTENT_WIDTH;
          case 1: return CONTENT_WIDTH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ContentWidth>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ContentWidth> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ContentWidth>() {
              public ContentWidth findValueByNumber(int number) {
                return ContentWidth.forNumber(number);
              }
            };

      private final int value;

      private ContentWidth(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:search.now.ui.piet.GridCellWidth.ContentWidth)
    }

    private int bitField0_;
    private int widthSpecCase_ = 0;
    private java.lang.Object widthSpec_;
    public enum WidthSpecCase
        implements com.google.protobuf.Internal.EnumLite {
      DP(1),
      WEIGHT(2),
      CONTENT_WIDTH(3),
      WIDTHSPEC_NOT_SET(0);
      private final int value;
      private WidthSpecCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WidthSpecCase valueOf(int value) {
        return forNumber(value);
      }

      public static WidthSpecCase forNumber(int value) {
        switch (value) {
          case 1: return DP;
          case 2: return WEIGHT;
          case 3: return CONTENT_WIDTH;
          case 0: return WIDTHSPEC_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public WidthSpecCase
    getWidthSpecCase() {
      return WidthSpecCase.forNumber(
          widthSpecCase_);
    }

    private void clearWidthSpec() {
      widthSpecCase_ = 0;
      widthSpec_ = null;
    }

    public static final int DP_FIELD_NUMBER = 1;
    /**
     * <pre>
     * The width of the cell expressed as DP.
     * </pre>
     *
     * <code>optional int32 dp = 1;</code>
     */
    public boolean hasDp() {
      return widthSpecCase_ == 1;
    }
    /**
     * <pre>
     * The width of the cell expressed as DP.
     * </pre>
     *
     * <code>optional int32 dp = 1;</code>
     */
    public int getDp() {
      if (widthSpecCase_ == 1) {
        return (java.lang.Integer) widthSpec_;
      }
      return 0;
    }
    /**
     * <pre>
     * The width of the cell expressed as DP.
     * </pre>
     *
     * <code>optional int32 dp = 1;</code>
     */
    private void setDp(int value) {
      widthSpecCase_ = 1;
      widthSpec_ = value;
    }
    /**
     * <pre>
     * The width of the cell expressed as DP.
     * </pre>
     *
     * <code>optional int32 dp = 1;</code>
     */
    private void clearDp() {
      if (widthSpecCase_ == 1) {
        widthSpecCase_ = 0;
        widthSpec_ = null;
      }
    }

    public static final int WEIGHT_FIELD_NUMBER = 2;
    /**
     * <pre>
     * The width of the cell expressed as a weight. This weight is relative to
     * the remaining width, after DP and Content were allocated.
     * For more information, see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional int32 weight = 2;</code>
     */
    public boolean hasWeight() {
      return widthSpecCase_ == 2;
    }
    /**
     * <pre>
     * The width of the cell expressed as a weight. This weight is relative to
     * the remaining width, after DP and Content were allocated.
     * For more information, see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional int32 weight = 2;</code>
     */
    public int getWeight() {
      if (widthSpecCase_ == 2) {
        return (java.lang.Integer) widthSpec_;
      }
      return 0;
    }
    /**
     * <pre>
     * The width of the cell expressed as a weight. This weight is relative to
     * the remaining width, after DP and Content were allocated.
     * For more information, see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional int32 weight = 2;</code>
     */
    private void setWeight(int value) {
      widthSpecCase_ = 2;
      widthSpec_ = value;
    }
    /**
     * <pre>
     * The width of the cell expressed as a weight. This weight is relative to
     * the remaining width, after DP and Content were allocated.
     * For more information, see [INTERNAL LINK].
     * </pre>
     *
     * <code>optional int32 weight = 2;</code>
     */
    private void clearWeight() {
      if (widthSpecCase_ == 2) {
        widthSpecCase_ = 0;
        widthSpec_ = null;
      }
    }

    public static final int CONTENT_WIDTH_FIELD_NUMBER = 3;
    /**
     * <pre>
     * The width of the content, limited to Content of TextElement or
     * ImageElement. In case a different content is given to the cell,
     * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
     */
    public boolean hasContentWidth() {
      return widthSpecCase_ == 3;
    }
    /**
     * <pre>
     * The width of the content, limited to Content of TextElement or
     * ImageElement. In case a different content is given to the cell,
     * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth getContentWidth() {
      if (widthSpecCase_ == 3) {
        com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth result = com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth.forNumber((java.lang.Integer) widthSpec_);
        return result == null ? com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth.INVALID_CONTENT_WIDTH : result;
      }
      return com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth.INVALID_CONTENT_WIDTH;
    }
    /**
     * <pre>
     * The width of the content, limited to Content of TextElement or
     * ImageElement. In case a different content is given to the cell,
     * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
     */
    private void setContentWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth value) {
      if (value == null) {
        throw new NullPointerException();
      }
      widthSpecCase_ = 3;
      widthSpec_ = value.getNumber();
    }
    /**
     * <pre>
     * The width of the content, limited to Content of TextElement or
     * ImageElement. In case a different content is given to the cell,
     * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
     */
    private void clearContentWidth() {
      if (widthSpecCase_ == 3) {
        widthSpecCase_ = 0;
        widthSpec_ = null;
      }
    }

    public static final int IS_COLLAPSIBLE_FIELD_NUMBER = 4;
    private boolean isCollapsible_;
    /**
     * <pre>
     * Whether this cell will shrink if the GridRow is too small for its contents.
     * This cell will always be less than or equal to the defined width.
     * If there are multiple collapsible cells in a row, they will shrink in order
     * from last to first (ex. the last cell will be width 0 before the cell
     * before it begins to shrink).
     * This is ignored if weight is set.
     * </pre>
     *
     * <code>optional bool is_collapsible = 4;</code>
     */
    public boolean hasIsCollapsible() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Whether this cell will shrink if the GridRow is too small for its contents.
     * This cell will always be less than or equal to the defined width.
     * If there are multiple collapsible cells in a row, they will shrink in order
     * from last to first (ex. the last cell will be width 0 before the cell
     * before it begins to shrink).
     * This is ignored if weight is set.
     * </pre>
     *
     * <code>optional bool is_collapsible = 4;</code>
     */
    public boolean getIsCollapsible() {
      return isCollapsible_;
    }
    /**
     * <pre>
     * Whether this cell will shrink if the GridRow is too small for its contents.
     * This cell will always be less than or equal to the defined width.
     * If there are multiple collapsible cells in a row, they will shrink in order
     * from last to first (ex. the last cell will be width 0 before the cell
     * before it begins to shrink).
     * This is ignored if weight is set.
     * </pre>
     *
     * <code>optional bool is_collapsible = 4;</code>
     */
    private void setIsCollapsible(boolean value) {
      bitField0_ |= 0x00000008;
      isCollapsible_ = value;
    }
    /**
     * <pre>
     * Whether this cell will shrink if the GridRow is too small for its contents.
     * This cell will always be less than or equal to the defined width.
     * If there are multiple collapsible cells in a row, they will shrink in order
     * from last to first (ex. the last cell will be width 0 before the cell
     * before it begins to shrink).
     * This is ignored if weight is set.
     * </pre>
     *
     * <code>optional bool is_collapsible = 4;</code>
     */
    private void clearIsCollapsible() {
      bitField0_ = (bitField0_ & ~0x00000008);
      isCollapsible_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (widthSpecCase_ == 1) {
        output.writeInt32(
            1, (int)((java.lang.Integer) widthSpec_));
      }
      if (widthSpecCase_ == 2) {
        output.writeInt32(
            2, (int)((java.lang.Integer) widthSpec_));
      }
      if (widthSpecCase_ == 3) {
        output.writeEnum(3, ((java.lang.Integer) widthSpec_));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, isCollapsible_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (widthSpecCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              1, (int)((java.lang.Integer) widthSpec_));
      }
      if (widthSpecCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              2, (int)((java.lang.Integer) widthSpec_));
      }
      if (widthSpecCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, ((java.lang.Integer) widthSpec_));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isCollapsible_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.GridCellWidth prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The width of a GridCell.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.GridCellWidth}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ElementsProto.GridCellWidth, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.GridCellWidth)
        com.google.search.now.ui.piet.ElementsProto.GridCellWidthOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.GridCellWidth.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public WidthSpecCase
          getWidthSpecCase() {
        return instance.getWidthSpecCase();
      }

      public Builder clearWidthSpec() {
        copyOnWrite();
        instance.clearWidthSpec();
        return this;
      }


      /**
       * <pre>
       * The width of the cell expressed as DP.
       * </pre>
       *
       * <code>optional int32 dp = 1;</code>
       */
      public boolean hasDp() {
        return instance.hasDp();
      }
      /**
       * <pre>
       * The width of the cell expressed as DP.
       * </pre>
       *
       * <code>optional int32 dp = 1;</code>
       */
      public int getDp() {
        return instance.getDp();
      }
      /**
       * <pre>
       * The width of the cell expressed as DP.
       * </pre>
       *
       * <code>optional int32 dp = 1;</code>
       */
      public Builder setDp(int value) {
        copyOnWrite();
        instance.setDp(value);
        return this;
      }
      /**
       * <pre>
       * The width of the cell expressed as DP.
       * </pre>
       *
       * <code>optional int32 dp = 1;</code>
       */
      public Builder clearDp() {
        copyOnWrite();
        instance.clearDp();
        return this;
      }

      /**
       * <pre>
       * The width of the cell expressed as a weight. This weight is relative to
       * the remaining width, after DP and Content were allocated.
       * For more information, see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional int32 weight = 2;</code>
       */
      public boolean hasWeight() {
        return instance.hasWeight();
      }
      /**
       * <pre>
       * The width of the cell expressed as a weight. This weight is relative to
       * the remaining width, after DP and Content were allocated.
       * For more information, see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional int32 weight = 2;</code>
       */
      public int getWeight() {
        return instance.getWeight();
      }
      /**
       * <pre>
       * The width of the cell expressed as a weight. This weight is relative to
       * the remaining width, after DP and Content were allocated.
       * For more information, see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional int32 weight = 2;</code>
       */
      public Builder setWeight(int value) {
        copyOnWrite();
        instance.setWeight(value);
        return this;
      }
      /**
       * <pre>
       * The width of the cell expressed as a weight. This weight is relative to
       * the remaining width, after DP and Content were allocated.
       * For more information, see [INTERNAL LINK].
       * </pre>
       *
       * <code>optional int32 weight = 2;</code>
       */
      public Builder clearWeight() {
        copyOnWrite();
        instance.clearWeight();
        return this;
      }

      /**
       * <pre>
       * The width of the content, limited to Content of TextElement or
       * ImageElement. In case a different content is given to the cell,
       * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
       */
      public boolean hasContentWidth() {
        return instance.hasContentWidth();
      }
      /**
       * <pre>
       * The width of the content, limited to Content of TextElement or
       * ImageElement. In case a different content is given to the cell,
       * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth getContentWidth() {
        return instance.getContentWidth();
      }
      /**
       * <pre>
       * The width of the content, limited to Content of TextElement or
       * ImageElement. In case a different content is given to the cell,
       * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
       */
      public Builder setContentWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth value) {
        copyOnWrite();
        instance.setContentWidth(value);
        return this;
      }
      /**
       * <pre>
       * The width of the content, limited to Content of TextElement or
       * ImageElement. In case a different content is given to the cell,
       * ERR_CONTENT_WIDTH_GRID_CELL_WITH_INVALID_CONTENT is raised.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth.ContentWidth content_width = 3;</code>
       */
      public Builder clearContentWidth() {
        copyOnWrite();
        instance.clearContentWidth();
        return this;
      }

      /**
       * <pre>
       * Whether this cell will shrink if the GridRow is too small for its contents.
       * This cell will always be less than or equal to the defined width.
       * If there are multiple collapsible cells in a row, they will shrink in order
       * from last to first (ex. the last cell will be width 0 before the cell
       * before it begins to shrink).
       * This is ignored if weight is set.
       * </pre>
       *
       * <code>optional bool is_collapsible = 4;</code>
       */
      public boolean hasIsCollapsible() {
        return instance.hasIsCollapsible();
      }
      /**
       * <pre>
       * Whether this cell will shrink if the GridRow is too small for its contents.
       * This cell will always be less than or equal to the defined width.
       * If there are multiple collapsible cells in a row, they will shrink in order
       * from last to first (ex. the last cell will be width 0 before the cell
       * before it begins to shrink).
       * This is ignored if weight is set.
       * </pre>
       *
       * <code>optional bool is_collapsible = 4;</code>
       */
      public boolean getIsCollapsible() {
        return instance.getIsCollapsible();
      }
      /**
       * <pre>
       * Whether this cell will shrink if the GridRow is too small for its contents.
       * This cell will always be less than or equal to the defined width.
       * If there are multiple collapsible cells in a row, they will shrink in order
       * from last to first (ex. the last cell will be width 0 before the cell
       * before it begins to shrink).
       * This is ignored if weight is set.
       * </pre>
       *
       * <code>optional bool is_collapsible = 4;</code>
       */
      public Builder setIsCollapsible(boolean value) {
        copyOnWrite();
        instance.setIsCollapsible(value);
        return this;
      }
      /**
       * <pre>
       * Whether this cell will shrink if the GridRow is too small for its contents.
       * This cell will always be less than or equal to the defined width.
       * If there are multiple collapsible cells in a row, they will shrink in order
       * from last to first (ex. the last cell will be width 0 before the cell
       * before it begins to shrink).
       * This is ignored if weight is set.
       * </pre>
       *
       * <code>optional bool is_collapsible = 4;</code>
       */
      public Builder clearIsCollapsible() {
        copyOnWrite();
        instance.clearIsCollapsible();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.GridCellWidth)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.GridCellWidth();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.GridCellWidth other = (com.google.search.now.ui.piet.ElementsProto.GridCellWidth) arg1;
          isCollapsible_ = visitor.visitBoolean(
              hasIsCollapsible(), isCollapsible_,
              other.hasIsCollapsible(), other.isCollapsible_);
          switch (other.getWidthSpecCase()) {
            case DP: {
              widthSpec_ = visitor.visitOneofInt(
                  widthSpecCase_ == 1, widthSpec_, other.widthSpec_);
              break;
            }
            case WEIGHT: {
              widthSpec_ = visitor.visitOneofInt(
                  widthSpecCase_ == 2, widthSpec_, other.widthSpec_);
              break;
            }
            case CONTENT_WIDTH: {
              widthSpec_ = visitor.visitOneofInt(
                 widthSpecCase_ == 3, widthSpec_, other.widthSpec_);
              break;
            }
            case WIDTHSPEC_NOT_SET: {
              visitor.visitOneofNotSet(widthSpecCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.widthSpecCase_ != 0) {
              widthSpecCase_ = other.widthSpecCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  widthSpecCase_ = 1;
                  widthSpec_ = input.readInt32();
                  break;
                }
                case 16: {
                  widthSpecCase_ = 2;
                  widthSpec_ = input.readInt32();
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth value = com.google.search.now.ui.piet.ElementsProto.GridCellWidth.ContentWidth.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(3, rawValue);
                  } else {
                    widthSpecCase_ = 3;
                    widthSpec_ = rawValue;
                  }
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000008;
                  isCollapsible_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.GridCellWidth.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.GridCellWidth)
    private static final com.google.search.now.ui.piet.ElementsProto.GridCellWidth DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GridCellWidth();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.GridCellWidth getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GridCellWidth> PARSER;

    public static com.google.protobuf.Parser<GridCellWidth> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ElementListOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.ElementList)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                ElementList, ElementList.Builder> {

    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> 
        getContentsList();
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.Content getContents(int index);
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    int getContentsCount();

    /**
     * <pre>
     * Styles applied to this ElementList.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasStyleReferences();
    /**
     * <pre>
     * Styles applied to this ElementList.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences();
  }
  /**
   * <pre>
   * A vertically-oriented top-to-bottom list of Contents.
   * Without explicit dimensions or constraints by the parent, this container is
   * as wide as its largest child, and as tall as the sum of its children.
   * Cell height is always the size of the child Element, and vertical gravity is
   * ignored. Cell width defaults to the width of the ElementList.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.ElementList}
   */
  public  static final class ElementList extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        ElementList, ElementList.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.ElementList)
      ElementListOrBuilder {
    private ElementList() {
      contents_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int CONTENTS_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.ProtobufList<com.google.search.now.ui.piet.ElementsProto.Content> contents_;
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    public java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> getContentsList() {
      return contents_;
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    public java.util.List<? extends com.google.search.now.ui.piet.ElementsProto.ContentOrBuilder> 
        getContentsOrBuilderList() {
      return contents_;
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    public int getContentsCount() {
      return contents_.size();
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.Content getContents(int index) {
      return contents_.get(index);
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.ContentOrBuilder getContentsOrBuilder(
        int index) {
      return contents_.get(index);
    }
    private void ensureContentsIsMutable() {
      if (!contents_.isModifiable()) {
        contents_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(contents_);
       }
    }

    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void setContents(
        int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureContentsIsMutable();
      contents_.set(index, value);
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void setContents(
        int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureContentsIsMutable();
      contents_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void addContents(com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureContentsIsMutable();
      contents_.add(value);
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void addContents(
        int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureContentsIsMutable();
      contents_.add(index, value);
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void addContents(
        com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureContentsIsMutable();
      contents_.add(builderForValue.build());
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void addContents(
        int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureContentsIsMutable();
      contents_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void addAllContents(
        java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.Content> values) {
      ensureContentsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, contents_);
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void clearContents() {
      contents_ = emptyProtobufList();
    }
    /**
     * <pre>
     * The list items to be laid out vertically.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
     */
    private void removeContents(int index) {
      ensureContentsIsMutable();
      contents_.remove(index);
    }

    public static final int STYLE_REFERENCES_FIELD_NUMBER = 3;
    private com.google.search.now.ui.piet.StylesProto.StyleIdsStack styleReferences_;
    /**
     * <pre>
     * Styles applied to this ElementList.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasStyleReferences() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Styles applied to this ElementList.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
      return styleReferences_ == null ? com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance() : styleReferences_;
    }
    /**
     * <pre>
     * Styles applied to this ElementList.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
     */
    private void setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (value == null) {
        throw new NullPointerException();
      }
      styleReferences_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Styles applied to this ElementList.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
     */
    private void setStyleReferences(
        com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
      styleReferences_ = builderForValue.build();
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Styles applied to this ElementList.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
     */
    private void mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (styleReferences_ != null &&
          styleReferences_ != com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance()) {
        styleReferences_ =
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.newBuilder(styleReferences_).mergeFrom(value).buildPartial();
      } else {
        styleReferences_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Styles applied to this ElementList.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
     */
    private void clearStyleReferences() {  styleReferences_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.ElementList, com.google.search.now.ui.piet.ElementsProto.ElementList.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(3, getStyleReferences());
      }
      for (int i = 0; i < contents_.size(); i++) {
        output.writeMessage(6, contents_.get(i));
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getStyleReferences());
      }
      for (int i = 0; i < contents_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, contents_.get(i));
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.ElementList prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A vertically-oriented top-to-bottom list of Contents.
     * Without explicit dimensions or constraints by the parent, this container is
     * as wide as its largest child, and as tall as the sum of its children.
     * Cell height is always the size of the child Element, and vertical gravity is
     * ignored. Cell width defaults to the width of the ElementList.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.ElementList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.ElementList, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.ElementList)
        com.google.search.now.ui.piet.ElementsProto.ElementListOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.ElementList.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> getContentsList() {
        return java.util.Collections.unmodifiableList(
            instance.getContentsList());
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public int getContentsCount() {
        return instance.getContentsCount();
      }/**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.Content getContents(int index) {
        return instance.getContents(index);
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder setContents(
          int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.setContents(index, value);
        return this;
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder setContents(
          int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.setContents(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder addContents(com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.addContents(value);
        return this;
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder addContents(
          int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.addContents(index, value);
        return this;
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder addContents(
          com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.addContents(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder addContents(
          int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.addContents(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder addAllContents(
          java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.Content> values) {
        copyOnWrite();
        instance.addAllContents(values);
        return this;
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder clearContents() {
        copyOnWrite();
        instance.clearContents();
        return this;
      }
      /**
       * <pre>
       * The list items to be laid out vertically.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 6;</code>
       */
      public Builder removeContents(int index) {
        copyOnWrite();
        instance.removeContents(index);
        return this;
      }

      /**
       * <pre>
       * Styles applied to this ElementList.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasStyleReferences() {
        return instance.hasStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this ElementList.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
        return instance.getStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this ElementList.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.setStyleReferences(value);
        return this;
        }
      /**
       * <pre>
       * Styles applied to this ElementList.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
        copyOnWrite();
        instance.setStyleReferences(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this ElementList.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.mergeStyleReferences(value);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this ElementList.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearStyleReferences() {  copyOnWrite();
        instance.clearStyleReferences();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.ElementList)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.ElementList();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          for (int i = 0; i < getContentsCount(); i++) {
            if (!getContents(i).isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasStyleReferences()) {
            if (!getStyleReferences().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          contents_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.ElementList other = (com.google.search.now.ui.piet.ElementsProto.ElementList) arg1;
          contents_= visitor.visitList(contents_, other.contents_);
          styleReferences_ = visitor.visitMessage(styleReferences_, other.styleReferences_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 26: {
                  com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = styleReferences_.toBuilder();
                  }
                  styleReferences_ = input.readMessage(com.google.search.now.ui.piet.StylesProto.StyleIdsStack.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(styleReferences_);
                    styleReferences_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
                case 50: {
                  if (!contents_.isModifiable()) {
                    contents_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(contents_);
                  }
                  contents_.add(
                      input.readMessage(com.google.search.now.ui.piet.ElementsProto.Content.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.ElementList.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.ElementList)
    private static final com.google.search.now.ui.piet.ElementsProto.ElementList DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ElementList();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.ElementList getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ElementList> PARSER;

    public static com.google.protobuf.Parser<ElementList> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ElementStackOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.ElementStack)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                ElementStack, ElementStack.Builder> {

    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> 
        getContentsList();
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.Content getContents(int index);
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    int getContentsCount();
  }
  /**
   * <pre>
   * A stacked (overlaid) bottom-to-top list of Contents.
   * Children can be smaller than the ElementStack and float around within it
   * subject to their horizontal and vertical gravity.
   * Without explicit dimensions or constraints by the parent, this container is
   * as large as its largest child.
   * By default, children are the size of their content.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.ElementStack}
   */
  public  static final class ElementStack extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        ElementStack, ElementStack.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.ElementStack)
      ElementStackOrBuilder {
    private ElementStack() {
      contents_ = emptyProtobufList();
    }
    public static final int CONTENTS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.google.search.now.ui.piet.ElementsProto.Content> contents_;
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    public java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> getContentsList() {
      return contents_;
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    public java.util.List<? extends com.google.search.now.ui.piet.ElementsProto.ContentOrBuilder> 
        getContentsOrBuilderList() {
      return contents_;
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    public int getContentsCount() {
      return contents_.size();
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.Content getContents(int index) {
      return contents_.get(index);
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.ContentOrBuilder getContentsOrBuilder(
        int index) {
      return contents_.get(index);
    }
    private void ensureContentsIsMutable() {
      if (!contents_.isModifiable()) {
        contents_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(contents_);
       }
    }

    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void setContents(
        int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureContentsIsMutable();
      contents_.set(index, value);
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void setContents(
        int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureContentsIsMutable();
      contents_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void addContents(com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureContentsIsMutable();
      contents_.add(value);
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void addContents(
        int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureContentsIsMutable();
      contents_.add(index, value);
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void addContents(
        com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureContentsIsMutable();
      contents_.add(builderForValue.build());
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void addContents(
        int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
      ensureContentsIsMutable();
      contents_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void addAllContents(
        java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.Content> values) {
      ensureContentsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, contents_);
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void clearContents() {
      contents_ = emptyProtobufList();
    }
    /**
     * <pre>
     * The items to be stacked from bottom to top.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
     */
    private void removeContents(int index) {
      ensureContentsIsMutable();
      contents_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.ElementStack, com.google.search.now.ui.piet.ElementsProto.ElementStack.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      for (int i = 0; i < contents_.size(); i++) {
        output.writeMessage(1, contents_.get(i));
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < contents_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, contents_.get(i));
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ElementStack parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.ElementStack prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A stacked (overlaid) bottom-to-top list of Contents.
     * Children can be smaller than the ElementStack and float around within it
     * subject to their horizontal and vertical gravity.
     * Without explicit dimensions or constraints by the parent, this container is
     * as large as its largest child.
     * By default, children are the size of their content.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.ElementStack}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.ElementStack, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.ElementStack)
        com.google.search.now.ui.piet.ElementsProto.ElementStackOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.ElementStack.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public java.util.List<com.google.search.now.ui.piet.ElementsProto.Content> getContentsList() {
        return java.util.Collections.unmodifiableList(
            instance.getContentsList());
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public int getContentsCount() {
        return instance.getContentsCount();
      }/**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.Content getContents(int index) {
        return instance.getContents(index);
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder setContents(
          int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.setContents(index, value);
        return this;
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder setContents(
          int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.setContents(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder addContents(com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.addContents(value);
        return this;
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder addContents(
          int index, com.google.search.now.ui.piet.ElementsProto.Content value) {
        copyOnWrite();
        instance.addContents(index, value);
        return this;
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder addContents(
          com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.addContents(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder addContents(
          int index, com.google.search.now.ui.piet.ElementsProto.Content.Builder builderForValue) {
        copyOnWrite();
        instance.addContents(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder addAllContents(
          java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.Content> values) {
        copyOnWrite();
        instance.addAllContents(values);
        return this;
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder clearContents() {
        copyOnWrite();
        instance.clearContents();
        return this;
      }
      /**
       * <pre>
       * The items to be stacked from bottom to top.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.Content contents = 1;</code>
       */
      public Builder removeContents(int index) {
        copyOnWrite();
        instance.removeContents(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.ElementStack)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.ElementStack();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          for (int i = 0; i < getContentsCount(); i++) {
            if (!getContents(i).isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          contents_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.ElementStack other = (com.google.search.now.ui.piet.ElementsProto.ElementStack) arg1;
          contents_= visitor.visitList(contents_, other.contents_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!contents_.isModifiable()) {
                    contents_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(contents_);
                  }
                  contents_.add(
                      input.readMessage(com.google.search.now.ui.piet.ElementsProto.Content.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.ElementStack.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.ElementStack)
    private static final com.google.search.now.ui.piet.ElementsProto.ElementStack DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ElementStack();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.ElementStack getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ElementStack> PARSER;

    public static com.google.protobuf.Parser<ElementStack> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CustomElementOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.CustomElement)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                CustomElement, CustomElement.Builder> {

    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
     */
    boolean hasCustomElementData();
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.CustomElementData getCustomElementData();

    /**
     * <pre>
     * The binding to the BindingValue for a CustomElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
     */
    boolean hasCustomBinding();
    /**
     * <pre>
     * The binding to the BindingValue for a CustomElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef getCustomBinding();

    /**
     * <pre>
     * Styles applied to this CustomElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasStyleReferences();
    /**
     * <pre>
     * Styles applied to this CustomElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences();

    public com.google.search.now.ui.piet.ElementsProto.CustomElement.ContentCase getContentCase();
  }
  /**
   * <pre>
   * A custom view that Piet knows nothing about. Servers can use this message to
   * populate a custom proto extension, which Piet passes along to the Host for
   * rendering. The Host is expected to be able to interpret and render this view
   * and return to Piet, which then simply places it within the current view
   * hierarchy at the proper position. If no renderer for this CustomElement can
   * be found at runtime, ERR_CUSTOM_ELEMENT_RENDERER_MISSING is raised.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.CustomElement}
   */
  public  static final class CustomElement extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        CustomElement, CustomElement.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.CustomElement)
      CustomElementOrBuilder {
    private CustomElement() {
    }
    private int bitField0_;
    private int contentCase_ = 0;
    private java.lang.Object content_;
    public enum ContentCase
        implements com.google.protobuf.Internal.EnumLite {
      CUSTOM_ELEMENT_DATA(3),
      CUSTOM_BINDING(2),
      CONTENT_NOT_SET(0);
      private final int value;
      private ContentCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ContentCase valueOf(int value) {
        return forNumber(value);
      }

      public static ContentCase forNumber(int value) {
        switch (value) {
          case 3: return CUSTOM_ELEMENT_DATA;
          case 2: return CUSTOM_BINDING;
          case 0: return CONTENT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ContentCase
    getContentCase() {
      return ContentCase.forNumber(
          contentCase_);
    }

    private void clearContent() {
      contentCase_ = 0;
      content_ = null;
    }

    public static final int CUSTOM_ELEMENT_DATA_FIELD_NUMBER = 3;
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
     */
    public boolean hasCustomElementData() {
      return contentCase_ == 3;
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.CustomElementData getCustomElementData() {
      if (contentCase_ == 3) {
         return (com.google.search.now.ui.piet.ElementsProto.CustomElementData) content_;
      }
      return com.google.search.now.ui.piet.ElementsProto.CustomElementData.getDefaultInstance();
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
     */
    private void setCustomElementData(com.google.search.now.ui.piet.ElementsProto.CustomElementData value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
     */
    private void setCustomElementData(
        com.google.search.now.ui.piet.ElementsProto.CustomElementData.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
     */
    private void mergeCustomElementData(com.google.search.now.ui.piet.ElementsProto.CustomElementData value) {
      if (contentCase_ == 3 &&
          content_ != com.google.search.now.ui.piet.ElementsProto.CustomElementData.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.ElementsProto.CustomElementData.newBuilder((com.google.search.now.ui.piet.ElementsProto.CustomElementData) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
     */
    private void clearCustomElementData() {
      if (contentCase_ == 3) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int CUSTOM_BINDING_FIELD_NUMBER = 2;
    /**
     * <pre>
     * The binding to the BindingValue for a CustomElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
     */
    public boolean hasCustomBinding() {
      return contentCase_ == 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a CustomElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef getCustomBinding() {
      if (contentCase_ == 2) {
         return (com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef) content_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * The binding to the BindingValue for a CustomElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
     */
    private void setCustomBinding(com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a CustomElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
     */
    private void setCustomBinding(
        com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a CustomElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
     */
    private void mergeCustomBinding(com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef value) {
      if (contentCase_ == 2 &&
          content_ != com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a CustomElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
     */
    private void clearCustomBinding() {
      if (contentCase_ == 2) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int STYLE_REFERENCES_FIELD_NUMBER = 1;
    private com.google.search.now.ui.piet.StylesProto.StyleIdsStack styleReferences_;
    /**
     * <pre>
     * Styles applied to this CustomElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasStyleReferences() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Styles applied to this CustomElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
      return styleReferences_ == null ? com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance() : styleReferences_;
    }
    /**
     * <pre>
     * Styles applied to this CustomElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (value == null) {
        throw new NullPointerException();
      }
      styleReferences_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <pre>
     * Styles applied to this CustomElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void setStyleReferences(
        com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
      styleReferences_ = builderForValue.build();
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Styles applied to this CustomElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
      if (styleReferences_ != null &&
          styleReferences_ != com.google.search.now.ui.piet.StylesProto.StyleIdsStack.getDefaultInstance()) {
        styleReferences_ =
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.newBuilder(styleReferences_).mergeFrom(value).buildPartial();
      } else {
        styleReferences_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Styles applied to this CustomElement. If any style_ids cannot be found,
     * ERR_MISSING_STYLES is raised.
     * Deprecated: use the StyleIdsStack on Element instead.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
     */
    private void clearStyleReferences() {  styleReferences_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.CustomElement, com.google.search.now.ui.piet.ElementsProto.CustomElement.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(1, getStyleReferences());
      }
      if (contentCase_ == 2) {
        output.writeMessage(2, (com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef) content_);
      }
      if (contentCase_ == 3) {
        output.writeMessage(3, (com.google.search.now.ui.piet.ElementsProto.CustomElementData) content_);
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStyleReferences());
      }
      if (contentCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef) content_);
      }
      if (contentCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.search.now.ui.piet.ElementsProto.CustomElementData) content_);
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.CustomElement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A custom view that Piet knows nothing about. Servers can use this message to
     * populate a custom proto extension, which Piet passes along to the Host for
     * rendering. The Host is expected to be able to interpret and render this view
     * and return to Piet, which then simply places it within the current view
     * hierarchy at the proper position. If no renderer for this CustomElement can
     * be found at runtime, ERR_CUSTOM_ELEMENT_RENDERER_MISSING is raised.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.CustomElement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.CustomElement, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.CustomElement)
        com.google.search.now.ui.piet.ElementsProto.CustomElementOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.CustomElement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ContentCase
          getContentCase() {
        return instance.getContentCase();
      }

      public Builder clearContent() {
        copyOnWrite();
        instance.clearContent();
        return this;
      }


      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
       */
      public boolean hasCustomElementData() {
        return instance.hasCustomElementData();
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.CustomElementData getCustomElementData() {
        return instance.getCustomElementData();
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
       */
      public Builder setCustomElementData(com.google.search.now.ui.piet.ElementsProto.CustomElementData value) {
        copyOnWrite();
        instance.setCustomElementData(value);
        return this;
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
       */
      public Builder setCustomElementData(
          com.google.search.now.ui.piet.ElementsProto.CustomElementData.Builder builderForValue) {
        copyOnWrite();
        instance.setCustomElementData(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
       */
      public Builder mergeCustomElementData(com.google.search.now.ui.piet.ElementsProto.CustomElementData value) {
        copyOnWrite();
        instance.mergeCustomElementData(value);
        return this;
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 3;</code>
       */
      public Builder clearCustomElementData() {
        copyOnWrite();
        instance.clearCustomElementData();
        return this;
      }

      /**
       * <pre>
       * The binding to the BindingValue for a CustomElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
       */
      public boolean hasCustomBinding() {
        return instance.hasCustomBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for a CustomElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef getCustomBinding() {
        return instance.getCustomBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for a CustomElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
       */
      public Builder setCustomBinding(com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef value) {
        copyOnWrite();
        instance.setCustomBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a CustomElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
       */
      public Builder setCustomBinding(
          com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setCustomBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a CustomElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
       */
      public Builder mergeCustomBinding(com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef value) {
        copyOnWrite();
        instance.mergeCustomBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a CustomElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomBindingRef custom_binding = 2;</code>
       */
      public Builder clearCustomBinding() {
        copyOnWrite();
        instance.clearCustomBinding();
        return this;
      }

      /**
       * <pre>
       * Styles applied to this CustomElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasStyleReferences() {
        return instance.hasStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this CustomElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.search.now.ui.piet.StylesProto.StyleIdsStack getStyleReferences() {
        return instance.getStyleReferences();
      }
      /**
       * <pre>
       * Styles applied to this CustomElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.setStyleReferences(value);
        return this;
        }
      /**
       * <pre>
       * Styles applied to this CustomElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStyleReferences(
          com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder builderForValue) {
        copyOnWrite();
        instance.setStyleReferences(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this CustomElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeStyleReferences(com.google.search.now.ui.piet.StylesProto.StyleIdsStack value) {
        copyOnWrite();
        instance.mergeStyleReferences(value);
        return this;
      }
      /**
       * <pre>
       * Styles applied to this CustomElement. If any style_ids cannot be found,
       * ERR_MISSING_STYLES is raised.
       * Deprecated: use the StyleIdsStack on Element instead.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.StyleIdsStack style_references = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearStyleReferences() {  copyOnWrite();
        instance.clearStyleReferences();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.CustomElement)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.CustomElement();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasCustomElementData()) {
            if (!getCustomElementData().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasStyleReferences()) {
            if (!getStyleReferences().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.CustomElement other = (com.google.search.now.ui.piet.ElementsProto.CustomElement) arg1;
          styleReferences_ = visitor.visitMessage(styleReferences_, other.styleReferences_);
          switch (other.getContentCase()) {
            case CUSTOM_ELEMENT_DATA: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 3,
                  content_,
                  other.content_);
              break;
            }
            case CUSTOM_BINDING: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 2,
                  content_,
                  other.content_);
              break;
            }
            case CONTENT_NOT_SET: {
              visitor.visitOneofNotSet(contentCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.contentCase_ != 0) {
              contentCase_ = other.contentCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.StylesProto.StyleIdsStack.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    subBuilder = styleReferences_.toBuilder();
                  }
                  styleReferences_ = input.readMessage(com.google.search.now.ui.piet.StylesProto.StyleIdsStack.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(styleReferences_);
                    styleReferences_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000004;
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef.Builder subBuilder = null;
                  if (contentCase_ == 2) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.CustomBindingRef) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 2;
                  break;
                }
                case 26: {
                  com.google.search.now.ui.piet.ElementsProto.CustomElementData.Builder subBuilder = null;
                  if (contentCase_ == 3) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.CustomElementData) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.CustomElementData.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.CustomElementData) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 3;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.CustomElement.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.CustomElement)
    private static final com.google.search.now.ui.piet.ElementsProto.CustomElement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CustomElement();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.CustomElement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CustomElement> PARSER;

    public static com.google.protobuf.Parser<CustomElement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CustomElementDataOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.CustomElementData)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                CustomElementData, CustomElementData.Builder> {
  }
  /**
   * <pre>
   * Data to be displayed in a CustomElement. Clients using Piet should add
   * extensions to this proto to pass their custom data to CustomElements.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.CustomElementData}
   */
  public  static final class CustomElementData extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        CustomElementData, CustomElementData.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.CustomElementData)
      CustomElementDataOrBuilder {
    private CustomElementData() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.CustomElementData, com.google.search.now.ui.piet.ElementsProto.CustomElementData.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.CustomElementData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data to CustomElements.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.CustomElementData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.CustomElementData, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.CustomElementData)
        com.google.search.now.ui.piet.ElementsProto.CustomElementDataOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.CustomElementData.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.CustomElementData)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.CustomElementData();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.CustomElementData other = (com.google.search.now.ui.piet.ElementsProto.CustomElementData) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.CustomElementData.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.CustomElementData)
    private static final com.google.search.now.ui.piet.ElementsProto.CustomElementData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CustomElementData();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.CustomElementData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CustomElementData> PARSER;

    public static com.google.protobuf.Parser<CustomElementData> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ModuleElementOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.ModuleElement)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                ModuleElement, ModuleElement.Builder> {

    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
     */
    boolean hasModuleElementData();
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.ModuleElementData getModuleElementData();

    /**
     * <pre>
     * The binding to the BindingValue for a ModuleElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
     */
    boolean hasModuleBinding();
    /**
     * <pre>
     * The binding to the BindingValue for a ModuleElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
     */
    com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef getModuleBinding();

    public com.google.search.now.ui.piet.ElementsProto.ModuleElement.ContentCase getContentCase();
  }
  /**
   * <pre>
   * A view that is implemented by a secondary (non-Core) Piet Module. Not all
   * Piet Elements are useful to all clients/servers, so only the basic ones are
   * included in Piet Core. Common shareable elements can be implemented in
   * secondary Piet Modules, which are optional modules that can be included in or
   * excluded from Piet-based apps on an as-needed basis.
   * ModuleElements work similar to CustomElements, with the only difference being
   * that CustomElements are rendered by non-Piet code, while ModuleElements are
   * rendered by secondary Piet Modules.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.ModuleElement}
   */
  public  static final class ModuleElement extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        ModuleElement, ModuleElement.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.ModuleElement)
      ModuleElementOrBuilder {
    private ModuleElement() {
    }
    private int bitField0_;
    private int contentCase_ = 0;
    private java.lang.Object content_;
    public enum ContentCase
        implements com.google.protobuf.Internal.EnumLite {
      MODULE_ELEMENT_DATA(3),
      MODULE_BINDING(2),
      CONTENT_NOT_SET(0);
      private final int value;
      private ContentCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ContentCase valueOf(int value) {
        return forNumber(value);
      }

      public static ContentCase forNumber(int value) {
        switch (value) {
          case 3: return MODULE_ELEMENT_DATA;
          case 2: return MODULE_BINDING;
          case 0: return CONTENT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ContentCase
    getContentCase() {
      return ContentCase.forNumber(
          contentCase_);
    }

    private void clearContent() {
      contentCase_ = 0;
      content_ = null;
    }

    public static final int MODULE_ELEMENT_DATA_FIELD_NUMBER = 3;
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
     */
    public boolean hasModuleElementData() {
      return contentCase_ == 3;
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.ModuleElementData getModuleElementData() {
      if (contentCase_ == 3) {
         return (com.google.search.now.ui.piet.ElementsProto.ModuleElementData) content_;
      }
      return com.google.search.now.ui.piet.ElementsProto.ModuleElementData.getDefaultInstance();
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
     */
    private void setModuleElementData(com.google.search.now.ui.piet.ElementsProto.ModuleElementData value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
     */
    private void setModuleElementData(
        com.google.search.now.ui.piet.ElementsProto.ModuleElementData.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
     */
    private void mergeModuleElementData(com.google.search.now.ui.piet.ElementsProto.ModuleElementData value) {
      if (contentCase_ == 3 &&
          content_ != com.google.search.now.ui.piet.ElementsProto.ModuleElementData.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.ElementsProto.ModuleElementData.newBuilder((com.google.search.now.ui.piet.ElementsProto.ModuleElementData) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 3;
    }
    /**
     * <pre>
     * The data to be displayed.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
     */
    private void clearModuleElementData() {
      if (contentCase_ == 3) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public static final int MODULE_BINDING_FIELD_NUMBER = 2;
    /**
     * <pre>
     * The binding to the BindingValue for a ModuleElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
     */
    public boolean hasModuleBinding() {
      return contentCase_ == 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ModuleElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
     */
    public com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef getModuleBinding() {
      if (contentCase_ == 2) {
         return (com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef) content_;
      }
      return com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef.getDefaultInstance();
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ModuleElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
     */
    private void setModuleBinding(com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef value) {
      if (value == null) {
        throw new NullPointerException();
      }
      content_ = value;
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ModuleElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
     */
    private void setModuleBinding(
        com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef.Builder builderForValue) {
      content_ = builderForValue.build();
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ModuleElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
     */
    private void mergeModuleBinding(com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef value) {
      if (contentCase_ == 2 &&
          content_ != com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef.getDefaultInstance()) {
        content_ = com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef.newBuilder((com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef) content_)
            .mergeFrom(value).buildPartial();
      } else {
        content_ = value;
      }
      contentCase_ = 2;
    }
    /**
     * <pre>
     * The binding to the BindingValue for a ModuleElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
     */
    private void clearModuleBinding() {
      if (contentCase_ == 2) {
        contentCase_ = 0;
        content_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.ModuleElement, com.google.search.now.ui.piet.ElementsProto.ModuleElement.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (contentCase_ == 2) {
        output.writeMessage(2, (com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef) content_);
      }
      if (contentCase_ == 3) {
        output.writeMessage(3, (com.google.search.now.ui.piet.ElementsProto.ModuleElementData) content_);
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (contentCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef) content_);
      }
      if (contentCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.search.now.ui.piet.ElementsProto.ModuleElementData) content_);
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.ModuleElement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A view that is implemented by a secondary (non-Core) Piet Module. Not all
     * Piet Elements are useful to all clients/servers, so only the basic ones are
     * included in Piet Core. Common shareable elements can be implemented in
     * secondary Piet Modules, which are optional modules that can be included in or
     * excluded from Piet-based apps on an as-needed basis.
     * ModuleElements work similar to CustomElements, with the only difference being
     * that CustomElements are rendered by non-Piet code, while ModuleElements are
     * rendered by secondary Piet Modules.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.ModuleElement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.ModuleElement, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.ModuleElement)
        com.google.search.now.ui.piet.ElementsProto.ModuleElementOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.ModuleElement.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ContentCase
          getContentCase() {
        return instance.getContentCase();
      }

      public Builder clearContent() {
        copyOnWrite();
        instance.clearContent();
        return this;
      }


      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
       */
      public boolean hasModuleElementData() {
        return instance.hasModuleElementData();
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.ModuleElementData getModuleElementData() {
        return instance.getModuleElementData();
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
       */
      public Builder setModuleElementData(com.google.search.now.ui.piet.ElementsProto.ModuleElementData value) {
        copyOnWrite();
        instance.setModuleElementData(value);
        return this;
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
       */
      public Builder setModuleElementData(
          com.google.search.now.ui.piet.ElementsProto.ModuleElementData.Builder builderForValue) {
        copyOnWrite();
        instance.setModuleElementData(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
       */
      public Builder mergeModuleElementData(com.google.search.now.ui.piet.ElementsProto.ModuleElementData value) {
        copyOnWrite();
        instance.mergeModuleElementData(value);
        return this;
      }
      /**
       * <pre>
       * The data to be displayed.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleElementData module_element_data = 3;</code>
       */
      public Builder clearModuleElementData() {
        copyOnWrite();
        instance.clearModuleElementData();
        return this;
      }

      /**
       * <pre>
       * The binding to the BindingValue for a ModuleElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
       */
      public boolean hasModuleBinding() {
        return instance.hasModuleBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ModuleElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
       */
      public com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef getModuleBinding() {
        return instance.getModuleBinding();
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ModuleElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
       */
      public Builder setModuleBinding(com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef value) {
        copyOnWrite();
        instance.setModuleBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ModuleElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
       */
      public Builder setModuleBinding(
          com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setModuleBinding(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ModuleElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
       */
      public Builder mergeModuleBinding(com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef value) {
        copyOnWrite();
        instance.mergeModuleBinding(value);
        return this;
      }
      /**
       * <pre>
       * The binding to the BindingValue for a ModuleElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ModuleBindingRef module_binding = 2;</code>
       */
      public Builder clearModuleBinding() {
        copyOnWrite();
        instance.clearModuleBinding();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.ModuleElement)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.ModuleElement();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasModuleElementData()) {
            if (!getModuleElementData().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.ModuleElement other = (com.google.search.now.ui.piet.ElementsProto.ModuleElement) arg1;
          switch (other.getContentCase()) {
            case MODULE_ELEMENT_DATA: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 3,
                  content_,
                  other.content_);
              break;
            }
            case MODULE_BINDING: {
              content_ = visitor.visitOneofMessage(
                  contentCase_ == 2,
                  content_,
                  other.content_);
              break;
            }
            case CONTENT_NOT_SET: {
              visitor.visitOneofNotSet(contentCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.contentCase_ != 0) {
              contentCase_ = other.contentCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef.Builder subBuilder = null;
                  if (contentCase_ == 2) {
                    subBuilder = ((com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.BindingRefsProto.ModuleBindingRef) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 2;
                  break;
                }
                case 26: {
                  com.google.search.now.ui.piet.ElementsProto.ModuleElementData.Builder subBuilder = null;
                  if (contentCase_ == 3) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.ModuleElementData) content_).toBuilder();
                  }
                  content_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.ModuleElementData.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.ModuleElementData) content_);
                    content_ = subBuilder.buildPartial();
                  }
                  contentCase_ = 3;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.ModuleElement.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.ModuleElement)
    private static final com.google.search.now.ui.piet.ElementsProto.ModuleElement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ModuleElement();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.ModuleElement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ModuleElement> PARSER;

    public static com.google.protobuf.Parser<ModuleElement> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ModuleElementDataOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.ModuleElementData)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                ModuleElementData, ModuleElementData.Builder> {
  }
  /**
   * <pre>
   * Data to be displayed in a ModuleElement. Piet Modules should add extensions
   * to this proto to pass their custom data to ModuleElements.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.ModuleElementData}
   */
  public  static final class ModuleElementData extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        ModuleElementData, ModuleElementData.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.ModuleElementData)
      ModuleElementDataOrBuilder {
    private ModuleElementData() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.ModuleElementData, com.google.search.now.ui.piet.ElementsProto.ModuleElementData.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.ModuleElementData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Data to be displayed in a ModuleElement. Piet Modules should add extensions
     * to this proto to pass their custom data to ModuleElements.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.ModuleElementData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.ModuleElementData, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.ModuleElementData)
        com.google.search.now.ui.piet.ElementsProto.ModuleElementDataOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.ModuleElementData.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.ModuleElementData)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.ModuleElementData();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.ModuleElementData other = (com.google.search.now.ui.piet.ElementsProto.ModuleElementData) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.ModuleElementData.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.ModuleElementData)
    private static final com.google.search.now.ui.piet.ElementsProto.ModuleElementData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ModuleElementData();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.ModuleElementData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ModuleElementData> PARSER;

    public static com.google.protobuf.Parser<ModuleElementData> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TemplateInvocationOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.TemplateInvocation)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                TemplateInvocation, TemplateInvocation.Builder> {

    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    boolean hasTemplateId();
    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    java.lang.String getTemplateId();
    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getTemplateIdBytes();

    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    java.util.List<com.google.search.now.ui.piet.ElementsProto.BindingContext> 
        getBindingContextsList();
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.BindingContext getBindingContexts(int index);
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    int getBindingContextsCount();
  }
  /**
   * <pre>
   * A template can be used to instantiate a single instance, or a list of
   * instances at once: each of these is termed a TemplateInvocation. One instance
   * is created for each `binding_context` provided.
   * The types of objects instantiated by the template are determined by the
   * element that holds the invocation. For example, an invocation from an
   * ElementList will create one or more cells in that list. Invocation from a
   * GridCell will create one or more GridCells.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.TemplateInvocation}
   */
  public  static final class TemplateInvocation extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        TemplateInvocation, TemplateInvocation.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.TemplateInvocation)
      TemplateInvocationOrBuilder {
    private TemplateInvocation() {
      templateId_ = "";
      bindingContexts_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int TEMPLATE_ID_FIELD_NUMBER = 1;
    private java.lang.String templateId_;
    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    public boolean hasTemplateId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    public java.lang.String getTemplateId() {
      return templateId_;
    }
    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTemplateIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(templateId_);
    }
    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    private void setTemplateId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      templateId_ = value;
    }
    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    private void clearTemplateId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      templateId_ = getDefaultInstance().getTemplateId();
    }
    /**
     * <pre>
     * The Template to be used.
     * </pre>
     *
     * <code>optional string template_id = 1;</code>
     */
    private void setTemplateIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      templateId_ = value.toStringUtf8();
    }

    public static final int BINDING_CONTEXTS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<com.google.search.now.ui.piet.ElementsProto.BindingContext> bindingContexts_;
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    public java.util.List<com.google.search.now.ui.piet.ElementsProto.BindingContext> getBindingContextsList() {
      return bindingContexts_;
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    public java.util.List<? extends com.google.search.now.ui.piet.ElementsProto.BindingContextOrBuilder> 
        getBindingContextsOrBuilderList() {
      return bindingContexts_;
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    public int getBindingContextsCount() {
      return bindingContexts_.size();
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.BindingContext getBindingContexts(int index) {
      return bindingContexts_.get(index);
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.BindingContextOrBuilder getBindingContextsOrBuilder(
        int index) {
      return bindingContexts_.get(index);
    }
    private void ensureBindingContextsIsMutable() {
      if (!bindingContexts_.isModifiable()) {
        bindingContexts_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(bindingContexts_);
       }
    }

    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void setBindingContexts(
        int index, com.google.search.now.ui.piet.ElementsProto.BindingContext value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBindingContextsIsMutable();
      bindingContexts_.set(index, value);
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void setBindingContexts(
        int index, com.google.search.now.ui.piet.ElementsProto.BindingContext.Builder builderForValue) {
      ensureBindingContextsIsMutable();
      bindingContexts_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void addBindingContexts(com.google.search.now.ui.piet.ElementsProto.BindingContext value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBindingContextsIsMutable();
      bindingContexts_.add(value);
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void addBindingContexts(
        int index, com.google.search.now.ui.piet.ElementsProto.BindingContext value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBindingContextsIsMutable();
      bindingContexts_.add(index, value);
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void addBindingContexts(
        com.google.search.now.ui.piet.ElementsProto.BindingContext.Builder builderForValue) {
      ensureBindingContextsIsMutable();
      bindingContexts_.add(builderForValue.build());
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void addBindingContexts(
        int index, com.google.search.now.ui.piet.ElementsProto.BindingContext.Builder builderForValue) {
      ensureBindingContextsIsMutable();
      bindingContexts_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void addAllBindingContexts(
        java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.BindingContext> values) {
      ensureBindingContextsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, bindingContexts_);
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void clearBindingContexts() {
      bindingContexts_ = emptyProtobufList();
    }
    /**
     * <pre>
     * To isolate Templates, we define the BindingContext used by the template
     * within the invocation. When a TemplateInvocation is processed, we will
     * create a template instance for each BindingContext defined (if none is
     * defined, none will be created).
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
     */
    private void removeBindingContexts(int index) {
      ensureBindingContextsIsMutable();
      bindingContexts_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.TemplateInvocation, com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeString(1, getTemplateId());
      }
      for (int i = 0; i < bindingContexts_.size(); i++) {
        output.writeMessage(2, bindingContexts_.get(i));
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTemplateId());
      }
      for (int i = 0; i < bindingContexts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, bindingContexts_.get(i));
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A template can be used to instantiate a single instance, or a list of
     * instances at once: each of these is termed a TemplateInvocation. One instance
     * is created for each `binding_context` provided.
     * The types of objects instantiated by the template are determined by the
     * element that holds the invocation. For example, an invocation from an
     * ElementList will create one or more cells in that list. Invocation from a
     * GridCell will create one or more GridCells.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.TemplateInvocation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.TemplateInvocation, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.TemplateInvocation)
        com.google.search.now.ui.piet.ElementsProto.TemplateInvocationOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The Template to be used.
       * </pre>
       *
       * <code>optional string template_id = 1;</code>
       */
      public boolean hasTemplateId() {
        return instance.hasTemplateId();
      }
      /**
       * <pre>
       * The Template to be used.
       * </pre>
       *
       * <code>optional string template_id = 1;</code>
       */
      public java.lang.String getTemplateId() {
        return instance.getTemplateId();
      }
      /**
       * <pre>
       * The Template to be used.
       * </pre>
       *
       * <code>optional string template_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTemplateIdBytes() {
        return instance.getTemplateIdBytes();
      }
      /**
       * <pre>
       * The Template to be used.
       * </pre>
       *
       * <code>optional string template_id = 1;</code>
       */
      public Builder setTemplateId(
          java.lang.String value) {
        copyOnWrite();
        instance.setTemplateId(value);
        return this;
      }
      /**
       * <pre>
       * The Template to be used.
       * </pre>
       *
       * <code>optional string template_id = 1;</code>
       */
      public Builder clearTemplateId() {
        copyOnWrite();
        instance.clearTemplateId();
        return this;
      }
      /**
       * <pre>
       * The Template to be used.
       * </pre>
       *
       * <code>optional string template_id = 1;</code>
       */
      public Builder setTemplateIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTemplateIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public java.util.List<com.google.search.now.ui.piet.ElementsProto.BindingContext> getBindingContextsList() {
        return java.util.Collections.unmodifiableList(
            instance.getBindingContextsList());
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public int getBindingContextsCount() {
        return instance.getBindingContextsCount();
      }/**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.BindingContext getBindingContexts(int index) {
        return instance.getBindingContexts(index);
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder setBindingContexts(
          int index, com.google.search.now.ui.piet.ElementsProto.BindingContext value) {
        copyOnWrite();
        instance.setBindingContexts(index, value);
        return this;
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder setBindingContexts(
          int index, com.google.search.now.ui.piet.ElementsProto.BindingContext.Builder builderForValue) {
        copyOnWrite();
        instance.setBindingContexts(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder addBindingContexts(com.google.search.now.ui.piet.ElementsProto.BindingContext value) {
        copyOnWrite();
        instance.addBindingContexts(value);
        return this;
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder addBindingContexts(
          int index, com.google.search.now.ui.piet.ElementsProto.BindingContext value) {
        copyOnWrite();
        instance.addBindingContexts(index, value);
        return this;
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder addBindingContexts(
          com.google.search.now.ui.piet.ElementsProto.BindingContext.Builder builderForValue) {
        copyOnWrite();
        instance.addBindingContexts(builderForValue);
        return this;
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder addBindingContexts(
          int index, com.google.search.now.ui.piet.ElementsProto.BindingContext.Builder builderForValue) {
        copyOnWrite();
        instance.addBindingContexts(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder addAllBindingContexts(
          java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.BindingContext> values) {
        copyOnWrite();
        instance.addAllBindingContexts(values);
        return this;
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder clearBindingContexts() {
        copyOnWrite();
        instance.clearBindingContexts();
        return this;
      }
      /**
       * <pre>
       * To isolate Templates, we define the BindingContext used by the template
       * within the invocation. When a TemplateInvocation is processed, we will
       * create a template instance for each BindingContext defined (if none is
       * defined, none will be created).
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingContext binding_contexts = 2;</code>
       */
      public Builder removeBindingContexts(int index) {
        copyOnWrite();
        instance.removeBindingContexts(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.TemplateInvocation)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.TemplateInvocation();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          for (int i = 0; i < getBindingContextsCount(); i++) {
            if (!getBindingContexts(i).isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          bindingContexts_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.TemplateInvocation other = (com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) arg1;
          templateId_ = visitor.visitString(
              hasTemplateId(), templateId_,
              other.hasTemplateId(), other.templateId_);
          bindingContexts_= visitor.visitList(bindingContexts_, other.bindingContexts_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readString();
                  bitField0_ |= 0x00000001;
                  templateId_ = s;
                  break;
                }
                case 18: {
                  if (!bindingContexts_.isModifiable()) {
                    bindingContexts_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(bindingContexts_);
                  }
                  bindingContexts_.add(
                      input.readMessage(com.google.search.now.ui.piet.ElementsProto.BindingContext.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.TemplateInvocation)
    private static final com.google.search.now.ui.piet.ElementsProto.TemplateInvocation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TemplateInvocation();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.TemplateInvocation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TemplateInvocation> PARSER;

    public static com.google.protobuf.Parser<TemplateInvocation> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BindingContextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.BindingContext)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    java.util.List<com.google.search.now.ui.piet.ElementsProto.BindingValue> 
        getBindingValuesList();
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.BindingValue getBindingValues(int index);
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    int getBindingValuesCount();
  }
  /**
   * <pre>
   * A single binding context, such as a whole Frame, or a single row in a grid.
   * Binding IDs must be unique; if two or more BindingValues with the same
   * `binding_id` are found within the same binding context,
   * ERR_DUPLICATE_BINDING_VALUE is raised.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.BindingContext}
   */
  public  static final class BindingContext extends
      com.google.protobuf.GeneratedMessageLite<
          BindingContext, BindingContext.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.BindingContext)
      BindingContextOrBuilder {
    private BindingContext() {
      bindingValues_ = emptyProtobufList();
    }
    public static final int BINDING_VALUES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.google.search.now.ui.piet.ElementsProto.BindingValue> bindingValues_;
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    public java.util.List<com.google.search.now.ui.piet.ElementsProto.BindingValue> getBindingValuesList() {
      return bindingValues_;
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    public java.util.List<? extends com.google.search.now.ui.piet.ElementsProto.BindingValueOrBuilder> 
        getBindingValuesOrBuilderList() {
      return bindingValues_;
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    public int getBindingValuesCount() {
      return bindingValues_.size();
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.BindingValue getBindingValues(int index) {
      return bindingValues_.get(index);
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.BindingValueOrBuilder getBindingValuesOrBuilder(
        int index) {
      return bindingValues_.get(index);
    }
    private void ensureBindingValuesIsMutable() {
      if (!bindingValues_.isModifiable()) {
        bindingValues_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(bindingValues_);
       }
    }

    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void setBindingValues(
        int index, com.google.search.now.ui.piet.ElementsProto.BindingValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBindingValuesIsMutable();
      bindingValues_.set(index, value);
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void setBindingValues(
        int index, com.google.search.now.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
      ensureBindingValuesIsMutable();
      bindingValues_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void addBindingValues(com.google.search.now.ui.piet.ElementsProto.BindingValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBindingValuesIsMutable();
      bindingValues_.add(value);
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void addBindingValues(
        int index, com.google.search.now.ui.piet.ElementsProto.BindingValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureBindingValuesIsMutable();
      bindingValues_.add(index, value);
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void addBindingValues(
        com.google.search.now.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
      ensureBindingValuesIsMutable();
      bindingValues_.add(builderForValue.build());
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void addBindingValues(
        int index, com.google.search.now.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
      ensureBindingValuesIsMutable();
      bindingValues_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void addAllBindingValues(
        java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.BindingValue> values) {
      ensureBindingValuesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, bindingValues_);
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void clearBindingValues() {
      bindingValues_ = emptyProtobufList();
    }
    /**
     * <pre>
     * The set of all bindings for a Template.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
     */
    private void removeBindingValues(int index) {
      ensureBindingValuesIsMutable();
      bindingValues_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < bindingValues_.size(); i++) {
        output.writeMessage(1, bindingValues_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < bindingValues_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, bindingValues_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingContext parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.BindingContext prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A single binding context, such as a whole Frame, or a single row in a grid.
     * Binding IDs must be unique; if two or more BindingValues with the same
     * `binding_id` are found within the same binding context,
     * ERR_DUPLICATE_BINDING_VALUE is raised.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.BindingContext}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ElementsProto.BindingContext, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.BindingContext)
        com.google.search.now.ui.piet.ElementsProto.BindingContextOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.BindingContext.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public java.util.List<com.google.search.now.ui.piet.ElementsProto.BindingValue> getBindingValuesList() {
        return java.util.Collections.unmodifiableList(
            instance.getBindingValuesList());
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public int getBindingValuesCount() {
        return instance.getBindingValuesCount();
      }/**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.BindingValue getBindingValues(int index) {
        return instance.getBindingValues(index);
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder setBindingValues(
          int index, com.google.search.now.ui.piet.ElementsProto.BindingValue value) {
        copyOnWrite();
        instance.setBindingValues(index, value);
        return this;
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder setBindingValues(
          int index, com.google.search.now.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
        copyOnWrite();
        instance.setBindingValues(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder addBindingValues(com.google.search.now.ui.piet.ElementsProto.BindingValue value) {
        copyOnWrite();
        instance.addBindingValues(value);
        return this;
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder addBindingValues(
          int index, com.google.search.now.ui.piet.ElementsProto.BindingValue value) {
        copyOnWrite();
        instance.addBindingValues(index, value);
        return this;
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder addBindingValues(
          com.google.search.now.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
        copyOnWrite();
        instance.addBindingValues(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder addBindingValues(
          int index, com.google.search.now.ui.piet.ElementsProto.BindingValue.Builder builderForValue) {
        copyOnWrite();
        instance.addBindingValues(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder addAllBindingValues(
          java.lang.Iterable<? extends com.google.search.now.ui.piet.ElementsProto.BindingValue> values) {
        copyOnWrite();
        instance.addAllBindingValues(values);
        return this;
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder clearBindingValues() {
        copyOnWrite();
        instance.clearBindingValues();
        return this;
      }
      /**
       * <pre>
       * The set of all bindings for a Template.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.BindingValue binding_values = 1;</code>
       */
      public Builder removeBindingValues(int index) {
        copyOnWrite();
        instance.removeBindingValues(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.BindingContext)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.BindingContext();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          for (int i = 0; i < getBindingValuesCount(); i++) {
            if (!getBindingValues(i).isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          bindingValues_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.BindingContext other = (com.google.search.now.ui.piet.ElementsProto.BindingContext) arg1;
          bindingValues_= visitor.visitList(bindingValues_, other.bindingValues_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!bindingValues_.isModifiable()) {
                    bindingValues_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(bindingValues_);
                  }
                  bindingValues_.add(
                      input.readMessage(com.google.search.now.ui.piet.ElementsProto.BindingValue.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.BindingContext.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.BindingContext)
    private static final com.google.search.now.ui.piet.ElementsProto.BindingContext DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new BindingContext();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.BindingContext getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<BindingContext> PARSER;

    public static com.google.protobuf.Parser<BindingContext> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BindingValueOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.BindingValue)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                BindingValue, BindingValue.Builder> {

    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    boolean hasBindingId();
    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    java.lang.String getBindingId();
    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getBindingIdBytes();

    /**
     * <pre>
     * Actions that may be bound at runtime.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
     */
    boolean hasActions();
    /**
     * <pre>
     * Actions that may be bound at runtime.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
     */
    com.google.search.now.ui.piet.ActionsProto.Actions getActions();

    /**
     * <pre>
     * Binding value for visibility, which changes the VisibilityState of an
     * Element. This value can override the default visibility value set on an
     * Element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
     */
    boolean hasVisibility();
    /**
     * <pre>
     * Binding value for visibility, which changes the VisibilityState of an
     * Element. This value can override the default visibility value set on an
     * Element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
     */
    com.google.search.now.ui.piet.ElementsProto.Visibility getVisibility();

    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    boolean hasBindingIdFromTranscludingTemplate();
    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    java.lang.String getBindingIdFromTranscludingTemplate();
    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    com.google.protobuf.ByteString
        getBindingIdFromTranscludingTemplateBytes();

    /**
     * <pre>
     * Style that is bound to an element, and overrides the styles defined by
     * the element. The Style attributes that can be bound are only a subset
     * of all possible Styles.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
     */
    boolean hasBoundStyle();
    /**
     * <pre>
     * Style that is bound to an element, and overrides the styles defined by
     * the element. The Style attributes that can be bound are only a subset
     * of all possible Styles.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
     */
    com.google.search.now.ui.piet.StylesProto.BoundStyle getBoundStyle();

    /**
     * <pre>
     * Width of a cell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
     */
    boolean hasCellWidth();
    /**
     * <pre>
     * Width of a cell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.GridCellWidth getCellWidth();

    /**
     * <pre>
     * ChunkedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
     */
    boolean hasChunkedText();
    /**
     * <pre>
     * ChunkedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
     */
    com.google.search.now.ui.piet.TextProto.ChunkedText getChunkedText();

    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
     */
    boolean hasCustomElementData();
    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.CustomElementData getCustomElementData();

    /**
     * <pre>
     * An Element, to allow binding of generic chunks of layout.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 15;</code>
     */
    boolean hasElement();
    /**
     * <pre>
     * An Element, to allow binding of generic chunks of layout.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 15;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.Element getElement();

    /**
     * <pre>
     * Image to be used in an ImageElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 5;</code>
     */
    boolean hasImage();
    /**
     * <pre>
     * Image to be used in an ImageElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 5;</code>
     */
    com.google.search.now.ui.piet.ImagesProto.Image getImage();

    /**
     * <pre>
     * ParameterizedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    boolean hasParameterizedText();
    /**
     * <pre>
     * ParameterizedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    com.google.search.now.ui.piet.TextProto.ParameterizedText getParameterizedText();

    /**
     * <pre>
     * Binding value for a TemplateInvocation.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
     */
    boolean hasTemplateInvocation();
    /**
     * <pre>
     * Binding value for a TemplateInvocation.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.TemplateInvocation getTemplateInvocation();

    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    boolean hasVed();
    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    java.lang.String getVed();
    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    com.google.protobuf.ByteString
        getVedBytes();

    /**
     * <pre>
     * Data to provide a host in order for host to fulfill a binding for Piet.
     * When Piet binds a value it will first look to see if there is a
     * HostBindingData set. If there is one, then Piet asks the host for a new
     * BindingValue to use. The host will be given this BindingValue from which it
     * can use HostBindingData to determine how to create a new BindingValue. This
     * allows the host to selectively alter the server specified BindingValue. If
     * the BindingValue returned by the host has HostBindingData set it will be
     * ignored. If there is no binding provided in the oneof then an error will be
     * raised.  See [INTERNAL LINK] for a list of possible errors that could be
     * raised.
     * Piet will use the binding reference and ask the host for a specific
     * binding based on that reference type. As an example, Piet will request the
     * host for an Image when ImageBindingRef is specified.
     * An example usage of a host binding would be to check if something has
     * been stored on the device and signaling with icons whether content is
     * there or not.  The server can specify where this element will appear and
     * the host can determine what to show or even if the element should be
     * shown.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
     */
    boolean hasHostBindingData();
    /**
     * <pre>
     * Data to provide a host in order for host to fulfill a binding for Piet.
     * When Piet binds a value it will first look to see if there is a
     * HostBindingData set. If there is one, then Piet asks the host for a new
     * BindingValue to use. The host will be given this BindingValue from which it
     * can use HostBindingData to determine how to create a new BindingValue. This
     * allows the host to selectively alter the server specified BindingValue. If
     * the BindingValue returned by the host has HostBindingData set it will be
     * ignored. If there is no binding provided in the oneof then an error will be
     * raised.  See [INTERNAL LINK] for a list of possible errors that could be
     * raised.
     * Piet will use the binding reference and ask the host for a specific
     * binding based on that reference type. As an example, Piet will request the
     * host for an Image when ImageBindingRef is specified.
     * An example usage of a host binding would be to check if something has
     * been stored on the device and signaling with icons whether content is
     * there or not.  The server can specify where this element will appear and
     * the host can determine what to show or even if the element should be
     * shown.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
     */
    com.google.search.now.ui.piet.ElementsProto.HostBindingData getHostBindingData();

    public com.google.search.now.ui.piet.ElementsProto.BindingValue.ValuesCase getValuesCase();
  }
  /**
   * <pre>
   * A BindingValue is a name/value pair which provides a value to be substituted
   * wherever the specified `binding_id` is defined in the Template.
   * Next Id: 17
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.BindingValue}
   */
  public  static final class BindingValue extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        BindingValue, BindingValue.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.BindingValue)
      BindingValueOrBuilder {
    private BindingValue() {
      bindingId_ = "";
    }
    private int bitField0_;
    private int valuesCase_ = 0;
    private java.lang.Object values_;
    public enum ValuesCase
        implements com.google.protobuf.Internal.EnumLite {
      ACTIONS(10),
      VISIBILITY(13),
      BINDING_ID_FROM_TRANSCLUDING_TEMPLATE(16),
      BOUND_STYLE(11),
      CELL_WIDTH(9),
      CHUNKED_TEXT(4),
      CUSTOM_ELEMENT_DATA(2),
      ELEMENT(15),
      IMAGE(5),
      PARAMETERIZED_TEXT(3),
      TEMPLATE_INVOCATION(8),
      VED(7),
      VALUES_NOT_SET(0);
      private final int value;
      private ValuesCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValuesCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValuesCase forNumber(int value) {
        switch (value) {
          case 10: return ACTIONS;
          case 13: return VISIBILITY;
          case 16: return BINDING_ID_FROM_TRANSCLUDING_TEMPLATE;
          case 11: return BOUND_STYLE;
          case 9: return CELL_WIDTH;
          case 4: return CHUNKED_TEXT;
          case 2: return CUSTOM_ELEMENT_DATA;
          case 15: return ELEMENT;
          case 5: return IMAGE;
          case 3: return PARAMETERIZED_TEXT;
          case 8: return TEMPLATE_INVOCATION;
          case 7: return VED;
          case 0: return VALUES_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValuesCase
    getValuesCase() {
      return ValuesCase.forNumber(
          valuesCase_);
    }

    private void clearValues() {
      valuesCase_ = 0;
      values_ = null;
    }

    public static final int BINDING_ID_FIELD_NUMBER = 1;
    private java.lang.String bindingId_;
    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    public boolean hasBindingId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    public java.lang.String getBindingId() {
      return bindingId_;
    }
    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getBindingIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(bindingId_);
    }
    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    private void setBindingId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      bindingId_ = value;
    }
    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    private void clearBindingId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      bindingId_ = getDefaultInstance().getBindingId();
    }
    /**
     * <pre>
     * The name of the binding within the Template where this BindingValue should
     * be substituted. Must be unique within a binding context.
     * </pre>
     *
     * <code>optional string binding_id = 1;</code>
     */
    private void setBindingIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      bindingId_ = value.toStringUtf8();
    }

    public static final int ACTIONS_FIELD_NUMBER = 10;
    /**
     * <pre>
     * Actions that may be bound at runtime.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
     */
    public boolean hasActions() {
      return valuesCase_ == 10;
    }
    /**
     * <pre>
     * Actions that may be bound at runtime.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.Actions getActions() {
      if (valuesCase_ == 10) {
         return (com.google.search.now.ui.piet.ActionsProto.Actions) values_;
      }
      return com.google.search.now.ui.piet.ActionsProto.Actions.getDefaultInstance();
    }
    /**
     * <pre>
     * Actions that may be bound at runtime.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
     */
    private void setActions(com.google.search.now.ui.piet.ActionsProto.Actions value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 10;
    }
    /**
     * <pre>
     * Actions that may be bound at runtime.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
     */
    private void setActions(
        com.google.search.now.ui.piet.ActionsProto.Actions.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 10;
    }
    /**
     * <pre>
     * Actions that may be bound at runtime.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
     */
    private void mergeActions(com.google.search.now.ui.piet.ActionsProto.Actions value) {
      if (valuesCase_ == 10 &&
          values_ != com.google.search.now.ui.piet.ActionsProto.Actions.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.ActionsProto.Actions.newBuilder((com.google.search.now.ui.piet.ActionsProto.Actions) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 10;
    }
    /**
     * <pre>
     * Actions that may be bound at runtime.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
     */
    private void clearActions() {
      if (valuesCase_ == 10) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int VISIBILITY_FIELD_NUMBER = 13;
    /**
     * <pre>
     * Binding value for visibility, which changes the VisibilityState of an
     * Element. This value can override the default visibility value set on an
     * Element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
     */
    public boolean hasVisibility() {
      return valuesCase_ == 13;
    }
    /**
     * <pre>
     * Binding value for visibility, which changes the VisibilityState of an
     * Element. This value can override the default visibility value set on an
     * Element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.Visibility getVisibility() {
      if (valuesCase_ == 13) {
        com.google.search.now.ui.piet.ElementsProto.Visibility result = com.google.search.now.ui.piet.ElementsProto.Visibility.forNumber((java.lang.Integer) values_);
        return result == null ? com.google.search.now.ui.piet.ElementsProto.Visibility.VISIBLE : result;
      }
      return com.google.search.now.ui.piet.ElementsProto.Visibility.VISIBLE;
    }
    /**
     * <pre>
     * Binding value for visibility, which changes the VisibilityState of an
     * Element. This value can override the default visibility value set on an
     * Element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
     */
    private void setVisibility(com.google.search.now.ui.piet.ElementsProto.Visibility value) {
      if (value == null) {
        throw new NullPointerException();
      }
      valuesCase_ = 13;
      values_ = value.getNumber();
    }
    /**
     * <pre>
     * Binding value for visibility, which changes the VisibilityState of an
     * Element. This value can override the default visibility value set on an
     * Element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
     */
    private void clearVisibility() {
      if (valuesCase_ == 13) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int BINDING_ID_FROM_TRANSCLUDING_TEMPLATE_FIELD_NUMBER = 16;
    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    public boolean hasBindingIdFromTranscludingTemplate() {
      return valuesCase_ == 16;
    }
    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    public java.lang.String getBindingIdFromTranscludingTemplate() {
      java.lang.String ref = "";
      if (valuesCase_ == 16) {
        ref = (java.lang.String) values_;
      }
      return ref;
    }
    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    public com.google.protobuf.ByteString
        getBindingIdFromTranscludingTemplateBytes() {
      java.lang.String ref = "";
      if (valuesCase_ == 16) {
        ref = (java.lang.String) values_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    private void setBindingIdFromTranscludingTemplate(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  valuesCase_ = 16;
      values_ = value;
    }
    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    private void clearBindingIdFromTranscludingTemplate() {
      if (valuesCase_ == 16) {
        valuesCase_ = 0;
        values_ = null;
      }
    }
    /**
     * <pre>
     * Use an already existing bound value in a transcluded template.
     * This should be used to pass parameters between templates.
     * For example:
     * Let's assume we have a template that shows a text with styling:
     * template {
     *   id: "StyledText"
     *   ...
     *   element {
     *     text_element {
     *       parameterized_text_binding { binding_id: "StyledTextContent" }
     *     }
     *   }
     *   ...
     * }
     * And we want to create a template that shows the styled text overlayed
     * over an image:
     * template {
     *   id: "ImageWithText"
     *   ...
     *   element {
     *     image_element {
     *       image_binding {
     *         binding_id: "TopLevelImage"
     *       }
     *     }
     *     overlays {
     *       template_invocation {
     *         id: 'StyledText'
     *         binding_contexts {
     *           binding_values {
     *             binding_id: "StyledTextContent"
     *             binding_id_from_transcluding_template: "TopLevelText"
     *           }
     *         }
     *       }
     *     }
     *   }
     *   ...
     * }
     * The invocation of the template will then be:
     * frame {
     *   template_invocation {
     *     id: "ImageWithText"
     *     binding_contexts {
     *       binding_values {
     *         binding_id: "TopLevelText"
     *         ...
     *       }
     *       binding_values {
     *         binding_id: "TopLevelImage"
     *         ...
     *       }
     *     }
     *   }
     * }
     * </pre>
     *
     * <code>optional string binding_id_from_transcluding_template = 16;</code>
     */
    private void setBindingIdFromTranscludingTemplateBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  valuesCase_ = 16;
      values_ = value.toStringUtf8();
    }

    public static final int BOUND_STYLE_FIELD_NUMBER = 11;
    /**
     * <pre>
     * Style that is bound to an element, and overrides the styles defined by
     * the element. The Style attributes that can be bound are only a subset
     * of all possible Styles.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
     */
    public boolean hasBoundStyle() {
      return valuesCase_ == 11;
    }
    /**
     * <pre>
     * Style that is bound to an element, and overrides the styles defined by
     * the element. The Style attributes that can be bound are only a subset
     * of all possible Styles.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
     */
    public com.google.search.now.ui.piet.StylesProto.BoundStyle getBoundStyle() {
      if (valuesCase_ == 11) {
         return (com.google.search.now.ui.piet.StylesProto.BoundStyle) values_;
      }
      return com.google.search.now.ui.piet.StylesProto.BoundStyle.getDefaultInstance();
    }
    /**
     * <pre>
     * Style that is bound to an element, and overrides the styles defined by
     * the element. The Style attributes that can be bound are only a subset
     * of all possible Styles.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
     */
    private void setBoundStyle(com.google.search.now.ui.piet.StylesProto.BoundStyle value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 11;
    }
    /**
     * <pre>
     * Style that is bound to an element, and overrides the styles defined by
     * the element. The Style attributes that can be bound are only a subset
     * of all possible Styles.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
     */
    private void setBoundStyle(
        com.google.search.now.ui.piet.StylesProto.BoundStyle.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 11;
    }
    /**
     * <pre>
     * Style that is bound to an element, and overrides the styles defined by
     * the element. The Style attributes that can be bound are only a subset
     * of all possible Styles.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
     */
    private void mergeBoundStyle(com.google.search.now.ui.piet.StylesProto.BoundStyle value) {
      if (valuesCase_ == 11 &&
          values_ != com.google.search.now.ui.piet.StylesProto.BoundStyle.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.StylesProto.BoundStyle.newBuilder((com.google.search.now.ui.piet.StylesProto.BoundStyle) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 11;
    }
    /**
     * <pre>
     * Style that is bound to an element, and overrides the styles defined by
     * the element. The Style attributes that can be bound are only a subset
     * of all possible Styles.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
     */
    private void clearBoundStyle() {
      if (valuesCase_ == 11) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int CELL_WIDTH_FIELD_NUMBER = 9;
    /**
     * <pre>
     * Width of a cell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
     */
    public boolean hasCellWidth() {
      return valuesCase_ == 9;
    }
    /**
     * <pre>
     * Width of a cell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.GridCellWidth getCellWidth() {
      if (valuesCase_ == 9) {
         return (com.google.search.now.ui.piet.ElementsProto.GridCellWidth) values_;
      }
      return com.google.search.now.ui.piet.ElementsProto.GridCellWidth.getDefaultInstance();
    }
    /**
     * <pre>
     * Width of a cell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
     */
    private void setCellWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 9;
    }
    /**
     * <pre>
     * Width of a cell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
     */
    private void setCellWidth(
        com.google.search.now.ui.piet.ElementsProto.GridCellWidth.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 9;
    }
    /**
     * <pre>
     * Width of a cell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
     */
    private void mergeCellWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth value) {
      if (valuesCase_ == 9 &&
          values_ != com.google.search.now.ui.piet.ElementsProto.GridCellWidth.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.ElementsProto.GridCellWidth.newBuilder((com.google.search.now.ui.piet.ElementsProto.GridCellWidth) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 9;
    }
    /**
     * <pre>
     * Width of a cell.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
     */
    private void clearCellWidth() {
      if (valuesCase_ == 9) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int CHUNKED_TEXT_FIELD_NUMBER = 4;
    /**
     * <pre>
     * ChunkedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
     */
    public boolean hasChunkedText() {
      return valuesCase_ == 4;
    }
    /**
     * <pre>
     * ChunkedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
     */
    public com.google.search.now.ui.piet.TextProto.ChunkedText getChunkedText() {
      if (valuesCase_ == 4) {
         return (com.google.search.now.ui.piet.TextProto.ChunkedText) values_;
      }
      return com.google.search.now.ui.piet.TextProto.ChunkedText.getDefaultInstance();
    }
    /**
     * <pre>
     * ChunkedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
     */
    private void setChunkedText(com.google.search.now.ui.piet.TextProto.ChunkedText value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 4;
    }
    /**
     * <pre>
     * ChunkedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
     */
    private void setChunkedText(
        com.google.search.now.ui.piet.TextProto.ChunkedText.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 4;
    }
    /**
     * <pre>
     * ChunkedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
     */
    private void mergeChunkedText(com.google.search.now.ui.piet.TextProto.ChunkedText value) {
      if (valuesCase_ == 4 &&
          values_ != com.google.search.now.ui.piet.TextProto.ChunkedText.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.TextProto.ChunkedText.newBuilder((com.google.search.now.ui.piet.TextProto.ChunkedText) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 4;
    }
    /**
     * <pre>
     * ChunkedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
     */
    private void clearChunkedText() {
      if (valuesCase_ == 4) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int CUSTOM_ELEMENT_DATA_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
     */
    public boolean hasCustomElementData() {
      return valuesCase_ == 2;
    }
    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.CustomElementData getCustomElementData() {
      if (valuesCase_ == 2) {
         return (com.google.search.now.ui.piet.ElementsProto.CustomElementData) values_;
      }
      return com.google.search.now.ui.piet.ElementsProto.CustomElementData.getDefaultInstance();
    }
    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
     */
    private void setCustomElementData(com.google.search.now.ui.piet.ElementsProto.CustomElementData value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 2;
    }
    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
     */
    private void setCustomElementData(
        com.google.search.now.ui.piet.ElementsProto.CustomElementData.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 2;
    }
    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
     */
    private void mergeCustomElementData(com.google.search.now.ui.piet.ElementsProto.CustomElementData value) {
      if (valuesCase_ == 2 &&
          values_ != com.google.search.now.ui.piet.ElementsProto.CustomElementData.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.ElementsProto.CustomElementData.newBuilder((com.google.search.now.ui.piet.ElementsProto.CustomElementData) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 2;
    }
    /**
     * <pre>
     * Data to be displayed in a CustomElement. Clients using Piet should add
     * extensions to this proto to pass their custom data.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
     */
    private void clearCustomElementData() {
      if (valuesCase_ == 2) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int ELEMENT_FIELD_NUMBER = 15;
    /**
     * <pre>
     * An Element, to allow binding of generic chunks of layout.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 15;</code>
     */
    public boolean hasElement() {
      return valuesCase_ == 15;
    }
    /**
     * <pre>
     * An Element, to allow binding of generic chunks of layout.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 15;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.Element getElement() {
      if (valuesCase_ == 15) {
         return (com.google.search.now.ui.piet.ElementsProto.Element) values_;
      }
      return com.google.search.now.ui.piet.ElementsProto.Element.getDefaultInstance();
    }
    /**
     * <pre>
     * An Element, to allow binding of generic chunks of layout.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 15;</code>
     */
    private void setElement(com.google.search.now.ui.piet.ElementsProto.Element value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 15;
    }
    /**
     * <pre>
     * An Element, to allow binding of generic chunks of layout.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 15;</code>
     */
    private void setElement(
        com.google.search.now.ui.piet.ElementsProto.Element.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 15;
    }
    /**
     * <pre>
     * An Element, to allow binding of generic chunks of layout.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 15;</code>
     */
    private void mergeElement(com.google.search.now.ui.piet.ElementsProto.Element value) {
      if (valuesCase_ == 15 &&
          values_ != com.google.search.now.ui.piet.ElementsProto.Element.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.ElementsProto.Element.newBuilder((com.google.search.now.ui.piet.ElementsProto.Element) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 15;
    }
    /**
     * <pre>
     * An Element, to allow binding of generic chunks of layout.
     * May have a performance penalty on some platforms.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Element element = 15;</code>
     */
    private void clearElement() {
      if (valuesCase_ == 15) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int IMAGE_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Image to be used in an ImageElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 5;</code>
     */
    public boolean hasImage() {
      return valuesCase_ == 5;
    }
    /**
     * <pre>
     * Image to be used in an ImageElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 5;</code>
     */
    public com.google.search.now.ui.piet.ImagesProto.Image getImage() {
      if (valuesCase_ == 5) {
         return (com.google.search.now.ui.piet.ImagesProto.Image) values_;
      }
      return com.google.search.now.ui.piet.ImagesProto.Image.getDefaultInstance();
    }
    /**
     * <pre>
     * Image to be used in an ImageElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 5;</code>
     */
    private void setImage(com.google.search.now.ui.piet.ImagesProto.Image value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 5;
    }
    /**
     * <pre>
     * Image to be used in an ImageElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 5;</code>
     */
    private void setImage(
        com.google.search.now.ui.piet.ImagesProto.Image.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 5;
    }
    /**
     * <pre>
     * Image to be used in an ImageElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 5;</code>
     */
    private void mergeImage(com.google.search.now.ui.piet.ImagesProto.Image value) {
      if (valuesCase_ == 5 &&
          values_ != com.google.search.now.ui.piet.ImagesProto.Image.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.ImagesProto.Image.newBuilder((com.google.search.now.ui.piet.ImagesProto.Image) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 5;
    }
    /**
     * <pre>
     * Image to be used in an ImageElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Image image = 5;</code>
     */
    private void clearImage() {
      if (valuesCase_ == 5) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int PARAMETERIZED_TEXT_FIELD_NUMBER = 3;
    /**
     * <pre>
     * ParameterizedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    public boolean hasParameterizedText() {
      return valuesCase_ == 3;
    }
    /**
     * <pre>
     * ParameterizedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    public com.google.search.now.ui.piet.TextProto.ParameterizedText getParameterizedText() {
      if (valuesCase_ == 3) {
         return (com.google.search.now.ui.piet.TextProto.ParameterizedText) values_;
      }
      return com.google.search.now.ui.piet.TextProto.ParameterizedText.getDefaultInstance();
    }
    /**
     * <pre>
     * ParameterizedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    private void setParameterizedText(com.google.search.now.ui.piet.TextProto.ParameterizedText value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 3;
    }
    /**
     * <pre>
     * ParameterizedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    private void setParameterizedText(
        com.google.search.now.ui.piet.TextProto.ParameterizedText.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 3;
    }
    /**
     * <pre>
     * ParameterizedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    private void mergeParameterizedText(com.google.search.now.ui.piet.TextProto.ParameterizedText value) {
      if (valuesCase_ == 3 &&
          values_ != com.google.search.now.ui.piet.TextProto.ParameterizedText.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.TextProto.ParameterizedText.newBuilder((com.google.search.now.ui.piet.TextProto.ParameterizedText) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 3;
    }
    /**
     * <pre>
     * ParameterizedText to be used in a TextElement.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
     */
    private void clearParameterizedText() {
      if (valuesCase_ == 3) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int TEMPLATE_INVOCATION_FIELD_NUMBER = 8;
    /**
     * <pre>
     * Binding value for a TemplateInvocation.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
     */
    public boolean hasTemplateInvocation() {
      return valuesCase_ == 8;
    }
    /**
     * <pre>
     * Binding value for a TemplateInvocation.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.TemplateInvocation getTemplateInvocation() {
      if (valuesCase_ == 8) {
         return (com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) values_;
      }
      return com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.getDefaultInstance();
    }
    /**
     * <pre>
     * Binding value for a TemplateInvocation.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
     */
    private void setTemplateInvocation(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation value) {
      if (value == null) {
        throw new NullPointerException();
      }
      values_ = value;
      valuesCase_ = 8;
    }
    /**
     * <pre>
     * Binding value for a TemplateInvocation.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
     */
    private void setTemplateInvocation(
        com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.Builder builderForValue) {
      values_ = builderForValue.build();
      valuesCase_ = 8;
    }
    /**
     * <pre>
     * Binding value for a TemplateInvocation.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
     */
    private void mergeTemplateInvocation(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation value) {
      if (valuesCase_ == 8 &&
          values_ != com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.getDefaultInstance()) {
        values_ = com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.newBuilder((com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) values_)
            .mergeFrom(value).buildPartial();
      } else {
        values_ = value;
      }
      valuesCase_ = 8;
    }
    /**
     * <pre>
     * Binding value for a TemplateInvocation.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
     */
    private void clearTemplateInvocation() {
      if (valuesCase_ == 8) {
        valuesCase_ = 0;
        values_ = null;
      }
    }

    public static final int VED_FIELD_NUMBER = 7;
    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    public boolean hasVed() {
      return valuesCase_ == 7;
    }
    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    public java.lang.String getVed() {
      java.lang.String ref = "";
      if (valuesCase_ == 7) {
        ref = (java.lang.String) values_;
      }
      return ref;
    }
    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    public com.google.protobuf.ByteString
        getVedBytes() {
      java.lang.String ref = "";
      if (valuesCase_ == 7) {
        ref = (java.lang.String) values_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    private void setVed(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  valuesCase_ = 7;
      values_ = value;
    }
    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    private void clearVed() {
      if (valuesCase_ == 7) {
        valuesCase_ = 0;
        values_ = null;
      }
    }
    /**
     * <pre>
     * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
     * logged Visual Element corresponding to a bound Piet Template.
     * </pre>
     *
     * <code>optional string ved = 7;</code>
     */
    private void setVedBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  valuesCase_ = 7;
      values_ = value.toStringUtf8();
    }

    public static final int HOST_BINDING_DATA_FIELD_NUMBER = 14;
    private com.google.search.now.ui.piet.ElementsProto.HostBindingData hostBindingData_;
    /**
     * <pre>
     * Data to provide a host in order for host to fulfill a binding for Piet.
     * When Piet binds a value it will first look to see if there is a
     * HostBindingData set. If there is one, then Piet asks the host for a new
     * BindingValue to use. The host will be given this BindingValue from which it
     * can use HostBindingData to determine how to create a new BindingValue. This
     * allows the host to selectively alter the server specified BindingValue. If
     * the BindingValue returned by the host has HostBindingData set it will be
     * ignored. If there is no binding provided in the oneof then an error will be
     * raised.  See [INTERNAL LINK] for a list of possible errors that could be
     * raised.
     * Piet will use the binding reference and ask the host for a specific
     * binding based on that reference type. As an example, Piet will request the
     * host for an Image when ImageBindingRef is specified.
     * An example usage of a host binding would be to check if something has
     * been stored on the device and signaling with icons whether content is
     * there or not.  The server can specify where this element will appear and
     * the host can determine what to show or even if the element should be
     * shown.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
     */
    public boolean hasHostBindingData() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * Data to provide a host in order for host to fulfill a binding for Piet.
     * When Piet binds a value it will first look to see if there is a
     * HostBindingData set. If there is one, then Piet asks the host for a new
     * BindingValue to use. The host will be given this BindingValue from which it
     * can use HostBindingData to determine how to create a new BindingValue. This
     * allows the host to selectively alter the server specified BindingValue. If
     * the BindingValue returned by the host has HostBindingData set it will be
     * ignored. If there is no binding provided in the oneof then an error will be
     * raised.  See [INTERNAL LINK] for a list of possible errors that could be
     * raised.
     * Piet will use the binding reference and ask the host for a specific
     * binding based on that reference type. As an example, Piet will request the
     * host for an Image when ImageBindingRef is specified.
     * An example usage of a host binding would be to check if something has
     * been stored on the device and signaling with icons whether content is
     * there or not.  The server can specify where this element will appear and
     * the host can determine what to show or even if the element should be
     * shown.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
     */
    public com.google.search.now.ui.piet.ElementsProto.HostBindingData getHostBindingData() {
      return hostBindingData_ == null ? com.google.search.now.ui.piet.ElementsProto.HostBindingData.getDefaultInstance() : hostBindingData_;
    }
    /**
     * <pre>
     * Data to provide a host in order for host to fulfill a binding for Piet.
     * When Piet binds a value it will first look to see if there is a
     * HostBindingData set. If there is one, then Piet asks the host for a new
     * BindingValue to use. The host will be given this BindingValue from which it
     * can use HostBindingData to determine how to create a new BindingValue. This
     * allows the host to selectively alter the server specified BindingValue. If
     * the BindingValue returned by the host has HostBindingData set it will be
     * ignored. If there is no binding provided in the oneof then an error will be
     * raised.  See [INTERNAL LINK] for a list of possible errors that could be
     * raised.
     * Piet will use the binding reference and ask the host for a specific
     * binding based on that reference type. As an example, Piet will request the
     * host for an Image when ImageBindingRef is specified.
     * An example usage of a host binding would be to check if something has
     * been stored on the device and signaling with icons whether content is
     * there or not.  The server can specify where this element will appear and
     * the host can determine what to show or even if the element should be
     * shown.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
     */
    private void setHostBindingData(com.google.search.now.ui.piet.ElementsProto.HostBindingData value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hostBindingData_ = value;
      bitField0_ |= 0x00002000;
      }
    /**
     * <pre>
     * Data to provide a host in order for host to fulfill a binding for Piet.
     * When Piet binds a value it will first look to see if there is a
     * HostBindingData set. If there is one, then Piet asks the host for a new
     * BindingValue to use. The host will be given this BindingValue from which it
     * can use HostBindingData to determine how to create a new BindingValue. This
     * allows the host to selectively alter the server specified BindingValue. If
     * the BindingValue returned by the host has HostBindingData set it will be
     * ignored. If there is no binding provided in the oneof then an error will be
     * raised.  See [INTERNAL LINK] for a list of possible errors that could be
     * raised.
     * Piet will use the binding reference and ask the host for a specific
     * binding based on that reference type. As an example, Piet will request the
     * host for an Image when ImageBindingRef is specified.
     * An example usage of a host binding would be to check if something has
     * been stored on the device and signaling with icons whether content is
     * there or not.  The server can specify where this element will appear and
     * the host can determine what to show or even if the element should be
     * shown.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
     */
    private void setHostBindingData(
        com.google.search.now.ui.piet.ElementsProto.HostBindingData.Builder builderForValue) {
      hostBindingData_ = builderForValue.build();
      bitField0_ |= 0x00002000;
    }
    /**
     * <pre>
     * Data to provide a host in order for host to fulfill a binding for Piet.
     * When Piet binds a value it will first look to see if there is a
     * HostBindingData set. If there is one, then Piet asks the host for a new
     * BindingValue to use. The host will be given this BindingValue from which it
     * can use HostBindingData to determine how to create a new BindingValue. This
     * allows the host to selectively alter the server specified BindingValue. If
     * the BindingValue returned by the host has HostBindingData set it will be
     * ignored. If there is no binding provided in the oneof then an error will be
     * raised.  See [INTERNAL LINK] for a list of possible errors that could be
     * raised.
     * Piet will use the binding reference and ask the host for a specific
     * binding based on that reference type. As an example, Piet will request the
     * host for an Image when ImageBindingRef is specified.
     * An example usage of a host binding would be to check if something has
     * been stored on the device and signaling with icons whether content is
     * there or not.  The server can specify where this element will appear and
     * the host can determine what to show or even if the element should be
     * shown.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
     */
    private void mergeHostBindingData(com.google.search.now.ui.piet.ElementsProto.HostBindingData value) {
      if (hostBindingData_ != null &&
          hostBindingData_ != com.google.search.now.ui.piet.ElementsProto.HostBindingData.getDefaultInstance()) {
        hostBindingData_ =
          com.google.search.now.ui.piet.ElementsProto.HostBindingData.newBuilder(hostBindingData_).mergeFrom(value).buildPartial();
      } else {
        hostBindingData_ = value;
      }
      bitField0_ |= 0x00002000;
    }
    /**
     * <pre>
     * Data to provide a host in order for host to fulfill a binding for Piet.
     * When Piet binds a value it will first look to see if there is a
     * HostBindingData set. If there is one, then Piet asks the host for a new
     * BindingValue to use. The host will be given this BindingValue from which it
     * can use HostBindingData to determine how to create a new BindingValue. This
     * allows the host to selectively alter the server specified BindingValue. If
     * the BindingValue returned by the host has HostBindingData set it will be
     * ignored. If there is no binding provided in the oneof then an error will be
     * raised.  See [INTERNAL LINK] for a list of possible errors that could be
     * raised.
     * Piet will use the binding reference and ask the host for a specific
     * binding based on that reference type. As an example, Piet will request the
     * host for an Image when ImageBindingRef is specified.
     * An example usage of a host binding would be to check if something has
     * been stored on the device and signaling with icons whether content is
     * there or not.  The server can specify where this element will appear and
     * the host can determine what to show or even if the element should be
     * shown.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
     */
    private void clearHostBindingData() {  hostBindingData_ = null;
      bitField0_ = (bitField0_ & ~0x00002000);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.BindingValue, com.google.search.now.ui.piet.ElementsProto.BindingValue.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeString(1, getBindingId());
      }
      if (valuesCase_ == 2) {
        output.writeMessage(2, (com.google.search.now.ui.piet.ElementsProto.CustomElementData) values_);
      }
      if (valuesCase_ == 3) {
        output.writeMessage(3, (com.google.search.now.ui.piet.TextProto.ParameterizedText) values_);
      }
      if (valuesCase_ == 4) {
        output.writeMessage(4, (com.google.search.now.ui.piet.TextProto.ChunkedText) values_);
      }
      if (valuesCase_ == 5) {
        output.writeMessage(5, (com.google.search.now.ui.piet.ImagesProto.Image) values_);
      }
      if (valuesCase_ == 7) {
        output.writeString(7, getVed());
      }
      if (valuesCase_ == 8) {
        output.writeMessage(8, (com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) values_);
      }
      if (valuesCase_ == 9) {
        output.writeMessage(9, (com.google.search.now.ui.piet.ElementsProto.GridCellWidth) values_);
      }
      if (valuesCase_ == 10) {
        output.writeMessage(10, (com.google.search.now.ui.piet.ActionsProto.Actions) values_);
      }
      if (valuesCase_ == 11) {
        output.writeMessage(11, (com.google.search.now.ui.piet.StylesProto.BoundStyle) values_);
      }
      if (valuesCase_ == 13) {
        output.writeEnum(13, ((java.lang.Integer) values_));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, getHostBindingData());
      }
      if (valuesCase_ == 15) {
        output.writeMessage(15, (com.google.search.now.ui.piet.ElementsProto.Element) values_);
      }
      if (valuesCase_ == 16) {
        output.writeString(16, getBindingIdFromTranscludingTemplate());
      }
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getBindingId());
      }
      if (valuesCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.google.search.now.ui.piet.ElementsProto.CustomElementData) values_);
      }
      if (valuesCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.search.now.ui.piet.TextProto.ParameterizedText) values_);
      }
      if (valuesCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.search.now.ui.piet.TextProto.ChunkedText) values_);
      }
      if (valuesCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (com.google.search.now.ui.piet.ImagesProto.Image) values_);
      }
      if (valuesCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getVed());
      }
      if (valuesCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) values_);
      }
      if (valuesCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (com.google.search.now.ui.piet.ElementsProto.GridCellWidth) values_);
      }
      if (valuesCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, (com.google.search.now.ui.piet.ActionsProto.Actions) values_);
      }
      if (valuesCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, (com.google.search.now.ui.piet.StylesProto.BoundStyle) values_);
      }
      if (valuesCase_ == 13) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, ((java.lang.Integer) values_));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getHostBindingData());
      }
      if (valuesCase_ == 15) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, (com.google.search.now.ui.piet.ElementsProto.Element) values_);
      }
      if (valuesCase_ == 16) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(16, getBindingIdFromTranscludingTemplate());
      }
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.BindingValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.BindingValue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A BindingValue is a name/value pair which provides a value to be substituted
     * wherever the specified `binding_id` is defined in the Template.
     * Next Id: 17
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.BindingValue}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.BindingValue, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.BindingValue)
        com.google.search.now.ui.piet.ElementsProto.BindingValueOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.BindingValue.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ValuesCase
          getValuesCase() {
        return instance.getValuesCase();
      }

      public Builder clearValues() {
        copyOnWrite();
        instance.clearValues();
        return this;
      }


      /**
       * <pre>
       * The name of the binding within the Template where this BindingValue should
       * be substituted. Must be unique within a binding context.
       * </pre>
       *
       * <code>optional string binding_id = 1;</code>
       */
      public boolean hasBindingId() {
        return instance.hasBindingId();
      }
      /**
       * <pre>
       * The name of the binding within the Template where this BindingValue should
       * be substituted. Must be unique within a binding context.
       * </pre>
       *
       * <code>optional string binding_id = 1;</code>
       */
      public java.lang.String getBindingId() {
        return instance.getBindingId();
      }
      /**
       * <pre>
       * The name of the binding within the Template where this BindingValue should
       * be substituted. Must be unique within a binding context.
       * </pre>
       *
       * <code>optional string binding_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getBindingIdBytes() {
        return instance.getBindingIdBytes();
      }
      /**
       * <pre>
       * The name of the binding within the Template where this BindingValue should
       * be substituted. Must be unique within a binding context.
       * </pre>
       *
       * <code>optional string binding_id = 1;</code>
       */
      public Builder setBindingId(
          java.lang.String value) {
        copyOnWrite();
        instance.setBindingId(value);
        return this;
      }
      /**
       * <pre>
       * The name of the binding within the Template where this BindingValue should
       * be substituted. Must be unique within a binding context.
       * </pre>
       *
       * <code>optional string binding_id = 1;</code>
       */
      public Builder clearBindingId() {
        copyOnWrite();
        instance.clearBindingId();
        return this;
      }
      /**
       * <pre>
       * The name of the binding within the Template where this BindingValue should
       * be substituted. Must be unique within a binding context.
       * </pre>
       *
       * <code>optional string binding_id = 1;</code>
       */
      public Builder setBindingIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setBindingIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * Actions that may be bound at runtime.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
       */
      public boolean hasActions() {
        return instance.hasActions();
      }
      /**
       * <pre>
       * Actions that may be bound at runtime.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
       */
      public com.google.search.now.ui.piet.ActionsProto.Actions getActions() {
        return instance.getActions();
      }
      /**
       * <pre>
       * Actions that may be bound at runtime.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
       */
      public Builder setActions(com.google.search.now.ui.piet.ActionsProto.Actions value) {
        copyOnWrite();
        instance.setActions(value);
        return this;
      }
      /**
       * <pre>
       * Actions that may be bound at runtime.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
       */
      public Builder setActions(
          com.google.search.now.ui.piet.ActionsProto.Actions.Builder builderForValue) {
        copyOnWrite();
        instance.setActions(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Actions that may be bound at runtime.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
       */
      public Builder mergeActions(com.google.search.now.ui.piet.ActionsProto.Actions value) {
        copyOnWrite();
        instance.mergeActions(value);
        return this;
      }
      /**
       * <pre>
       * Actions that may be bound at runtime.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Actions actions = 10;</code>
       */
      public Builder clearActions() {
        copyOnWrite();
        instance.clearActions();
        return this;
      }

      /**
       * <pre>
       * Binding value for visibility, which changes the VisibilityState of an
       * Element. This value can override the default visibility value set on an
       * Element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
       */
      public boolean hasVisibility() {
        return instance.hasVisibility();
      }
      /**
       * <pre>
       * Binding value for visibility, which changes the VisibilityState of an
       * Element. This value can override the default visibility value set on an
       * Element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.Visibility getVisibility() {
        return instance.getVisibility();
      }
      /**
       * <pre>
       * Binding value for visibility, which changes the VisibilityState of an
       * Element. This value can override the default visibility value set on an
       * Element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
       */
      public Builder setVisibility(com.google.search.now.ui.piet.ElementsProto.Visibility value) {
        copyOnWrite();
        instance.setVisibility(value);
        return this;
      }
      /**
       * <pre>
       * Binding value for visibility, which changes the VisibilityState of an
       * Element. This value can override the default visibility value set on an
       * Element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Visibility visibility = 13 [default = VISIBLE];</code>
       */
      public Builder clearVisibility() {
        copyOnWrite();
        instance.clearVisibility();
        return this;
      }

      /**
       * <pre>
       * Use an already existing bound value in a transcluded template.
       * This should be used to pass parameters between templates.
       * For example:
       * Let's assume we have a template that shows a text with styling:
       * template {
       *   id: "StyledText"
       *   ...
       *   element {
       *     text_element {
       *       parameterized_text_binding { binding_id: "StyledTextContent" }
       *     }
       *   }
       *   ...
       * }
       * And we want to create a template that shows the styled text overlayed
       * over an image:
       * template {
       *   id: "ImageWithText"
       *   ...
       *   element {
       *     image_element {
       *       image_binding {
       *         binding_id: "TopLevelImage"
       *       }
       *     }
       *     overlays {
       *       template_invocation {
       *         id: 'StyledText'
       *         binding_contexts {
       *           binding_values {
       *             binding_id: "StyledTextContent"
       *             binding_id_from_transcluding_template: "TopLevelText"
       *           }
       *         }
       *       }
       *     }
       *   }
       *   ...
       * }
       * The invocation of the template will then be:
       * frame {
       *   template_invocation {
       *     id: "ImageWithText"
       *     binding_contexts {
       *       binding_values {
       *         binding_id: "TopLevelText"
       *         ...
       *       }
       *       binding_values {
       *         binding_id: "TopLevelImage"
       *         ...
       *       }
       *     }
       *   }
       * }
       * </pre>
       *
       * <code>optional string binding_id_from_transcluding_template = 16;</code>
       */
      public boolean hasBindingIdFromTranscludingTemplate() {
        return instance.hasBindingIdFromTranscludingTemplate();
      }
      /**
       * <pre>
       * Use an already existing bound value in a transcluded template.
       * This should be used to pass parameters between templates.
       * For example:
       * Let's assume we have a template that shows a text with styling:
       * template {
       *   id: "StyledText"
       *   ...
       *   element {
       *     text_element {
       *       parameterized_text_binding { binding_id: "StyledTextContent" }
       *     }
       *   }
       *   ...
       * }
       * And we want to create a template that shows the styled text overlayed
       * over an image:
       * template {
       *   id: "ImageWithText"
       *   ...
       *   element {
       *     image_element {
       *       image_binding {
       *         binding_id: "TopLevelImage"
       *       }
       *     }
       *     overlays {
       *       template_invocation {
       *         id: 'StyledText'
       *         binding_contexts {
       *           binding_values {
       *             binding_id: "StyledTextContent"
       *             binding_id_from_transcluding_template: "TopLevelText"
       *           }
       *         }
       *       }
       *     }
       *   }
       *   ...
       * }
       * The invocation of the template will then be:
       * frame {
       *   template_invocation {
       *     id: "ImageWithText"
       *     binding_contexts {
       *       binding_values {
       *         binding_id: "TopLevelText"
       *         ...
       *       }
       *       binding_values {
       *         binding_id: "TopLevelImage"
       *         ...
       *       }
       *     }
       *   }
       * }
       * </pre>
       *
       * <code>optional string binding_id_from_transcluding_template = 16;</code>
       */
      public java.lang.String getBindingIdFromTranscludingTemplate() {
        return instance.getBindingIdFromTranscludingTemplate();
      }
      /**
       * <pre>
       * Use an already existing bound value in a transcluded template.
       * This should be used to pass parameters between templates.
       * For example:
       * Let's assume we have a template that shows a text with styling:
       * template {
       *   id: "StyledText"
       *   ...
       *   element {
       *     text_element {
       *       parameterized_text_binding { binding_id: "StyledTextContent" }
       *     }
       *   }
       *   ...
       * }
       * And we want to create a template that shows the styled text overlayed
       * over an image:
       * template {
       *   id: "ImageWithText"
       *   ...
       *   element {
       *     image_element {
       *       image_binding {
       *         binding_id: "TopLevelImage"
       *       }
       *     }
       *     overlays {
       *       template_invocation {
       *         id: 'StyledText'
       *         binding_contexts {
       *           binding_values {
       *             binding_id: "StyledTextContent"
       *             binding_id_from_transcluding_template: "TopLevelText"
       *           }
       *         }
       *       }
       *     }
       *   }
       *   ...
       * }
       * The invocation of the template will then be:
       * frame {
       *   template_invocation {
       *     id: "ImageWithText"
       *     binding_contexts {
       *       binding_values {
       *         binding_id: "TopLevelText"
       *         ...
       *       }
       *       binding_values {
       *         binding_id: "TopLevelImage"
       *         ...
       *       }
       *     }
       *   }
       * }
       * </pre>
       *
       * <code>optional string binding_id_from_transcluding_template = 16;</code>
       */
      public com.google.protobuf.ByteString
          getBindingIdFromTranscludingTemplateBytes() {
        return instance.getBindingIdFromTranscludingTemplateBytes();
      }
      /**
       * <pre>
       * Use an already existing bound value in a transcluded template.
       * This should be used to pass parameters between templates.
       * For example:
       * Let's assume we have a template that shows a text with styling:
       * template {
       *   id: "StyledText"
       *   ...
       *   element {
       *     text_element {
       *       parameterized_text_binding { binding_id: "StyledTextContent" }
       *     }
       *   }
       *   ...
       * }
       * And we want to create a template that shows the styled text overlayed
       * over an image:
       * template {
       *   id: "ImageWithText"
       *   ...
       *   element {
       *     image_element {
       *       image_binding {
       *         binding_id: "TopLevelImage"
       *       }
       *     }
       *     overlays {
       *       template_invocation {
       *         id: 'StyledText'
       *         binding_contexts {
       *           binding_values {
       *             binding_id: "StyledTextContent"
       *             binding_id_from_transcluding_template: "TopLevelText"
       *           }
       *         }
       *       }
       *     }
       *   }
       *   ...
       * }
       * The invocation of the template will then be:
       * frame {
       *   template_invocation {
       *     id: "ImageWithText"
       *     binding_contexts {
       *       binding_values {
       *         binding_id: "TopLevelText"
       *         ...
       *       }
       *       binding_values {
       *         binding_id: "TopLevelImage"
       *         ...
       *       }
       *     }
       *   }
       * }
       * </pre>
       *
       * <code>optional string binding_id_from_transcluding_template = 16;</code>
       */
      public Builder setBindingIdFromTranscludingTemplate(
          java.lang.String value) {
        copyOnWrite();
        instance.setBindingIdFromTranscludingTemplate(value);
        return this;
      }
      /**
       * <pre>
       * Use an already existing bound value in a transcluded template.
       * This should be used to pass parameters between templates.
       * For example:
       * Let's assume we have a template that shows a text with styling:
       * template {
       *   id: "StyledText"
       *   ...
       *   element {
       *     text_element {
       *       parameterized_text_binding { binding_id: "StyledTextContent" }
       *     }
       *   }
       *   ...
       * }
       * And we want to create a template that shows the styled text overlayed
       * over an image:
       * template {
       *   id: "ImageWithText"
       *   ...
       *   element {
       *     image_element {
       *       image_binding {
       *         binding_id: "TopLevelImage"
       *       }
       *     }
       *     overlays {
       *       template_invocation {
       *         id: 'StyledText'
       *         binding_contexts {
       *           binding_values {
       *             binding_id: "StyledTextContent"
       *             binding_id_from_transcluding_template: "TopLevelText"
       *           }
       *         }
       *       }
       *     }
       *   }
       *   ...
       * }
       * The invocation of the template will then be:
       * frame {
       *   template_invocation {
       *     id: "ImageWithText"
       *     binding_contexts {
       *       binding_values {
       *         binding_id: "TopLevelText"
       *         ...
       *       }
       *       binding_values {
       *         binding_id: "TopLevelImage"
       *         ...
       *       }
       *     }
       *   }
       * }
       * </pre>
       *
       * <code>optional string binding_id_from_transcluding_template = 16;</code>
       */
      public Builder clearBindingIdFromTranscludingTemplate() {
        copyOnWrite();
        instance.clearBindingIdFromTranscludingTemplate();
        return this;
      }
      /**
       * <pre>
       * Use an already existing bound value in a transcluded template.
       * This should be used to pass parameters between templates.
       * For example:
       * Let's assume we have a template that shows a text with styling:
       * template {
       *   id: "StyledText"
       *   ...
       *   element {
       *     text_element {
       *       parameterized_text_binding { binding_id: "StyledTextContent" }
       *     }
       *   }
       *   ...
       * }
       * And we want to create a template that shows the styled text overlayed
       * over an image:
       * template {
       *   id: "ImageWithText"
       *   ...
       *   element {
       *     image_element {
       *       image_binding {
       *         binding_id: "TopLevelImage"
       *       }
       *     }
       *     overlays {
       *       template_invocation {
       *         id: 'StyledText'
       *         binding_contexts {
       *           binding_values {
       *             binding_id: "StyledTextContent"
       *             binding_id_from_transcluding_template: "TopLevelText"
       *           }
       *         }
       *       }
       *     }
       *   }
       *   ...
       * }
       * The invocation of the template will then be:
       * frame {
       *   template_invocation {
       *     id: "ImageWithText"
       *     binding_contexts {
       *       binding_values {
       *         binding_id: "TopLevelText"
       *         ...
       *       }
       *       binding_values {
       *         binding_id: "TopLevelImage"
       *         ...
       *       }
       *     }
       *   }
       * }
       * </pre>
       *
       * <code>optional string binding_id_from_transcluding_template = 16;</code>
       */
      public Builder setBindingIdFromTranscludingTemplateBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setBindingIdFromTranscludingTemplateBytes(value);
        return this;
      }

      /**
       * <pre>
       * Style that is bound to an element, and overrides the styles defined by
       * the element. The Style attributes that can be bound are only a subset
       * of all possible Styles.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
       */
      public boolean hasBoundStyle() {
        return instance.hasBoundStyle();
      }
      /**
       * <pre>
       * Style that is bound to an element, and overrides the styles defined by
       * the element. The Style attributes that can be bound are only a subset
       * of all possible Styles.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
       */
      public com.google.search.now.ui.piet.StylesProto.BoundStyle getBoundStyle() {
        return instance.getBoundStyle();
      }
      /**
       * <pre>
       * Style that is bound to an element, and overrides the styles defined by
       * the element. The Style attributes that can be bound are only a subset
       * of all possible Styles.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
       */
      public Builder setBoundStyle(com.google.search.now.ui.piet.StylesProto.BoundStyle value) {
        copyOnWrite();
        instance.setBoundStyle(value);
        return this;
      }
      /**
       * <pre>
       * Style that is bound to an element, and overrides the styles defined by
       * the element. The Style attributes that can be bound are only a subset
       * of all possible Styles.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
       */
      public Builder setBoundStyle(
          com.google.search.now.ui.piet.StylesProto.BoundStyle.Builder builderForValue) {
        copyOnWrite();
        instance.setBoundStyle(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Style that is bound to an element, and overrides the styles defined by
       * the element. The Style attributes that can be bound are only a subset
       * of all possible Styles.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
       */
      public Builder mergeBoundStyle(com.google.search.now.ui.piet.StylesProto.BoundStyle value) {
        copyOnWrite();
        instance.mergeBoundStyle(value);
        return this;
      }
      /**
       * <pre>
       * Style that is bound to an element, and overrides the styles defined by
       * the element. The Style attributes that can be bound are only a subset
       * of all possible Styles.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoundStyle bound_style = 11;</code>
       */
      public Builder clearBoundStyle() {
        copyOnWrite();
        instance.clearBoundStyle();
        return this;
      }

      /**
       * <pre>
       * Width of a cell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
       */
      public boolean hasCellWidth() {
        return instance.hasCellWidth();
      }
      /**
       * <pre>
       * Width of a cell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.GridCellWidth getCellWidth() {
        return instance.getCellWidth();
      }
      /**
       * <pre>
       * Width of a cell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
       */
      public Builder setCellWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth value) {
        copyOnWrite();
        instance.setCellWidth(value);
        return this;
      }
      /**
       * <pre>
       * Width of a cell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
       */
      public Builder setCellWidth(
          com.google.search.now.ui.piet.ElementsProto.GridCellWidth.Builder builderForValue) {
        copyOnWrite();
        instance.setCellWidth(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Width of a cell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
       */
      public Builder mergeCellWidth(com.google.search.now.ui.piet.ElementsProto.GridCellWidth value) {
        copyOnWrite();
        instance.mergeCellWidth(value);
        return this;
      }
      /**
       * <pre>
       * Width of a cell.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.GridCellWidth cell_width = 9;</code>
       */
      public Builder clearCellWidth() {
        copyOnWrite();
        instance.clearCellWidth();
        return this;
      }

      /**
       * <pre>
       * ChunkedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
       */
      public boolean hasChunkedText() {
        return instance.hasChunkedText();
      }
      /**
       * <pre>
       * ChunkedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
       */
      public com.google.search.now.ui.piet.TextProto.ChunkedText getChunkedText() {
        return instance.getChunkedText();
      }
      /**
       * <pre>
       * ChunkedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
       */
      public Builder setChunkedText(com.google.search.now.ui.piet.TextProto.ChunkedText value) {
        copyOnWrite();
        instance.setChunkedText(value);
        return this;
      }
      /**
       * <pre>
       * ChunkedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
       */
      public Builder setChunkedText(
          com.google.search.now.ui.piet.TextProto.ChunkedText.Builder builderForValue) {
        copyOnWrite();
        instance.setChunkedText(builderForValue);
        return this;
      }
      /**
       * <pre>
       * ChunkedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
       */
      public Builder mergeChunkedText(com.google.search.now.ui.piet.TextProto.ChunkedText value) {
        copyOnWrite();
        instance.mergeChunkedText(value);
        return this;
      }
      /**
       * <pre>
       * ChunkedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ChunkedText chunked_text = 4;</code>
       */
      public Builder clearChunkedText() {
        copyOnWrite();
        instance.clearChunkedText();
        return this;
      }

      /**
       * <pre>
       * Data to be displayed in a CustomElement. Clients using Piet should add
       * extensions to this proto to pass their custom data.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
       */
      public boolean hasCustomElementData() {
        return instance.hasCustomElementData();
      }
      /**
       * <pre>
       * Data to be displayed in a CustomElement. Clients using Piet should add
       * extensions to this proto to pass their custom data.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.CustomElementData getCustomElementData() {
        return instance.getCustomElementData();
      }
      /**
       * <pre>
       * Data to be displayed in a CustomElement. Clients using Piet should add
       * extensions to this proto to pass their custom data.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
       */
      public Builder setCustomElementData(com.google.search.now.ui.piet.ElementsProto.CustomElementData value) {
        copyOnWrite();
        instance.setCustomElementData(value);
        return this;
      }
      /**
       * <pre>
       * Data to be displayed in a CustomElement. Clients using Piet should add
       * extensions to this proto to pass their custom data.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
       */
      public Builder setCustomElementData(
          com.google.search.now.ui.piet.ElementsProto.CustomElementData.Builder builderForValue) {
        copyOnWrite();
        instance.setCustomElementData(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Data to be displayed in a CustomElement. Clients using Piet should add
       * extensions to this proto to pass their custom data.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
       */
      public Builder mergeCustomElementData(com.google.search.now.ui.piet.ElementsProto.CustomElementData value) {
        copyOnWrite();
        instance.mergeCustomElementData(value);
        return this;
      }
      /**
       * <pre>
       * Data to be displayed in a CustomElement. Clients using Piet should add
       * extensions to this proto to pass their custom data.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.CustomElementData custom_element_data = 2;</code>
       */
      public Builder clearCustomElementData() {
        copyOnWrite();
        instance.clearCustomElementData();
        return this;
      }

      /**
       * <pre>
       * An Element, to allow binding of generic chunks of layout.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 15;</code>
       */
      public boolean hasElement() {
        return instance.hasElement();
      }
      /**
       * <pre>
       * An Element, to allow binding of generic chunks of layout.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 15;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.Element getElement() {
        return instance.getElement();
      }
      /**
       * <pre>
       * An Element, to allow binding of generic chunks of layout.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 15;</code>
       */
      public Builder setElement(com.google.search.now.ui.piet.ElementsProto.Element value) {
        copyOnWrite();
        instance.setElement(value);
        return this;
      }
      /**
       * <pre>
       * An Element, to allow binding of generic chunks of layout.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 15;</code>
       */
      public Builder setElement(
          com.google.search.now.ui.piet.ElementsProto.Element.Builder builderForValue) {
        copyOnWrite();
        instance.setElement(builderForValue);
        return this;
      }
      /**
       * <pre>
       * An Element, to allow binding of generic chunks of layout.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 15;</code>
       */
      public Builder mergeElement(com.google.search.now.ui.piet.ElementsProto.Element value) {
        copyOnWrite();
        instance.mergeElement(value);
        return this;
      }
      /**
       * <pre>
       * An Element, to allow binding of generic chunks of layout.
       * May have a performance penalty on some platforms.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Element element = 15;</code>
       */
      public Builder clearElement() {
        copyOnWrite();
        instance.clearElement();
        return this;
      }

      /**
       * <pre>
       * Image to be used in an ImageElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 5;</code>
       */
      public boolean hasImage() {
        return instance.hasImage();
      }
      /**
       * <pre>
       * Image to be used in an ImageElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 5;</code>
       */
      public com.google.search.now.ui.piet.ImagesProto.Image getImage() {
        return instance.getImage();
      }
      /**
       * <pre>
       * Image to be used in an ImageElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 5;</code>
       */
      public Builder setImage(com.google.search.now.ui.piet.ImagesProto.Image value) {
        copyOnWrite();
        instance.setImage(value);
        return this;
      }
      /**
       * <pre>
       * Image to be used in an ImageElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 5;</code>
       */
      public Builder setImage(
          com.google.search.now.ui.piet.ImagesProto.Image.Builder builderForValue) {
        copyOnWrite();
        instance.setImage(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Image to be used in an ImageElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 5;</code>
       */
      public Builder mergeImage(com.google.search.now.ui.piet.ImagesProto.Image value) {
        copyOnWrite();
        instance.mergeImage(value);
        return this;
      }
      /**
       * <pre>
       * Image to be used in an ImageElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Image image = 5;</code>
       */
      public Builder clearImage() {
        copyOnWrite();
        instance.clearImage();
        return this;
      }

      /**
       * <pre>
       * ParameterizedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public boolean hasParameterizedText() {
        return instance.hasParameterizedText();
      }
      /**
       * <pre>
       * ParameterizedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public com.google.search.now.ui.piet.TextProto.ParameterizedText getParameterizedText() {
        return instance.getParameterizedText();
      }
      /**
       * <pre>
       * ParameterizedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public Builder setParameterizedText(com.google.search.now.ui.piet.TextProto.ParameterizedText value) {
        copyOnWrite();
        instance.setParameterizedText(value);
        return this;
      }
      /**
       * <pre>
       * ParameterizedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public Builder setParameterizedText(
          com.google.search.now.ui.piet.TextProto.ParameterizedText.Builder builderForValue) {
        copyOnWrite();
        instance.setParameterizedText(builderForValue);
        return this;
      }
      /**
       * <pre>
       * ParameterizedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public Builder mergeParameterizedText(com.google.search.now.ui.piet.TextProto.ParameterizedText value) {
        copyOnWrite();
        instance.mergeParameterizedText(value);
        return this;
      }
      /**
       * <pre>
       * ParameterizedText to be used in a TextElement.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ParameterizedText parameterized_text = 3;</code>
       */
      public Builder clearParameterizedText() {
        copyOnWrite();
        instance.clearParameterizedText();
        return this;
      }

      /**
       * <pre>
       * Binding value for a TemplateInvocation.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
       */
      public boolean hasTemplateInvocation() {
        return instance.hasTemplateInvocation();
      }
      /**
       * <pre>
       * Binding value for a TemplateInvocation.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.TemplateInvocation getTemplateInvocation() {
        return instance.getTemplateInvocation();
      }
      /**
       * <pre>
       * Binding value for a TemplateInvocation.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
       */
      public Builder setTemplateInvocation(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation value) {
        copyOnWrite();
        instance.setTemplateInvocation(value);
        return this;
      }
      /**
       * <pre>
       * Binding value for a TemplateInvocation.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
       */
      public Builder setTemplateInvocation(
          com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.Builder builderForValue) {
        copyOnWrite();
        instance.setTemplateInvocation(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Binding value for a TemplateInvocation.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
       */
      public Builder mergeTemplateInvocation(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation value) {
        copyOnWrite();
        instance.mergeTemplateInvocation(value);
        return this;
      }
      /**
       * <pre>
       * Binding value for a TemplateInvocation.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.TemplateInvocation template_invocation = 8;</code>
       */
      public Builder clearTemplateInvocation() {
        copyOnWrite();
        instance.clearTemplateInvocation();
        return this;
      }

      /**
       * <pre>
       * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to a bound Piet Template.
       * </pre>
       *
       * <code>optional string ved = 7;</code>
       */
      public boolean hasVed() {
        return instance.hasVed();
      }
      /**
       * <pre>
       * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to a bound Piet Template.
       * </pre>
       *
       * <code>optional string ved = 7;</code>
       */
      public java.lang.String getVed() {
        return instance.getVed();
      }
      /**
       * <pre>
       * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to a bound Piet Template.
       * </pre>
       *
       * <code>optional string ved = 7;</code>
       */
      public com.google.protobuf.ByteString
          getVedBytes() {
        return instance.getVedBytes();
      }
      /**
       * <pre>
       * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to a bound Piet Template.
       * </pre>
       *
       * <code>optional string ved = 7;</code>
       */
      public Builder setVed(
          java.lang.String value) {
        copyOnWrite();
        instance.setVed(value);
        return this;
      }
      /**
       * <pre>
       * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to a bound Piet Template.
       * </pre>
       *
       * <code>optional string ved = 7;</code>
       */
      public Builder clearVed() {
        copyOnWrite();
        instance.clearVed();
        return this;
      }
      /**
       * <pre>
       * A Base64-encoded serialized ClickTrackingCGI proto that identifies the
       * logged Visual Element corresponding to a bound Piet Template.
       * </pre>
       *
       * <code>optional string ved = 7;</code>
       */
      public Builder setVedBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setVedBytes(value);
        return this;
      }

      /**
       * <pre>
       * Data to provide a host in order for host to fulfill a binding for Piet.
       * When Piet binds a value it will first look to see if there is a
       * HostBindingData set. If there is one, then Piet asks the host for a new
       * BindingValue to use. The host will be given this BindingValue from which it
       * can use HostBindingData to determine how to create a new BindingValue. This
       * allows the host to selectively alter the server specified BindingValue. If
       * the BindingValue returned by the host has HostBindingData set it will be
       * ignored. If there is no binding provided in the oneof then an error will be
       * raised.  See [INTERNAL LINK] for a list of possible errors that could be
       * raised.
       * Piet will use the binding reference and ask the host for a specific
       * binding based on that reference type. As an example, Piet will request the
       * host for an Image when ImageBindingRef is specified.
       * An example usage of a host binding would be to check if something has
       * been stored on the device and signaling with icons whether content is
       * there or not.  The server can specify where this element will appear and
       * the host can determine what to show or even if the element should be
       * shown.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
       */
      public boolean hasHostBindingData() {
        return instance.hasHostBindingData();
      }
      /**
       * <pre>
       * Data to provide a host in order for host to fulfill a binding for Piet.
       * When Piet binds a value it will first look to see if there is a
       * HostBindingData set. If there is one, then Piet asks the host for a new
       * BindingValue to use. The host will be given this BindingValue from which it
       * can use HostBindingData to determine how to create a new BindingValue. This
       * allows the host to selectively alter the server specified BindingValue. If
       * the BindingValue returned by the host has HostBindingData set it will be
       * ignored. If there is no binding provided in the oneof then an error will be
       * raised.  See [INTERNAL LINK] for a list of possible errors that could be
       * raised.
       * Piet will use the binding reference and ask the host for a specific
       * binding based on that reference type. As an example, Piet will request the
       * host for an Image when ImageBindingRef is specified.
       * An example usage of a host binding would be to check if something has
       * been stored on the device and signaling with icons whether content is
       * there or not.  The server can specify where this element will appear and
       * the host can determine what to show or even if the element should be
       * shown.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
       */
      public com.google.search.now.ui.piet.ElementsProto.HostBindingData getHostBindingData() {
        return instance.getHostBindingData();
      }
      /**
       * <pre>
       * Data to provide a host in order for host to fulfill a binding for Piet.
       * When Piet binds a value it will first look to see if there is a
       * HostBindingData set. If there is one, then Piet asks the host for a new
       * BindingValue to use. The host will be given this BindingValue from which it
       * can use HostBindingData to determine how to create a new BindingValue. This
       * allows the host to selectively alter the server specified BindingValue. If
       * the BindingValue returned by the host has HostBindingData set it will be
       * ignored. If there is no binding provided in the oneof then an error will be
       * raised.  See [INTERNAL LINK] for a list of possible errors that could be
       * raised.
       * Piet will use the binding reference and ask the host for a specific
       * binding based on that reference type. As an example, Piet will request the
       * host for an Image when ImageBindingRef is specified.
       * An example usage of a host binding would be to check if something has
       * been stored on the device and signaling with icons whether content is
       * there or not.  The server can specify where this element will appear and
       * the host can determine what to show or even if the element should be
       * shown.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
       */
      public Builder setHostBindingData(com.google.search.now.ui.piet.ElementsProto.HostBindingData value) {
        copyOnWrite();
        instance.setHostBindingData(value);
        return this;
        }
      /**
       * <pre>
       * Data to provide a host in order for host to fulfill a binding for Piet.
       * When Piet binds a value it will first look to see if there is a
       * HostBindingData set. If there is one, then Piet asks the host for a new
       * BindingValue to use. The host will be given this BindingValue from which it
       * can use HostBindingData to determine how to create a new BindingValue. This
       * allows the host to selectively alter the server specified BindingValue. If
       * the BindingValue returned by the host has HostBindingData set it will be
       * ignored. If there is no binding provided in the oneof then an error will be
       * raised.  See [INTERNAL LINK] for a list of possible errors that could be
       * raised.
       * Piet will use the binding reference and ask the host for a specific
       * binding based on that reference type. As an example, Piet will request the
       * host for an Image when ImageBindingRef is specified.
       * An example usage of a host binding would be to check if something has
       * been stored on the device and signaling with icons whether content is
       * there or not.  The server can specify where this element will appear and
       * the host can determine what to show or even if the element should be
       * shown.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
       */
      public Builder setHostBindingData(
          com.google.search.now.ui.piet.ElementsProto.HostBindingData.Builder builderForValue) {
        copyOnWrite();
        instance.setHostBindingData(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Data to provide a host in order for host to fulfill a binding for Piet.
       * When Piet binds a value it will first look to see if there is a
       * HostBindingData set. If there is one, then Piet asks the host for a new
       * BindingValue to use. The host will be given this BindingValue from which it
       * can use HostBindingData to determine how to create a new BindingValue. This
       * allows the host to selectively alter the server specified BindingValue. If
       * the BindingValue returned by the host has HostBindingData set it will be
       * ignored. If there is no binding provided in the oneof then an error will be
       * raised.  See [INTERNAL LINK] for a list of possible errors that could be
       * raised.
       * Piet will use the binding reference and ask the host for a specific
       * binding based on that reference type. As an example, Piet will request the
       * host for an Image when ImageBindingRef is specified.
       * An example usage of a host binding would be to check if something has
       * been stored on the device and signaling with icons whether content is
       * there or not.  The server can specify where this element will appear and
       * the host can determine what to show or even if the element should be
       * shown.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
       */
      public Builder mergeHostBindingData(com.google.search.now.ui.piet.ElementsProto.HostBindingData value) {
        copyOnWrite();
        instance.mergeHostBindingData(value);
        return this;
      }
      /**
       * <pre>
       * Data to provide a host in order for host to fulfill a binding for Piet.
       * When Piet binds a value it will first look to see if there is a
       * HostBindingData set. If there is one, then Piet asks the host for a new
       * BindingValue to use. The host will be given this BindingValue from which it
       * can use HostBindingData to determine how to create a new BindingValue. This
       * allows the host to selectively alter the server specified BindingValue. If
       * the BindingValue returned by the host has HostBindingData set it will be
       * ignored. If there is no binding provided in the oneof then an error will be
       * raised.  See [INTERNAL LINK] for a list of possible errors that could be
       * raised.
       * Piet will use the binding reference and ask the host for a specific
       * binding based on that reference type. As an example, Piet will request the
       * host for an Image when ImageBindingRef is specified.
       * An example usage of a host binding would be to check if something has
       * been stored on the device and signaling with icons whether content is
       * there or not.  The server can specify where this element will appear and
       * the host can determine what to show or even if the element should be
       * shown.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.HostBindingData host_binding_data = 14;</code>
       */
      public Builder clearHostBindingData() {  copyOnWrite();
        instance.clearHostBindingData();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.BindingValue)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.BindingValue();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasActions()) {
            if (!getActions().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasBoundStyle()) {
            if (!getBoundStyle().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasChunkedText()) {
            if (!getChunkedText().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasCustomElementData()) {
            if (!getCustomElementData().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasElement()) {
            if (!getElement().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasImage()) {
            if (!getImage().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasTemplateInvocation()) {
            if (!getTemplateInvocation().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasHostBindingData()) {
            if (!getHostBindingData().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.BindingValue other = (com.google.search.now.ui.piet.ElementsProto.BindingValue) arg1;
          bindingId_ = visitor.visitString(
              hasBindingId(), bindingId_,
              other.hasBindingId(), other.bindingId_);
          hostBindingData_ = visitor.visitMessage(hostBindingData_, other.hostBindingData_);
          switch (other.getValuesCase()) {
            case ACTIONS: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 10,
                  values_,
                  other.values_);
              break;
            }
            case VISIBILITY: {
              values_ = visitor.visitOneofInt(
                 valuesCase_ == 13, values_, other.values_);
              break;
            }
            case BINDING_ID_FROM_TRANSCLUDING_TEMPLATE: {
              values_ = visitor.visitOneofString(
                 valuesCase_ == 16, values_, other.values_);
              break;
            }
            case BOUND_STYLE: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 11,
                  values_,
                  other.values_);
              break;
            }
            case CELL_WIDTH: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 9,
                  values_,
                  other.values_);
              break;
            }
            case CHUNKED_TEXT: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 4,
                  values_,
                  other.values_);
              break;
            }
            case CUSTOM_ELEMENT_DATA: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 2,
                  values_,
                  other.values_);
              break;
            }
            case ELEMENT: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 15,
                  values_,
                  other.values_);
              break;
            }
            case IMAGE: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 5,
                  values_,
                  other.values_);
              break;
            }
            case PARAMETERIZED_TEXT: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 3,
                  values_,
                  other.values_);
              break;
            }
            case TEMPLATE_INVOCATION: {
              values_ = visitor.visitOneofMessage(
                  valuesCase_ == 8,
                  values_,
                  other.values_);
              break;
            }
            case VED: {
              values_ = visitor.visitOneofString(
                 valuesCase_ == 7, values_, other.values_);
              break;
            }
            case VALUES_NOT_SET: {
              visitor.visitOneofNotSet(valuesCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.valuesCase_ != 0) {
              valuesCase_ = other.valuesCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readString();
                  bitField0_ |= 0x00000001;
                  bindingId_ = s;
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.ElementsProto.CustomElementData.Builder subBuilder = null;
                  if (valuesCase_ == 2) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.CustomElementData) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.CustomElementData.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.CustomElementData) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 2;
                  break;
                }
                case 26: {
                  com.google.search.now.ui.piet.TextProto.ParameterizedText.Builder subBuilder = null;
                  if (valuesCase_ == 3) {
                    subBuilder = ((com.google.search.now.ui.piet.TextProto.ParameterizedText) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.TextProto.ParameterizedText.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.TextProto.ParameterizedText) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 3;
                  break;
                }
                case 34: {
                  com.google.search.now.ui.piet.TextProto.ChunkedText.Builder subBuilder = null;
                  if (valuesCase_ == 4) {
                    subBuilder = ((com.google.search.now.ui.piet.TextProto.ChunkedText) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.TextProto.ChunkedText.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.TextProto.ChunkedText) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 4;
                  break;
                }
                case 42: {
                  com.google.search.now.ui.piet.ImagesProto.Image.Builder subBuilder = null;
                  if (valuesCase_ == 5) {
                    subBuilder = ((com.google.search.now.ui.piet.ImagesProto.Image) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.ImagesProto.Image.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ImagesProto.Image) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 5;
                  break;
                }
                case 58: {
                  String s = input.readString();
                  valuesCase_ = 7;
                  values_ = s;
                  break;
                }
                case 66: {
                  com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.Builder subBuilder = null;
                  if (valuesCase_ == 8) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.TemplateInvocation.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.TemplateInvocation) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 8;
                  break;
                }
                case 74: {
                  com.google.search.now.ui.piet.ElementsProto.GridCellWidth.Builder subBuilder = null;
                  if (valuesCase_ == 9) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.GridCellWidth) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.GridCellWidth.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.GridCellWidth) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 9;
                  break;
                }
                case 82: {
                  com.google.search.now.ui.piet.ActionsProto.Actions.Builder subBuilder = null;
                  if (valuesCase_ == 10) {
                    subBuilder = ((com.google.search.now.ui.piet.ActionsProto.Actions) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.ActionsProto.Actions.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ActionsProto.Actions) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 10;
                  break;
                }
                case 90: {
                  com.google.search.now.ui.piet.StylesProto.BoundStyle.Builder subBuilder = null;
                  if (valuesCase_ == 11) {
                    subBuilder = ((com.google.search.now.ui.piet.StylesProto.BoundStyle) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.StylesProto.BoundStyle.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.StylesProto.BoundStyle) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 11;
                  break;
                }
                case 104: {
                  int rawValue = input.readEnum();
                  com.google.search.now.ui.piet.ElementsProto.Visibility value = com.google.search.now.ui.piet.ElementsProto.Visibility.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(13, rawValue);
                  } else {
                    valuesCase_ = 13;
                    values_ = rawValue;
                  }
                  break;
                }
                case 114: {
                  com.google.search.now.ui.piet.ElementsProto.HostBindingData.Builder subBuilder = null;
                  if (((bitField0_ & 0x00002000) == 0x00002000)) {
                    subBuilder = hostBindingData_.toBuilder();
                  }
                  hostBindingData_ = input.readMessage(com.google.search.now.ui.piet.ElementsProto.HostBindingData.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(hostBindingData_);
                    hostBindingData_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00002000;
                  break;
                }
                case 122: {
                  com.google.search.now.ui.piet.ElementsProto.Element.Builder subBuilder = null;
                  if (valuesCase_ == 15) {
                    subBuilder = ((com.google.search.now.ui.piet.ElementsProto.Element) values_).toBuilder();
                  }
                  values_ =
                       input.readMessage(com.google.search.now.ui.piet.ElementsProto.Element.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((com.google.search.now.ui.piet.ElementsProto.Element) values_);
                    values_ = subBuilder.buildPartial();
                  }
                  valuesCase_ = 15;
                  break;
                }
                case 130: {
                  String s = input.readString();
                  valuesCase_ = 16;
                  values_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.BindingValue.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.BindingValue)
    private static final com.google.search.now.ui.piet.ElementsProto.BindingValue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new BindingValue();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.BindingValue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<BindingValue> PARSER;

    public static com.google.protobuf.Parser<BindingValue> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface HostBindingDataOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.HostBindingData)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                HostBindingData, HostBindingData.Builder> {
  }
  /**
   * <pre>
   * Data which is accompanied with BindingValue in order for a host to determine
   * the information it needs to provide the correct BindingValue to fulfill a
   * binding reference.  Client using Piet should add extensions to this proto to
   * pass their host specific data needed to fulfill the binding reference.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.HostBindingData}
   */
  public  static final class HostBindingData extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        HostBindingData, HostBindingData.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.HostBindingData)
      HostBindingDataOrBuilder {
    private HostBindingData() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ElementsProto.HostBindingData, com.google.search.now.ui.piet.ElementsProto.HostBindingData.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ElementsProto.HostBindingData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Data which is accompanied with BindingValue in order for a host to determine
     * the information it needs to provide the correct BindingValue to fulfill a
     * binding reference.  Client using Piet should add extensions to this proto to
     * pass their host specific data needed to fulfill the binding reference.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.HostBindingData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ElementsProto.HostBindingData, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.HostBindingData)
        com.google.search.now.ui.piet.ElementsProto.HostBindingDataOrBuilder {
      // Construct using com.google.search.now.ui.piet.ElementsProto.HostBindingData.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.HostBindingData)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ElementsProto.HostBindingData();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ElementsProto.HostBindingData other = (com.google.search.now.ui.piet.ElementsProto.HostBindingData) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ElementsProto.HostBindingData.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.HostBindingData)
    private static final com.google.search.now.ui.piet.ElementsProto.HostBindingData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new HostBindingData();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ElementsProto.HostBindingData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<HostBindingData> PARSER;

    public static com.google.protobuf.Parser<HostBindingData> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
