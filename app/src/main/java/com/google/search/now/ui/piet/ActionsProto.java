// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/search/now/ui/piet/actions.proto

package com.google.search.now.ui.piet;

public final class ActionsProto {
  private ActionsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ActionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.Actions)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Action to be executed when the user taps (clicks) on a UI element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
     */
    boolean hasOnClickAction();
    /**
     * <pre>
     * Action to be executed when the user taps (clicks) on a UI element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
     */
    com.google.search.now.ui.piet.ActionsProto.Action getOnClickAction();

    /**
     * <pre>
     * Action to be executed when the user long-clicks (taps &amp; holds) a UI
     * element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
     */
    boolean hasOnLongClickAction();
    /**
     * <pre>
     * Action to be executed when the user long-clicks (taps &amp; holds) a UI
     * element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
     */
    com.google.search.now.ui.piet.ActionsProto.Action getOnLongClickAction();

    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    java.util.List<com.google.search.now.ui.piet.ActionsProto.VisibilityAction> 
        getOnViewActionsList();
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    com.google.search.now.ui.piet.ActionsProto.VisibilityAction getOnViewActions(int index);
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    int getOnViewActionsCount();

    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    java.util.List<com.google.search.now.ui.piet.ActionsProto.VisibilityAction> 
        getOnHideActionsList();
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    com.google.search.now.ui.piet.ActionsProto.VisibilityAction getOnHideActions(int index);
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    int getOnHideActionsCount();
  }
  /**
   * <pre>
   * Multiple actions can be associated with every UI element. To keep the set of
   * Actions consistent among multiple UI elements, theyâ€™re all defined in a
   * dedicated message.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.Actions}
   */
  public  static final class Actions extends
      com.google.protobuf.GeneratedMessageLite<
          Actions, Actions.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.Actions)
      ActionsOrBuilder {
    private Actions() {
      onViewActions_ = emptyProtobufList();
      onHideActions_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int ON_CLICK_ACTION_FIELD_NUMBER = 1;
    private com.google.search.now.ui.piet.ActionsProto.Action onClickAction_;
    /**
     * <pre>
     * Action to be executed when the user taps (clicks) on a UI element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
     */
    public boolean hasOnClickAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Action to be executed when the user taps (clicks) on a UI element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.Action getOnClickAction() {
      return onClickAction_ == null ? com.google.search.now.ui.piet.ActionsProto.Action.getDefaultInstance() : onClickAction_;
    }
    /**
     * <pre>
     * Action to be executed when the user taps (clicks) on a UI element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
     */
    private void setOnClickAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
      if (value == null) {
        throw new NullPointerException();
      }
      onClickAction_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Action to be executed when the user taps (clicks) on a UI element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
     */
    private void setOnClickAction(
        com.google.search.now.ui.piet.ActionsProto.Action.Builder builderForValue) {
      onClickAction_ = builderForValue.build();
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Action to be executed when the user taps (clicks) on a UI element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
     */
    private void mergeOnClickAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
      if (onClickAction_ != null &&
          onClickAction_ != com.google.search.now.ui.piet.ActionsProto.Action.getDefaultInstance()) {
        onClickAction_ =
          com.google.search.now.ui.piet.ActionsProto.Action.newBuilder(onClickAction_).mergeFrom(value).buildPartial();
      } else {
        onClickAction_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Action to be executed when the user taps (clicks) on a UI element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
     */
    private void clearOnClickAction() {  onClickAction_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int ON_LONG_CLICK_ACTION_FIELD_NUMBER = 2;
    private com.google.search.now.ui.piet.ActionsProto.Action onLongClickAction_;
    /**
     * <pre>
     * Action to be executed when the user long-clicks (taps &amp; holds) a UI
     * element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
     */
    public boolean hasOnLongClickAction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Action to be executed when the user long-clicks (taps &amp; holds) a UI
     * element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.Action getOnLongClickAction() {
      return onLongClickAction_ == null ? com.google.search.now.ui.piet.ActionsProto.Action.getDefaultInstance() : onLongClickAction_;
    }
    /**
     * <pre>
     * Action to be executed when the user long-clicks (taps &amp; holds) a UI
     * element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
     */
    private void setOnLongClickAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
      if (value == null) {
        throw new NullPointerException();
      }
      onLongClickAction_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Action to be executed when the user long-clicks (taps &amp; holds) a UI
     * element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
     */
    private void setOnLongClickAction(
        com.google.search.now.ui.piet.ActionsProto.Action.Builder builderForValue) {
      onLongClickAction_ = builderForValue.build();
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Action to be executed when the user long-clicks (taps &amp; holds) a UI
     * element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
     */
    private void mergeOnLongClickAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
      if (onLongClickAction_ != null &&
          onLongClickAction_ != com.google.search.now.ui.piet.ActionsProto.Action.getDefaultInstance()) {
        onLongClickAction_ =
          com.google.search.now.ui.piet.ActionsProto.Action.newBuilder(onLongClickAction_).mergeFrom(value).buildPartial();
      } else {
        onLongClickAction_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Action to be executed when the user long-clicks (taps &amp; holds) a UI
     * element.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
     */
    private void clearOnLongClickAction() {  onLongClickAction_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int ON_VIEW_ACTIONS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<com.google.search.now.ui.piet.ActionsProto.VisibilityAction> onViewActions_;
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    public java.util.List<com.google.search.now.ui.piet.ActionsProto.VisibilityAction> getOnViewActionsList() {
      return onViewActions_;
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    public java.util.List<? extends com.google.search.now.ui.piet.ActionsProto.VisibilityActionOrBuilder> 
        getOnViewActionsOrBuilderList() {
      return onViewActions_;
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    public int getOnViewActionsCount() {
      return onViewActions_.size();
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.VisibilityAction getOnViewActions(int index) {
      return onViewActions_.get(index);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.VisibilityActionOrBuilder getOnViewActionsOrBuilder(
        int index) {
      return onViewActions_.get(index);
    }
    private void ensureOnViewActionsIsMutable() {
      if (!onViewActions_.isModifiable()) {
        onViewActions_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(onViewActions_);
       }
    }

    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void setOnViewActions(
        int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOnViewActionsIsMutable();
      onViewActions_.set(index, value);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void setOnViewActions(
        int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
      ensureOnViewActionsIsMutable();
      onViewActions_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void addOnViewActions(com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOnViewActionsIsMutable();
      onViewActions_.add(value);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void addOnViewActions(
        int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOnViewActionsIsMutable();
      onViewActions_.add(index, value);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void addOnViewActions(
        com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
      ensureOnViewActionsIsMutable();
      onViewActions_.add(builderForValue.build());
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void addOnViewActions(
        int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
      ensureOnViewActionsIsMutable();
      onViewActions_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void addAllOnViewActions(
        java.lang.Iterable<? extends com.google.search.now.ui.piet.ActionsProto.VisibilityAction> values) {
      ensureOnViewActionsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, onViewActions_);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void clearOnViewActions() {
      onViewActions_ = emptyProtobufList();
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility below the threshold
     * goes above the threshold
     * Ex. A view action at 0.5 will trigger when a view that was less than half
     * visible becomes half visible, and not trigger again until the view has
     * become less than half visible (reset) and then becomes more than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
     */
    private void removeOnViewActions(int index) {
      ensureOnViewActionsIsMutable();
      onViewActions_.remove(index);
    }

    public static final int ON_HIDE_ACTIONS_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<com.google.search.now.ui.piet.ActionsProto.VisibilityAction> onHideActions_;
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    public java.util.List<com.google.search.now.ui.piet.ActionsProto.VisibilityAction> getOnHideActionsList() {
      return onHideActions_;
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    public java.util.List<? extends com.google.search.now.ui.piet.ActionsProto.VisibilityActionOrBuilder> 
        getOnHideActionsOrBuilderList() {
      return onHideActions_;
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    public int getOnHideActionsCount() {
      return onHideActions_.size();
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.VisibilityAction getOnHideActions(int index) {
      return onHideActions_.get(index);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.VisibilityActionOrBuilder getOnHideActionsOrBuilder(
        int index) {
      return onHideActions_.get(index);
    }
    private void ensureOnHideActionsIsMutable() {
      if (!onHideActions_.isModifiable()) {
        onHideActions_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(onHideActions_);
       }
    }

    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void setOnHideActions(
        int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOnHideActionsIsMutable();
      onHideActions_.set(index, value);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void setOnHideActions(
        int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
      ensureOnHideActionsIsMutable();
      onHideActions_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void addOnHideActions(com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOnHideActionsIsMutable();
      onHideActions_.add(value);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void addOnHideActions(
        int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureOnHideActionsIsMutable();
      onHideActions_.add(index, value);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void addOnHideActions(
        com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
      ensureOnHideActionsIsMutable();
      onHideActions_.add(builderForValue.build());
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void addOnHideActions(
        int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
      ensureOnHideActionsIsMutable();
      onHideActions_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void addAllOnHideActions(
        java.lang.Iterable<? extends com.google.search.now.ui.piet.ActionsProto.VisibilityAction> values) {
      ensureOnHideActionsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, onHideActions_);
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void clearOnHideActions() {
      onHideActions_ = emptyProtobufList();
    }
    /**
     * <pre>
     * These actions will fire once a view with visibility above the threshold
     * goes below the threshold.
     * Ex. A hide action at 0.5 will trigger when a view that was half visible
     * becomes less than half visible, and not trigger again until the view has
     * become more than half visible (reset) and then becomes less than half
     * visible.
     * </pre>
     *
     * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
     */
    private void removeOnHideActions(int index) {
      ensureOnHideActionsIsMutable();
      onHideActions_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getOnClickAction());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getOnLongClickAction());
      }
      for (int i = 0; i < onViewActions_.size(); i++) {
        output.writeMessage(3, onViewActions_.get(i));
      }
      for (int i = 0; i < onHideActions_.size(); i++) {
        output.writeMessage(4, onHideActions_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOnClickAction());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOnLongClickAction());
      }
      for (int i = 0; i < onViewActions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, onViewActions_.get(i));
      }
      for (int i = 0; i < onHideActions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, onHideActions_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ActionsProto.Actions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Actions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ActionsProto.Actions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Multiple actions can be associated with every UI element. To keep the set of
     * Actions consistent among multiple UI elements, theyâ€™re all defined in a
     * dedicated message.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.Actions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ActionsProto.Actions, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.Actions)
        com.google.search.now.ui.piet.ActionsProto.ActionsOrBuilder {
      // Construct using com.google.search.now.ui.piet.ActionsProto.Actions.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Action to be executed when the user taps (clicks) on a UI element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
       */
      public boolean hasOnClickAction() {
        return instance.hasOnClickAction();
      }
      /**
       * <pre>
       * Action to be executed when the user taps (clicks) on a UI element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
       */
      public com.google.search.now.ui.piet.ActionsProto.Action getOnClickAction() {
        return instance.getOnClickAction();
      }
      /**
       * <pre>
       * Action to be executed when the user taps (clicks) on a UI element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
       */
      public Builder setOnClickAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
        copyOnWrite();
        instance.setOnClickAction(value);
        return this;
        }
      /**
       * <pre>
       * Action to be executed when the user taps (clicks) on a UI element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
       */
      public Builder setOnClickAction(
          com.google.search.now.ui.piet.ActionsProto.Action.Builder builderForValue) {
        copyOnWrite();
        instance.setOnClickAction(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Action to be executed when the user taps (clicks) on a UI element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
       */
      public Builder mergeOnClickAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
        copyOnWrite();
        instance.mergeOnClickAction(value);
        return this;
      }
      /**
       * <pre>
       * Action to be executed when the user taps (clicks) on a UI element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_click_action = 1;</code>
       */
      public Builder clearOnClickAction() {  copyOnWrite();
        instance.clearOnClickAction();
        return this;
      }

      /**
       * <pre>
       * Action to be executed when the user long-clicks (taps &amp; holds) a UI
       * element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
       */
      public boolean hasOnLongClickAction() {
        return instance.hasOnLongClickAction();
      }
      /**
       * <pre>
       * Action to be executed when the user long-clicks (taps &amp; holds) a UI
       * element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
       */
      public com.google.search.now.ui.piet.ActionsProto.Action getOnLongClickAction() {
        return instance.getOnLongClickAction();
      }
      /**
       * <pre>
       * Action to be executed when the user long-clicks (taps &amp; holds) a UI
       * element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
       */
      public Builder setOnLongClickAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
        copyOnWrite();
        instance.setOnLongClickAction(value);
        return this;
        }
      /**
       * <pre>
       * Action to be executed when the user long-clicks (taps &amp; holds) a UI
       * element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
       */
      public Builder setOnLongClickAction(
          com.google.search.now.ui.piet.ActionsProto.Action.Builder builderForValue) {
        copyOnWrite();
        instance.setOnLongClickAction(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Action to be executed when the user long-clicks (taps &amp; holds) a UI
       * element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
       */
      public Builder mergeOnLongClickAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
        copyOnWrite();
        instance.mergeOnLongClickAction(value);
        return this;
      }
      /**
       * <pre>
       * Action to be executed when the user long-clicks (taps &amp; holds) a UI
       * element.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action on_long_click_action = 2;</code>
       */
      public Builder clearOnLongClickAction() {  copyOnWrite();
        instance.clearOnLongClickAction();
        return this;
      }

      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public java.util.List<com.google.search.now.ui.piet.ActionsProto.VisibilityAction> getOnViewActionsList() {
        return java.util.Collections.unmodifiableList(
            instance.getOnViewActionsList());
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public int getOnViewActionsCount() {
        return instance.getOnViewActionsCount();
      }/**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public com.google.search.now.ui.piet.ActionsProto.VisibilityAction getOnViewActions(int index) {
        return instance.getOnViewActions(index);
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder setOnViewActions(
          int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
        copyOnWrite();
        instance.setOnViewActions(index, value);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder setOnViewActions(
          int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
        copyOnWrite();
        instance.setOnViewActions(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder addOnViewActions(com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
        copyOnWrite();
        instance.addOnViewActions(value);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder addOnViewActions(
          int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
        copyOnWrite();
        instance.addOnViewActions(index, value);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder addOnViewActions(
          com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
        copyOnWrite();
        instance.addOnViewActions(builderForValue);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder addOnViewActions(
          int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
        copyOnWrite();
        instance.addOnViewActions(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder addAllOnViewActions(
          java.lang.Iterable<? extends com.google.search.now.ui.piet.ActionsProto.VisibilityAction> values) {
        copyOnWrite();
        instance.addAllOnViewActions(values);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder clearOnViewActions() {
        copyOnWrite();
        instance.clearOnViewActions();
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility below the threshold
       * goes above the threshold
       * Ex. A view action at 0.5 will trigger when a view that was less than half
       * visible becomes half visible, and not trigger again until the view has
       * become less than half visible (reset) and then becomes more than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_view_actions = 3;</code>
       */
      public Builder removeOnViewActions(int index) {
        copyOnWrite();
        instance.removeOnViewActions(index);
        return this;
      }

      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public java.util.List<com.google.search.now.ui.piet.ActionsProto.VisibilityAction> getOnHideActionsList() {
        return java.util.Collections.unmodifiableList(
            instance.getOnHideActionsList());
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public int getOnHideActionsCount() {
        return instance.getOnHideActionsCount();
      }/**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public com.google.search.now.ui.piet.ActionsProto.VisibilityAction getOnHideActions(int index) {
        return instance.getOnHideActions(index);
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder setOnHideActions(
          int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
        copyOnWrite();
        instance.setOnHideActions(index, value);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder setOnHideActions(
          int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
        copyOnWrite();
        instance.setOnHideActions(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder addOnHideActions(com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
        copyOnWrite();
        instance.addOnHideActions(value);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder addOnHideActions(
          int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction value) {
        copyOnWrite();
        instance.addOnHideActions(index, value);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder addOnHideActions(
          com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
        copyOnWrite();
        instance.addOnHideActions(builderForValue);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder addOnHideActions(
          int index, com.google.search.now.ui.piet.ActionsProto.VisibilityAction.Builder builderForValue) {
        copyOnWrite();
        instance.addOnHideActions(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder addAllOnHideActions(
          java.lang.Iterable<? extends com.google.search.now.ui.piet.ActionsProto.VisibilityAction> values) {
        copyOnWrite();
        instance.addAllOnHideActions(values);
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder clearOnHideActions() {
        copyOnWrite();
        instance.clearOnHideActions();
        return this;
      }
      /**
       * <pre>
       * These actions will fire once a view with visibility above the threshold
       * goes below the threshold.
       * Ex. A hide action at 0.5 will trigger when a view that was half visible
       * becomes less than half visible, and not trigger again until the view has
       * become more than half visible (reset) and then becomes less than half
       * visible.
       * </pre>
       *
       * <code>repeated .search.now.ui.piet.VisibilityAction on_hide_actions = 4;</code>
       */
      public Builder removeOnHideActions(int index) {
        copyOnWrite();
        instance.removeOnHideActions(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.Actions)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ActionsProto.Actions();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasOnClickAction()) {
            if (!getOnClickAction().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasOnLongClickAction()) {
            if (!getOnLongClickAction().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          for (int i = 0; i < getOnViewActionsCount(); i++) {
            if (!getOnViewActions(i).isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          for (int i = 0; i < getOnHideActionsCount(); i++) {
            if (!getOnHideActions(i).isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          onViewActions_.makeImmutable();
          onHideActions_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ActionsProto.Actions other = (com.google.search.now.ui.piet.ActionsProto.Actions) arg1;
          onClickAction_ = visitor.visitMessage(onClickAction_, other.onClickAction_);
          onLongClickAction_ = visitor.visitMessage(onLongClickAction_, other.onLongClickAction_);
          onViewActions_= visitor.visitList(onViewActions_, other.onViewActions_);
          onHideActions_= visitor.visitList(onHideActions_, other.onHideActions_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.ActionsProto.Action.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = onClickAction_.toBuilder();
                  }
                  onClickAction_ = input.readMessage(com.google.search.now.ui.piet.ActionsProto.Action.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(onClickAction_);
                    onClickAction_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.ActionsProto.Action.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = onLongClickAction_.toBuilder();
                  }
                  onLongClickAction_ = input.readMessage(com.google.search.now.ui.piet.ActionsProto.Action.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(onLongClickAction_);
                    onLongClickAction_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
                case 26: {
                  if (!onViewActions_.isModifiable()) {
                    onViewActions_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(onViewActions_);
                  }
                  onViewActions_.add(
                      input.readMessage(com.google.search.now.ui.piet.ActionsProto.VisibilityAction.parser(), extensionRegistry));
                  break;
                }
                case 34: {
                  if (!onHideActions_.isModifiable()) {
                    onHideActions_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(onHideActions_);
                  }
                  onHideActions_.add(
                      input.readMessage(com.google.search.now.ui.piet.ActionsProto.VisibilityAction.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ActionsProto.Actions.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.Actions)
    private static final com.google.search.now.ui.piet.ActionsProto.Actions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Actions();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ActionsProto.Actions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Actions> PARSER;

    public static com.google.protobuf.Parser<Actions> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ActionOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.Action)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Action, Action.Builder> {
  }
  /**
   * <pre>
   * Defines an Action which can be raised when the user clicks a UI element. The
   * action can be defined for the full slice or something inside a slice such as
   * a suggestion chip. All Actions should be defined as extensions, donâ€™t define
   * fields in this proto directly.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.Action}
   */
  public  static final class Action extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        Action, Action.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.Action)
      ActionOrBuilder {
    private Action() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<com.google.search.now.ui.piet.ActionsProto.Action, com.google.search.now.ui.piet.ActionsProto.Action.Builder>
          .ExtensionWriter extensionWriter =
            newExtensionWriter();
      extensionWriter.writeUntil(536870912, output);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += extensionsSerializedSize();
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ActionsProto.Action parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.Action parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ActionsProto.Action prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Defines an Action which can be raised when the user clicks a UI element. The
     * action can be defined for the full slice or something inside a slice such as
     * a suggestion chip. All Actions should be defined as extensions, donâ€™t define
     * fields in this proto directly.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.Action}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          com.google.search.now.ui.piet.ActionsProto.Action, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.Action)
        com.google.search.now.ui.piet.ActionsProto.ActionOrBuilder {
      // Construct using com.google.search.now.ui.piet.ActionsProto.Action.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.Action)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ActionsProto.Action();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!extensionsAreInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ActionsProto.Action other = (com.google.search.now.ui.piet.ActionsProto.Action) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(getDefaultInstanceForType(),
                                         input, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ActionsProto.Action.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.Action)
    private static final com.google.search.now.ui.piet.ActionsProto.Action DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Action();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ActionsProto.Action getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Action> PARSER;

    public static com.google.protobuf.Parser<Action> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VisibilityActionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.VisibilityAction)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Proportion of the view that should be visible for this action to trigger
     * [0.0 to 1.0]
     * Defaults to 1.0 to make this an "on full view" action.
     * </pre>
     *
     * <code>optional float proportion_visible = 1 [default = 1];</code>
     */
    boolean hasProportionVisible();
    /**
     * <pre>
     * Proportion of the view that should be visible for this action to trigger
     * [0.0 to 1.0]
     * Defaults to 1.0 to make this an "on full view" action.
     * </pre>
     *
     * <code>optional float proportion_visible = 1 [default = 1];</code>
     */
    float getProportionVisible();

    /**
     * <pre>
     * Action to trigger at the given visibility threshold
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action action = 2;</code>
     */
    boolean hasAction();
    /**
     * <pre>
     * Action to trigger at the given visibility threshold
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action action = 2;</code>
     */
    com.google.search.now.ui.piet.ActionsProto.Action getAction();
  }
  /**
   * <pre>
   * Actions that trigger based on the proportion of the parent Element that is
   * visible.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.VisibilityAction}
   */
  public  static final class VisibilityAction extends
      com.google.protobuf.GeneratedMessageLite<
          VisibilityAction, VisibilityAction.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.VisibilityAction)
      VisibilityActionOrBuilder {
    private VisibilityAction() {
      proportionVisible_ = 1F;
    }
    private int bitField0_;
    public static final int PROPORTION_VISIBLE_FIELD_NUMBER = 1;
    private float proportionVisible_;
    /**
     * <pre>
     * Proportion of the view that should be visible for this action to trigger
     * [0.0 to 1.0]
     * Defaults to 1.0 to make this an "on full view" action.
     * </pre>
     *
     * <code>optional float proportion_visible = 1 [default = 1];</code>
     */
    public boolean hasProportionVisible() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Proportion of the view that should be visible for this action to trigger
     * [0.0 to 1.0]
     * Defaults to 1.0 to make this an "on full view" action.
     * </pre>
     *
     * <code>optional float proportion_visible = 1 [default = 1];</code>
     */
    public float getProportionVisible() {
      return proportionVisible_;
    }
    /**
     * <pre>
     * Proportion of the view that should be visible for this action to trigger
     * [0.0 to 1.0]
     * Defaults to 1.0 to make this an "on full view" action.
     * </pre>
     *
     * <code>optional float proportion_visible = 1 [default = 1];</code>
     */
    private void setProportionVisible(float value) {
      bitField0_ |= 0x00000001;
      proportionVisible_ = value;
    }
    /**
     * <pre>
     * Proportion of the view that should be visible for this action to trigger
     * [0.0 to 1.0]
     * Defaults to 1.0 to make this an "on full view" action.
     * </pre>
     *
     * <code>optional float proportion_visible = 1 [default = 1];</code>
     */
    private void clearProportionVisible() {
      bitField0_ = (bitField0_ & ~0x00000001);
      proportionVisible_ = 1F;
    }

    public static final int ACTION_FIELD_NUMBER = 2;
    private com.google.search.now.ui.piet.ActionsProto.Action action_;
    /**
     * <pre>
     * Action to trigger at the given visibility threshold
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action action = 2;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Action to trigger at the given visibility threshold
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action action = 2;</code>
     */
    public com.google.search.now.ui.piet.ActionsProto.Action getAction() {
      return action_ == null ? com.google.search.now.ui.piet.ActionsProto.Action.getDefaultInstance() : action_;
    }
    /**
     * <pre>
     * Action to trigger at the given visibility threshold
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action action = 2;</code>
     */
    private void setAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
      if (value == null) {
        throw new NullPointerException();
      }
      action_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Action to trigger at the given visibility threshold
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action action = 2;</code>
     */
    private void setAction(
        com.google.search.now.ui.piet.ActionsProto.Action.Builder builderForValue) {
      action_ = builderForValue.build();
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Action to trigger at the given visibility threshold
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action action = 2;</code>
     */
    private void mergeAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
      if (action_ != null &&
          action_ != com.google.search.now.ui.piet.ActionsProto.Action.getDefaultInstance()) {
        action_ =
          com.google.search.now.ui.piet.ActionsProto.Action.newBuilder(action_).mergeFrom(value).buildPartial();
      } else {
        action_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Action to trigger at the given visibility threshold
     * </pre>
     *
     * <code>optional .search.now.ui.piet.Action action = 2;</code>
     */
    private void clearAction() {  action_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, proportionVisible_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getAction());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, proportionVisible_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAction());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ActionsProto.VisibilityAction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Actions that trigger based on the proportion of the parent Element that is
     * visible.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.VisibilityAction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ActionsProto.VisibilityAction, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.VisibilityAction)
        com.google.search.now.ui.piet.ActionsProto.VisibilityActionOrBuilder {
      // Construct using com.google.search.now.ui.piet.ActionsProto.VisibilityAction.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Proportion of the view that should be visible for this action to trigger
       * [0.0 to 1.0]
       * Defaults to 1.0 to make this an "on full view" action.
       * </pre>
       *
       * <code>optional float proportion_visible = 1 [default = 1];</code>
       */
      public boolean hasProportionVisible() {
        return instance.hasProportionVisible();
      }
      /**
       * <pre>
       * Proportion of the view that should be visible for this action to trigger
       * [0.0 to 1.0]
       * Defaults to 1.0 to make this an "on full view" action.
       * </pre>
       *
       * <code>optional float proportion_visible = 1 [default = 1];</code>
       */
      public float getProportionVisible() {
        return instance.getProportionVisible();
      }
      /**
       * <pre>
       * Proportion of the view that should be visible for this action to trigger
       * [0.0 to 1.0]
       * Defaults to 1.0 to make this an "on full view" action.
       * </pre>
       *
       * <code>optional float proportion_visible = 1 [default = 1];</code>
       */
      public Builder setProportionVisible(float value) {
        copyOnWrite();
        instance.setProportionVisible(value);
        return this;
      }
      /**
       * <pre>
       * Proportion of the view that should be visible for this action to trigger
       * [0.0 to 1.0]
       * Defaults to 1.0 to make this an "on full view" action.
       * </pre>
       *
       * <code>optional float proportion_visible = 1 [default = 1];</code>
       */
      public Builder clearProportionVisible() {
        copyOnWrite();
        instance.clearProportionVisible();
        return this;
      }

      /**
       * <pre>
       * Action to trigger at the given visibility threshold
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action action = 2;</code>
       */
      public boolean hasAction() {
        return instance.hasAction();
      }
      /**
       * <pre>
       * Action to trigger at the given visibility threshold
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action action = 2;</code>
       */
      public com.google.search.now.ui.piet.ActionsProto.Action getAction() {
        return instance.getAction();
      }
      /**
       * <pre>
       * Action to trigger at the given visibility threshold
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action action = 2;</code>
       */
      public Builder setAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
        copyOnWrite();
        instance.setAction(value);
        return this;
        }
      /**
       * <pre>
       * Action to trigger at the given visibility threshold
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action action = 2;</code>
       */
      public Builder setAction(
          com.google.search.now.ui.piet.ActionsProto.Action.Builder builderForValue) {
        copyOnWrite();
        instance.setAction(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Action to trigger at the given visibility threshold
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action action = 2;</code>
       */
      public Builder mergeAction(com.google.search.now.ui.piet.ActionsProto.Action value) {
        copyOnWrite();
        instance.mergeAction(value);
        return this;
      }
      /**
       * <pre>
       * Action to trigger at the given visibility threshold
       * </pre>
       *
       * <code>optional .search.now.ui.piet.Action action = 2;</code>
       */
      public Builder clearAction() {  copyOnWrite();
        instance.clearAction();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.VisibilityAction)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ActionsProto.VisibilityAction();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (hasAction()) {
            if (!getAction().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ActionsProto.VisibilityAction other = (com.google.search.now.ui.piet.ActionsProto.VisibilityAction) arg1;
          proportionVisible_ = visitor.visitFloat(
              hasProportionVisible(), proportionVisible_,
              other.hasProportionVisible(), other.proportionVisible_);
          action_ = visitor.visitMessage(action_, other.action_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 13: {
                  bitField0_ |= 0x00000001;
                  proportionVisible_ = input.readFloat();
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.ActionsProto.Action.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = action_.toBuilder();
                  }
                  action_ = input.readMessage(com.google.search.now.ui.piet.ActionsProto.Action.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(action_);
                    action_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ActionsProto.VisibilityAction.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.VisibilityAction)
    private static final com.google.search.now.ui.piet.ActionsProto.VisibilityAction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new VisibilityAction();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ActionsProto.VisibilityAction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<VisibilityAction> PARSER;

    public static com.google.protobuf.Parser<VisibilityAction> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
