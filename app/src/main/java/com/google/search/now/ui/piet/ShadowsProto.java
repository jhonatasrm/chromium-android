// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/search/now/ui/piet/shadows.proto

package com.google.search.now.ui.piet;

public final class ShadowsProto {
  private ShadowsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ShadowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.Shadow)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * BoxShadow definition. Supported by the web client.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    boolean hasBoxShadow();
    /**
     * <pre>
     * BoxShadow definition. Supported by the web client.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    com.google.search.now.ui.piet.ShadowsProto.BoxShadow getBoxShadow();

    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android and iOS.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    boolean hasElevationShadow();
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android and iOS.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    com.google.search.now.ui.piet.ShadowsProto.ElevationShadow getElevationShadow();
  }
  /**
   * <pre>
   * Defines a shadow for a given element. This message has sub-messages that
   * correspond to different methods that define shadows. Each client might
   * support a subset of the methodologies, will ignore the ones it does not
   * support, and may have a priority order for which type is used when multiple
   * shadow messages are defined (probably defaulting to the most descriptive
   * shadow type supported by the platform).
   * See [INTERNAL LINK]
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.Shadow}
   */
  public  static final class Shadow extends
      com.google.protobuf.GeneratedMessageLite<
          Shadow, Shadow.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.Shadow)
      ShadowOrBuilder {
    private Shadow() {
    }
    private int bitField0_;
    public static final int BOX_SHADOW_FIELD_NUMBER = 1;
    private com.google.search.now.ui.piet.ShadowsProto.BoxShadow boxShadow_;
    /**
     * <pre>
     * BoxShadow definition. Supported by the web client.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    public boolean hasBoxShadow() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web client.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    public com.google.search.now.ui.piet.ShadowsProto.BoxShadow getBoxShadow() {
      return boxShadow_ == null ? com.google.search.now.ui.piet.ShadowsProto.BoxShadow.getDefaultInstance() : boxShadow_;
    }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web client.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    private void setBoxShadow(com.google.search.now.ui.piet.ShadowsProto.BoxShadow value) {
      if (value == null) {
        throw new NullPointerException();
      }
      boxShadow_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web client.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    private void setBoxShadow(
        com.google.search.now.ui.piet.ShadowsProto.BoxShadow.Builder builderForValue) {
      boxShadow_ = builderForValue.build();
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web client.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    private void mergeBoxShadow(com.google.search.now.ui.piet.ShadowsProto.BoxShadow value) {
      if (boxShadow_ != null &&
          boxShadow_ != com.google.search.now.ui.piet.ShadowsProto.BoxShadow.getDefaultInstance()) {
        boxShadow_ =
          com.google.search.now.ui.piet.ShadowsProto.BoxShadow.newBuilder(boxShadow_).mergeFrom(value).buildPartial();
      } else {
        boxShadow_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web client.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    private void clearBoxShadow() {  boxShadow_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int ELEVATION_SHADOW_FIELD_NUMBER = 2;
    private com.google.search.now.ui.piet.ShadowsProto.ElevationShadow elevationShadow_;
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android and iOS.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    public boolean hasElevationShadow() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android and iOS.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    public com.google.search.now.ui.piet.ShadowsProto.ElevationShadow getElevationShadow() {
      return elevationShadow_ == null ? com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.getDefaultInstance() : elevationShadow_;
    }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android and iOS.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    private void setElevationShadow(com.google.search.now.ui.piet.ShadowsProto.ElevationShadow value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elevationShadow_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android and iOS.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    private void setElevationShadow(
        com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.Builder builderForValue) {
      elevationShadow_ = builderForValue.build();
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android and iOS.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    private void mergeElevationShadow(com.google.search.now.ui.piet.ShadowsProto.ElevationShadow value) {
      if (elevationShadow_ != null &&
          elevationShadow_ != com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.getDefaultInstance()) {
        elevationShadow_ =
          com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.newBuilder(elevationShadow_).mergeFrom(value).buildPartial();
      } else {
        elevationShadow_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android and iOS.
     * </pre>
     *
     * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    private void clearElevationShadow() {  elevationShadow_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getBoxShadow());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getElevationShadow());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBoxShadow());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getElevationShadow());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.Shadow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ShadowsProto.Shadow prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Defines a shadow for a given element. This message has sub-messages that
     * correspond to different methods that define shadows. Each client might
     * support a subset of the methodologies, will ignore the ones it does not
     * support, and may have a priority order for which type is used when multiple
     * shadow messages are defined (probably defaulting to the most descriptive
     * shadow type supported by the platform).
     * See [INTERNAL LINK]
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.Shadow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ShadowsProto.Shadow, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.Shadow)
        com.google.search.now.ui.piet.ShadowsProto.ShadowOrBuilder {
      // Construct using com.google.search.now.ui.piet.ShadowsProto.Shadow.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * BoxShadow definition. Supported by the web client.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public boolean hasBoxShadow() {
        return instance.hasBoxShadow();
      }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web client.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public com.google.search.now.ui.piet.ShadowsProto.BoxShadow getBoxShadow() {
        return instance.getBoxShadow();
      }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web client.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public Builder setBoxShadow(com.google.search.now.ui.piet.ShadowsProto.BoxShadow value) {
        copyOnWrite();
        instance.setBoxShadow(value);
        return this;
        }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web client.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public Builder setBoxShadow(
          com.google.search.now.ui.piet.ShadowsProto.BoxShadow.Builder builderForValue) {
        copyOnWrite();
        instance.setBoxShadow(builderForValue);
        return this;
      }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web client.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public Builder mergeBoxShadow(com.google.search.now.ui.piet.ShadowsProto.BoxShadow value) {
        copyOnWrite();
        instance.mergeBoxShadow(value);
        return this;
      }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web client.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public Builder clearBoxShadow() {  copyOnWrite();
        instance.clearBoxShadow();
        return this;
      }

      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android and iOS.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public boolean hasElevationShadow() {
        return instance.hasElevationShadow();
      }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android and iOS.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public com.google.search.now.ui.piet.ShadowsProto.ElevationShadow getElevationShadow() {
        return instance.getElevationShadow();
      }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android and iOS.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public Builder setElevationShadow(com.google.search.now.ui.piet.ShadowsProto.ElevationShadow value) {
        copyOnWrite();
        instance.setElevationShadow(value);
        return this;
        }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android and iOS.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public Builder setElevationShadow(
          com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.Builder builderForValue) {
        copyOnWrite();
        instance.setElevationShadow(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android and iOS.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public Builder mergeElevationShadow(com.google.search.now.ui.piet.ShadowsProto.ElevationShadow value) {
        copyOnWrite();
        instance.mergeElevationShadow(value);
        return this;
      }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android and iOS.
       * </pre>
       *
       * <code>optional .search.now.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public Builder clearElevationShadow() {  copyOnWrite();
        instance.clearElevationShadow();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.Shadow)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ShadowsProto.Shadow();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ShadowsProto.Shadow other = (com.google.search.now.ui.piet.ShadowsProto.Shadow) arg1;
          boxShadow_ = visitor.visitMessage(boxShadow_, other.boxShadow_);
          elevationShadow_ = visitor.visitMessage(elevationShadow_, other.elevationShadow_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.google.search.now.ui.piet.ShadowsProto.BoxShadow.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = boxShadow_.toBuilder();
                  }
                  boxShadow_ = input.readMessage(com.google.search.now.ui.piet.ShadowsProto.BoxShadow.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(boxShadow_);
                    boxShadow_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
                case 18: {
                  com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = elevationShadow_.toBuilder();
                  }
                  elevationShadow_ = input.readMessage(com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(elevationShadow_);
                    elevationShadow_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ShadowsProto.Shadow.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.Shadow)
    private static final com.google.search.now.ui.piet.ShadowsProto.Shadow DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Shadow();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ShadowsProto.Shadow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Shadow> PARSER;

    public static com.google.protobuf.Parser<Shadow> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BoxShadowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.BoxShadow)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     */
    boolean hasOffsetX();
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     */
    int getOffsetX();

    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     */
    boolean hasOffsetY();
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     */
    int getOffsetY();

    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     */
    boolean hasBlurRadius();
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     */
    int getBlurRadius();

    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     */
    boolean hasSpreadRadius();
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     */
    int getSpreadRadius();

    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     */
    boolean hasIsInset();
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     */
    boolean getIsInset();

    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     */
    boolean hasColor();
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     */
    int getColor();
  }
  /**
   * <pre>
   * Defines a box shadow, as described in the CSS spec:
   * https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow.
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.BoxShadow}
   */
  public  static final class BoxShadow extends
      com.google.protobuf.GeneratedMessageLite<
          BoxShadow, BoxShadow.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.BoxShadow)
      BoxShadowOrBuilder {
    private BoxShadow() {
    }
    private int bitField0_;
    public static final int OFFSET_X_FIELD_NUMBER = 1;
    private int offsetX_;
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     */
    public boolean hasOffsetX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     */
    public int getOffsetX() {
      return offsetX_;
    }
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     */
    private void setOffsetX(int value) {
      bitField0_ |= 0x00000001;
      offsetX_ = value;
    }
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     */
    private void clearOffsetX() {
      bitField0_ = (bitField0_ & ~0x00000001);
      offsetX_ = 0;
    }

    public static final int OFFSET_Y_FIELD_NUMBER = 2;
    private int offsetY_;
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     */
    public boolean hasOffsetY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     */
    public int getOffsetY() {
      return offsetY_;
    }
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     */
    private void setOffsetY(int value) {
      bitField0_ |= 0x00000002;
      offsetY_ = value;
    }
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     */
    private void clearOffsetY() {
      bitField0_ = (bitField0_ & ~0x00000002);
      offsetY_ = 0;
    }

    public static final int BLUR_RADIUS_FIELD_NUMBER = 3;
    private int blurRadius_;
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     */
    public boolean hasBlurRadius() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     */
    public int getBlurRadius() {
      return blurRadius_;
    }
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     */
    private void setBlurRadius(int value) {
      bitField0_ |= 0x00000004;
      blurRadius_ = value;
    }
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     */
    private void clearBlurRadius() {
      bitField0_ = (bitField0_ & ~0x00000004);
      blurRadius_ = 0;
    }

    public static final int SPREAD_RADIUS_FIELD_NUMBER = 4;
    private int spreadRadius_;
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     */
    public boolean hasSpreadRadius() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     */
    public int getSpreadRadius() {
      return spreadRadius_;
    }
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     */
    private void setSpreadRadius(int value) {
      bitField0_ |= 0x00000008;
      spreadRadius_ = value;
    }
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     */
    private void clearSpreadRadius() {
      bitField0_ = (bitField0_ & ~0x00000008);
      spreadRadius_ = 0;
    }

    public static final int IS_INSET_FIELD_NUMBER = 5;
    private boolean isInset_;
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     */
    public boolean hasIsInset() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     */
    public boolean getIsInset() {
      return isInset_;
    }
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     */
    private void setIsInset(boolean value) {
      bitField0_ |= 0x00000010;
      isInset_ = value;
    }
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     */
    private void clearIsInset() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isInset_ = false;
    }

    public static final int COLOR_FIELD_NUMBER = 6;
    private int color_;
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     */
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000020;
      color_ = value;
    }
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000020);
      color_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, offsetX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, offsetY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, blurRadius_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, spreadRadius_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isInset_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFixed32(6, color_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, offsetX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, offsetY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, blurRadius_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, spreadRadius_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isInset_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, color_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ShadowsProto.BoxShadow prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Defines a box shadow, as described in the CSS spec:
     * https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow.
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.BoxShadow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ShadowsProto.BoxShadow, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.BoxShadow)
        com.google.search.now.ui.piet.ShadowsProto.BoxShadowOrBuilder {
      // Construct using com.google.search.now.ui.piet.ShadowsProto.BoxShadow.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Defines the horizontal offset of the shadow.
       *  * A positive value puts the shadow on the right side of the box (does not
       *    flip in RTL presentation).
       *  * A negative value puts the shadow on the left side of the box.
       * </pre>
       *
       * <code>optional int32 offset_x = 1;</code>
       */
      public boolean hasOffsetX() {
        return instance.hasOffsetX();
      }
      /**
       * <pre>
       * Defines the horizontal offset of the shadow.
       *  * A positive value puts the shadow on the right side of the box (does not
       *    flip in RTL presentation).
       *  * A negative value puts the shadow on the left side of the box.
       * </pre>
       *
       * <code>optional int32 offset_x = 1;</code>
       */
      public int getOffsetX() {
        return instance.getOffsetX();
      }
      /**
       * <pre>
       * Defines the horizontal offset of the shadow.
       *  * A positive value puts the shadow on the right side of the box (does not
       *    flip in RTL presentation).
       *  * A negative value puts the shadow on the left side of the box.
       * </pre>
       *
       * <code>optional int32 offset_x = 1;</code>
       */
      public Builder setOffsetX(int value) {
        copyOnWrite();
        instance.setOffsetX(value);
        return this;
      }
      /**
       * <pre>
       * Defines the horizontal offset of the shadow.
       *  * A positive value puts the shadow on the right side of the box (does not
       *    flip in RTL presentation).
       *  * A negative value puts the shadow on the left side of the box.
       * </pre>
       *
       * <code>optional int32 offset_x = 1;</code>
       */
      public Builder clearOffsetX() {
        copyOnWrite();
        instance.clearOffsetX();
        return this;
      }

      /**
       * <pre>
       * Defines the vertical offset of the shadow.
       *  * A positive value puts the shadow below the box.
       *  * A negative value puts the shadow above the box.
       * </pre>
       *
       * <code>optional int32 offset_y = 2;</code>
       */
      public boolean hasOffsetY() {
        return instance.hasOffsetY();
      }
      /**
       * <pre>
       * Defines the vertical offset of the shadow.
       *  * A positive value puts the shadow below the box.
       *  * A negative value puts the shadow above the box.
       * </pre>
       *
       * <code>optional int32 offset_y = 2;</code>
       */
      public int getOffsetY() {
        return instance.getOffsetY();
      }
      /**
       * <pre>
       * Defines the vertical offset of the shadow.
       *  * A positive value puts the shadow below the box.
       *  * A negative value puts the shadow above the box.
       * </pre>
       *
       * <code>optional int32 offset_y = 2;</code>
       */
      public Builder setOffsetY(int value) {
        copyOnWrite();
        instance.setOffsetY(value);
        return this;
      }
      /**
       * <pre>
       * Defines the vertical offset of the shadow.
       *  * A positive value puts the shadow below the box.
       *  * A negative value puts the shadow above the box.
       * </pre>
       *
       * <code>optional int32 offset_y = 2;</code>
       */
      public Builder clearOffsetY() {
        copyOnWrite();
        instance.clearOffsetY();
        return this;
      }

      /**
       * <pre>
       * The blur radius of the shadow. The higher the number, the more blurred the
       * shadow will be.
       * </pre>
       *
       * <code>optional int32 blur_radius = 3;</code>
       */
      public boolean hasBlurRadius() {
        return instance.hasBlurRadius();
      }
      /**
       * <pre>
       * The blur radius of the shadow. The higher the number, the more blurred the
       * shadow will be.
       * </pre>
       *
       * <code>optional int32 blur_radius = 3;</code>
       */
      public int getBlurRadius() {
        return instance.getBlurRadius();
      }
      /**
       * <pre>
       * The blur radius of the shadow. The higher the number, the more blurred the
       * shadow will be.
       * </pre>
       *
       * <code>optional int32 blur_radius = 3;</code>
       */
      public Builder setBlurRadius(int value) {
        copyOnWrite();
        instance.setBlurRadius(value);
        return this;
      }
      /**
       * <pre>
       * The blur radius of the shadow. The higher the number, the more blurred the
       * shadow will be.
       * </pre>
       *
       * <code>optional int32 blur_radius = 3;</code>
       */
      public Builder clearBlurRadius() {
        copyOnWrite();
        instance.clearBlurRadius();
        return this;
      }

      /**
       * <pre>
       * The spread radius of the shadow. A positive value increases the size of the
       * shadow, a negative value decreases the size of the shadow.
       * </pre>
       *
       * <code>optional int32 spread_radius = 4;</code>
       */
      public boolean hasSpreadRadius() {
        return instance.hasSpreadRadius();
      }
      /**
       * <pre>
       * The spread radius of the shadow. A positive value increases the size of the
       * shadow, a negative value decreases the size of the shadow.
       * </pre>
       *
       * <code>optional int32 spread_radius = 4;</code>
       */
      public int getSpreadRadius() {
        return instance.getSpreadRadius();
      }
      /**
       * <pre>
       * The spread radius of the shadow. A positive value increases the size of the
       * shadow, a negative value decreases the size of the shadow.
       * </pre>
       *
       * <code>optional int32 spread_radius = 4;</code>
       */
      public Builder setSpreadRadius(int value) {
        copyOnWrite();
        instance.setSpreadRadius(value);
        return this;
      }
      /**
       * <pre>
       * The spread radius of the shadow. A positive value increases the size of the
       * shadow, a negative value decreases the size of the shadow.
       * </pre>
       *
       * <code>optional int32 spread_radius = 4;</code>
       */
      public Builder clearSpreadRadius() {
        copyOnWrite();
        instance.clearSpreadRadius();
        return this;
      }

      /**
       * <pre>
       * Defines whether the shadow should appear on the inside (is_inset == true),
       * or the outside (is_inset == false).
       * </pre>
       *
       * <code>optional bool is_inset = 5;</code>
       */
      public boolean hasIsInset() {
        return instance.hasIsInset();
      }
      /**
       * <pre>
       * Defines whether the shadow should appear on the inside (is_inset == true),
       * or the outside (is_inset == false).
       * </pre>
       *
       * <code>optional bool is_inset = 5;</code>
       */
      public boolean getIsInset() {
        return instance.getIsInset();
      }
      /**
       * <pre>
       * Defines whether the shadow should appear on the inside (is_inset == true),
       * or the outside (is_inset == false).
       * </pre>
       *
       * <code>optional bool is_inset = 5;</code>
       */
      public Builder setIsInset(boolean value) {
        copyOnWrite();
        instance.setIsInset(value);
        return this;
      }
      /**
       * <pre>
       * Defines whether the shadow should appear on the inside (is_inset == true),
       * or the outside (is_inset == false).
       * </pre>
       *
       * <code>optional bool is_inset = 5;</code>
       */
      public Builder clearIsInset() {
        copyOnWrite();
        instance.clearIsInset();
        return this;
      }

      /**
       * <pre>
       * The color of the shadow.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       */
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * The color of the shadow.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       */
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * The color of the shadow.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * The color of the shadow.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.BoxShadow)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ShadowsProto.BoxShadow();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ShadowsProto.BoxShadow other = (com.google.search.now.ui.piet.ShadowsProto.BoxShadow) arg1;
          offsetX_ = visitor.visitInt(
              hasOffsetX(), offsetX_,
              other.hasOffsetX(), other.offsetX_);
          offsetY_ = visitor.visitInt(
              hasOffsetY(), offsetY_,
              other.hasOffsetY(), other.offsetY_);
          blurRadius_ = visitor.visitInt(
              hasBlurRadius(), blurRadius_,
              other.hasBlurRadius(), other.blurRadius_);
          spreadRadius_ = visitor.visitInt(
              hasSpreadRadius(), spreadRadius_,
              other.hasSpreadRadius(), other.spreadRadius_);
          isInset_ = visitor.visitBoolean(
              hasIsInset(), isInset_,
              other.hasIsInset(), other.isInset_);
          color_ = visitor.visitInt(
              hasColor(), color_,
              other.hasColor(), other.color_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  offsetX_ = input.readInt32();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  offsetY_ = input.readInt32();
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000004;
                  blurRadius_ = input.readInt32();
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000008;
                  spreadRadius_ = input.readInt32();
                  break;
                }
                case 40: {
                  bitField0_ |= 0x00000010;
                  isInset_ = input.readBool();
                  break;
                }
                case 53: {
                  bitField0_ |= 0x00000020;
                  color_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ShadowsProto.BoxShadow.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.BoxShadow)
    private static final com.google.search.now.ui.piet.ShadowsProto.BoxShadow DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new BoxShadow();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ShadowsProto.BoxShadow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<BoxShadow> PARSER;

    public static com.google.protobuf.Parser<BoxShadow> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ElevationShadowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:search.now.ui.piet.ElevationShadow)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     */
    boolean hasElevation();
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     */
    int getElevation();
  }
  /**
   * <pre>
   * Defines a simple elevation-based shadow, as described in Material Design:
   * https://developer.android.com/training/material/shadows-clipping
   * </pre>
   *
   * Protobuf type {@code search.now.ui.piet.ElevationShadow}
   */
  public  static final class ElevationShadow extends
      com.google.protobuf.GeneratedMessageLite<
          ElevationShadow, ElevationShadow.Builder> implements
      // @@protoc_insertion_point(message_implements:search.now.ui.piet.ElevationShadow)
      ElevationShadowOrBuilder {
    private ElevationShadow() {
    }
    private int bitField0_;
    public static final int ELEVATION_FIELD_NUMBER = 1;
    private int elevation_;
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     */
    public boolean hasElevation() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     */
    public int getElevation() {
      return elevation_;
    }
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     */
    private void setElevation(int value) {
      bitField0_ |= 0x00000001;
      elevation_ = value;
    }
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     */
    private void clearElevation() {
      bitField0_ = (bitField0_ & ~0x00000001);
      elevation_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, elevation_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, elevation_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.search.now.ui.piet.ShadowsProto.ElevationShadow prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Defines a simple elevation-based shadow, as described in Material Design:
     * https://developer.android.com/training/material/shadows-clipping
     * </pre>
     *
     * Protobuf type {@code search.now.ui.piet.ElevationShadow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.search.now.ui.piet.ShadowsProto.ElevationShadow, Builder> implements
        // @@protoc_insertion_point(builder_implements:search.now.ui.piet.ElevationShadow)
        com.google.search.now.ui.piet.ShadowsProto.ElevationShadowOrBuilder {
      // Construct using com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Elevation of the view in dp; higher elevation creates larger shadows.
       * </pre>
       *
       * <code>optional int32 elevation = 1;</code>
       */
      public boolean hasElevation() {
        return instance.hasElevation();
      }
      /**
       * <pre>
       * Elevation of the view in dp; higher elevation creates larger shadows.
       * </pre>
       *
       * <code>optional int32 elevation = 1;</code>
       */
      public int getElevation() {
        return instance.getElevation();
      }
      /**
       * <pre>
       * Elevation of the view in dp; higher elevation creates larger shadows.
       * </pre>
       *
       * <code>optional int32 elevation = 1;</code>
       */
      public Builder setElevation(int value) {
        copyOnWrite();
        instance.setElevation(value);
        return this;
      }
      /**
       * <pre>
       * Elevation of the view in dp; higher elevation creates larger shadows.
       * </pre>
       *
       * <code>optional int32 elevation = 1;</code>
       */
      public Builder clearElevation() {
        copyOnWrite();
        instance.clearElevation();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:search.now.ui.piet.ElevationShadow)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.search.now.ui.piet.ShadowsProto.ElevationShadow();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.google.search.now.ui.piet.ShadowsProto.ElevationShadow other = (com.google.search.now.ui.piet.ShadowsProto.ElevationShadow) arg1;
          elevation_ = visitor.visitInt(
              hasElevation(), elevation_,
              other.hasElevation(), other.elevation_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  elevation_ = input.readInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.google.search.now.ui.piet.ShadowsProto.ElevationShadow.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:search.now.ui.piet.ElevationShadow)
    private static final com.google.search.now.ui.piet.ShadowsProto.ElevationShadow DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ElevationShadow();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.google.search.now.ui.piet.ShadowsProto.ElevationShadow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ElevationShadow> PARSER;

    public static com.google.protobuf.Parser<ElevationShadow> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
