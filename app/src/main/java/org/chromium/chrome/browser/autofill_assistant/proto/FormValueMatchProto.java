// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * Protobuf type {@code autofill_assistant.FormValueMatchProto}
 */
public  final class FormValueMatchProto extends
    com.google.protobuf.GeneratedMessageLite<
        FormValueMatchProto, FormValueMatchProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.FormValueMatchProto)
    FormValueMatchProtoOrBuilder {
  private FormValueMatchProto() {
    value_ = "";
  }
  private int bitField0_;
  public static final int ELEMENT_FIELD_NUMBER = 1;
  private org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto element_;
  /**
   * <pre>
   * Required. The selector associated to the form element whose value should be
   * checked.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  public boolean hasElement() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Required. The selector associated to the form element whose value should be
   * checked.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getElement() {
    return element_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance() : element_;
  }
  /**
   * <pre>
   * Required. The selector associated to the form element whose value should be
   * checked.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  private void setElement(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    element_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Required. The selector associated to the form element whose value should be
   * checked.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  private void setElement(
      org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
    element_ = builderForValue.build();
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Required. The selector associated to the form element whose value should be
   * checked.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  private void mergeElement(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (element_ != null &&
        element_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
      element_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder(element_).mergeFrom(value).buildPartial();
    } else {
      element_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Required. The selector associated to the form element whose value should be
   * checked.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  private void clearElement() {  element_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int VALUE_FIELD_NUMBER = 2;
  private java.lang.String value_;
  /**
   * <pre>
   * Optional value. If specified, the element value must match the given value,
   * even if it's empty. If not specified, we just check that the element value
   * is non empty.
   * </pre>
   *
   * <code>optional string value = 2;</code>
   */
  public boolean hasValue() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Optional value. If specified, the element value must match the given value,
   * even if it's empty. If not specified, we just check that the element value
   * is non empty.
   * </pre>
   *
   * <code>optional string value = 2;</code>
   */
  public java.lang.String getValue() {
    return value_;
  }
  /**
   * <pre>
   * Optional value. If specified, the element value must match the given value,
   * even if it's empty. If not specified, we just check that the element value
   * is non empty.
   * </pre>
   *
   * <code>optional string value = 2;</code>
   */
  public com.google.protobuf.ByteString
      getValueBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(value_);
  }
  /**
   * <pre>
   * Optional value. If specified, the element value must match the given value,
   * even if it's empty. If not specified, we just check that the element value
   * is non empty.
   * </pre>
   *
   * <code>optional string value = 2;</code>
   */
  private void setValue(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    value_ = value;
  }
  /**
   * <pre>
   * Optional value. If specified, the element value must match the given value,
   * even if it's empty. If not specified, we just check that the element value
   * is non empty.
   * </pre>
   *
   * <code>optional string value = 2;</code>
   */
  private void clearValue() {
    bitField0_ = (bitField0_ & ~0x00000002);
    value_ = getDefaultInstance().getValue();
  }
  /**
   * <pre>
   * Optional value. If specified, the element value must match the given value,
   * even if it's empty. If not specified, we just check that the element value
   * is non empty.
   * </pre>
   *
   * <code>optional string value = 2;</code>
   */
  private void setValueBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    value_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, getElement());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getValue());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getElement());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getValue());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code autofill_assistant.FormValueMatchProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.FormValueMatchProto)
      org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Required. The selector associated to the form element whose value should be
     * checked.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public boolean hasElement() {
      return instance.hasElement();
    }
    /**
     * <pre>
     * Required. The selector associated to the form element whose value should be
     * checked.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getElement() {
      return instance.getElement();
    }
    /**
     * <pre>
     * Required. The selector associated to the form element whose value should be
     * checked.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public Builder setElement(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.setElement(value);
      return this;
      }
    /**
     * <pre>
     * Required. The selector associated to the form element whose value should be
     * checked.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public Builder setElement(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      copyOnWrite();
      instance.setElement(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Required. The selector associated to the form element whose value should be
     * checked.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public Builder mergeElement(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.mergeElement(value);
      return this;
    }
    /**
     * <pre>
     * Required. The selector associated to the form element whose value should be
     * checked.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public Builder clearElement() {  copyOnWrite();
      instance.clearElement();
      return this;
    }

    /**
     * <pre>
     * Optional value. If specified, the element value must match the given value,
     * even if it's empty. If not specified, we just check that the element value
     * is non empty.
     * </pre>
     *
     * <code>optional string value = 2;</code>
     */
    public boolean hasValue() {
      return instance.hasValue();
    }
    /**
     * <pre>
     * Optional value. If specified, the element value must match the given value,
     * even if it's empty. If not specified, we just check that the element value
     * is non empty.
     * </pre>
     *
     * <code>optional string value = 2;</code>
     */
    public java.lang.String getValue() {
      return instance.getValue();
    }
    /**
     * <pre>
     * Optional value. If specified, the element value must match the given value,
     * even if it's empty. If not specified, we just check that the element value
     * is non empty.
     * </pre>
     *
     * <code>optional string value = 2;</code>
     */
    public com.google.protobuf.ByteString
        getValueBytes() {
      return instance.getValueBytes();
    }
    /**
     * <pre>
     * Optional value. If specified, the element value must match the given value,
     * even if it's empty. If not specified, we just check that the element value
     * is non empty.
     * </pre>
     *
     * <code>optional string value = 2;</code>
     */
    public Builder setValue(
        java.lang.String value) {
      copyOnWrite();
      instance.setValue(value);
      return this;
    }
    /**
     * <pre>
     * Optional value. If specified, the element value must match the given value,
     * even if it's empty. If not specified, we just check that the element value
     * is non empty.
     * </pre>
     *
     * <code>optional string value = 2;</code>
     */
    public Builder clearValue() {
      copyOnWrite();
      instance.clearValue();
      return this;
    }
    /**
     * <pre>
     * Optional value. If specified, the element value must match the given value,
     * even if it's empty. If not specified, we just check that the element value
     * is non empty.
     * </pre>
     *
     * <code>optional string value = 2;</code>
     */
    public Builder setValueBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setValueBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.FormValueMatchProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto other = (org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto) arg1;
        element_ = visitor.visitMessage(element_, other.element_);
        value_ = visitor.visitString(
            hasValue(), value_,
            other.hasValue(), other.value_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = element_.toBuilder();
                }
                element_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(element_);
                  element_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                value_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.FormValueMatchProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new FormValueMatchProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.FormValueMatchProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<FormValueMatchProto> PARSER;

  public static com.google.protobuf.Parser<FormValueMatchProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

