// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Allow choosing one or more possibility. If FocusElement was called just
 * before, allow interaction with the touchable element area, otherwise don't
 * allow any interactions.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.PromptProto}
 */
public  final class PromptProto extends
    com.google.protobuf.GeneratedMessageLite<
        PromptProto, PromptProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.PromptProto)
    PromptProtoOrBuilder {
  private PromptProto() {
    message_ = "";
    choices_ = emptyProtobufList();
  }
  public interface ChoiceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.PromptProto.Choice)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * If set, the choice should be highlighted. Ignored unless name is set.
     * </pre>
     *
     * <code>optional bool highlight = 3;</code>
     */
    boolean hasHighlight();
    /**
     * <pre>
     * If set, the choice should be highlighted. Ignored unless name is set.
     * </pre>
     *
     * <code>optional bool highlight = 3;</code>
     */
    boolean getHighlight();

    /**
     * <pre>
     * Optionally auto-select this choice if the given element exist.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
     */
    boolean hasElementExists();
    /**
     * <pre>
     * Optionally auto-select this choice if the given element exist.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getElementExists();

    /**
     * <pre>
     * Server payload originally sent by the server. This should
     * be transmitted as-is by the client without interpreting.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    boolean hasServerPayload();
    /**
     * <pre>
     * Server payload originally sent by the server. This should
     * be transmitted as-is by the client without interpreting.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    com.google.protobuf.ByteString getServerPayload();

    /**
     * <pre>
     * The chip is only visible if the given element exists.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
     */
    boolean hasShowOnlyIfElementExists();
    /**
     * <pre>
     * The chip is only visible if the given element exists.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getShowOnlyIfElementExists();
  }
  /**
   * <pre>
   * A choice that is made either directly by clicking on a chip or button, or
   * implicitly by making a change on the website that is then detected by
   * looking for the existence of an element.
   * One of these protos must is transmitted as-is back to the server as part of
   * ProcessedActionProto.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.PromptProto.Choice}
   */
  public  static final class Choice extends
      com.google.protobuf.GeneratedMessageLite<
          Choice, Choice.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.PromptProto.Choice)
      ChoiceOrBuilder {
    private Choice() {
      name_ = "";
      serverPayload_ = com.google.protobuf.ByteString.EMPTY;
    }
    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.String name_;
    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public java.lang.String getName() {
      return name_;
    }
    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }
    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    private void setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value;
    }
    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = getDefaultInstance().getName();
    }
    /**
     * <pre>
     * Localized text message to display. Not required if element_exists is set.
     * </pre>
     *
     * <code>optional string name = 2;</code>
     */
    private void setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value.toStringUtf8();
    }

    public static final int HIGHLIGHT_FIELD_NUMBER = 3;
    private boolean highlight_;
    /**
     * <pre>
     * If set, the choice should be highlighted. Ignored unless name is set.
     * </pre>
     *
     * <code>optional bool highlight = 3;</code>
     */
    public boolean hasHighlight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * If set, the choice should be highlighted. Ignored unless name is set.
     * </pre>
     *
     * <code>optional bool highlight = 3;</code>
     */
    public boolean getHighlight() {
      return highlight_;
    }
    /**
     * <pre>
     * If set, the choice should be highlighted. Ignored unless name is set.
     * </pre>
     *
     * <code>optional bool highlight = 3;</code>
     */
    private void setHighlight(boolean value) {
      bitField0_ |= 0x00000002;
      highlight_ = value;
    }
    /**
     * <pre>
     * If set, the choice should be highlighted. Ignored unless name is set.
     * </pre>
     *
     * <code>optional bool highlight = 3;</code>
     */
    private void clearHighlight() {
      bitField0_ = (bitField0_ & ~0x00000002);
      highlight_ = false;
    }

    public static final int ELEMENT_EXISTS_FIELD_NUMBER = 4;
    private org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto elementExists_;
    /**
     * <pre>
     * Optionally auto-select this choice if the given element exist.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
     */
    public boolean hasElementExists() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Optionally auto-select this choice if the given element exist.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getElementExists() {
      return elementExists_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance() : elementExists_;
    }
    /**
     * <pre>
     * Optionally auto-select this choice if the given element exist.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
     */
    private void setElementExists(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      elementExists_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <pre>
     * Optionally auto-select this choice if the given element exist.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
     */
    private void setElementExists(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      elementExists_ = builderForValue.build();
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Optionally auto-select this choice if the given element exist.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
     */
    private void mergeElementExists(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      if (elementExists_ != null &&
          elementExists_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
        elementExists_ =
          org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder(elementExists_).mergeFrom(value).buildPartial();
      } else {
        elementExists_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Optionally auto-select this choice if the given element exist.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
     */
    private void clearElementExists() {  elementExists_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int SERVER_PAYLOAD_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString serverPayload_;
    /**
     * <pre>
     * Server payload originally sent by the server. This should
     * be transmitted as-is by the client without interpreting.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    public boolean hasServerPayload() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Server payload originally sent by the server. This should
     * be transmitted as-is by the client without interpreting.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    public com.google.protobuf.ByteString getServerPayload() {
      return serverPayload_;
    }
    /**
     * <pre>
     * Server payload originally sent by the server. This should
     * be transmitted as-is by the client without interpreting.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    private void setServerPayload(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      serverPayload_ = value;
    }
    /**
     * <pre>
     * Server payload originally sent by the server. This should
     * be transmitted as-is by the client without interpreting.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    private void clearServerPayload() {
      bitField0_ = (bitField0_ & ~0x00000008);
      serverPayload_ = getDefaultInstance().getServerPayload();
    }

    public static final int SHOW_ONLY_IF_ELEMENT_EXISTS_FIELD_NUMBER = 6;
    private org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto showOnlyIfElementExists_;
    /**
     * <pre>
     * The chip is only visible if the given element exists.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
     */
    public boolean hasShowOnlyIfElementExists() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * The chip is only visible if the given element exists.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getShowOnlyIfElementExists() {
      return showOnlyIfElementExists_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance() : showOnlyIfElementExists_;
    }
    /**
     * <pre>
     * The chip is only visible if the given element exists.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
     */
    private void setShowOnlyIfElementExists(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      showOnlyIfElementExists_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <pre>
     * The chip is only visible if the given element exists.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
     */
    private void setShowOnlyIfElementExists(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      showOnlyIfElementExists_ = builderForValue.build();
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * The chip is only visible if the given element exists.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
     */
    private void mergeShowOnlyIfElementExists(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      if (showOnlyIfElementExists_ != null &&
          showOnlyIfElementExists_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
        showOnlyIfElementExists_ =
          org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder(showOnlyIfElementExists_).mergeFrom(value).buildPartial();
      } else {
        showOnlyIfElementExists_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * The chip is only visible if the given element exists.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
     */
    private void clearShowOnlyIfElementExists() {  showOnlyIfElementExists_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeString(2, getName());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(3, highlight_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(4, getElementExists());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(5, serverPayload_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(6, getShowOnlyIfElementExists());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getName());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, highlight_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getElementExists());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, serverPayload_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getShowOnlyIfElementExists());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A choice that is made either directly by clicking on a chip or button, or
     * implicitly by making a change on the website that is then detected by
     * looking for the existence of an element.
     * One of these protos must is transmitted as-is back to the server as part of
     * ProcessedActionProto.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.PromptProto.Choice}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.PromptProto.Choice)
        org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.ChoiceOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Localized text message to display. Not required if element_exists is set.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <pre>
       * Localized text message to display. Not required if element_exists is set.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public java.lang.String getName() {
        return instance.getName();
      }
      /**
       * <pre>
       * Localized text message to display. Not required if element_exists is set.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        return instance.getNameBytes();
      }
      /**
       * <pre>
       * Localized text message to display. Not required if element_exists is set.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <pre>
       * Localized text message to display. Not required if element_exists is set.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }
      /**
       * <pre>
       * Localized text message to display. Not required if element_exists is set.
       * </pre>
       *
       * <code>optional string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * If set, the choice should be highlighted. Ignored unless name is set.
       * </pre>
       *
       * <code>optional bool highlight = 3;</code>
       */
      public boolean hasHighlight() {
        return instance.hasHighlight();
      }
      /**
       * <pre>
       * If set, the choice should be highlighted. Ignored unless name is set.
       * </pre>
       *
       * <code>optional bool highlight = 3;</code>
       */
      public boolean getHighlight() {
        return instance.getHighlight();
      }
      /**
       * <pre>
       * If set, the choice should be highlighted. Ignored unless name is set.
       * </pre>
       *
       * <code>optional bool highlight = 3;</code>
       */
      public Builder setHighlight(boolean value) {
        copyOnWrite();
        instance.setHighlight(value);
        return this;
      }
      /**
       * <pre>
       * If set, the choice should be highlighted. Ignored unless name is set.
       * </pre>
       *
       * <code>optional bool highlight = 3;</code>
       */
      public Builder clearHighlight() {
        copyOnWrite();
        instance.clearHighlight();
        return this;
      }

      /**
       * <pre>
       * Optionally auto-select this choice if the given element exist.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
       */
      public boolean hasElementExists() {
        return instance.hasElementExists();
      }
      /**
       * <pre>
       * Optionally auto-select this choice if the given element exist.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getElementExists() {
        return instance.getElementExists();
      }
      /**
       * <pre>
       * Optionally auto-select this choice if the given element exist.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
       */
      public Builder setElementExists(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
        copyOnWrite();
        instance.setElementExists(value);
        return this;
        }
      /**
       * <pre>
       * Optionally auto-select this choice if the given element exist.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
       */
      public Builder setElementExists(
          org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
        copyOnWrite();
        instance.setElementExists(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Optionally auto-select this choice if the given element exist.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
       */
      public Builder mergeElementExists(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
        copyOnWrite();
        instance.mergeElementExists(value);
        return this;
      }
      /**
       * <pre>
       * Optionally auto-select this choice if the given element exist.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto element_exists = 4;</code>
       */
      public Builder clearElementExists() {  copyOnWrite();
        instance.clearElementExists();
        return this;
      }

      /**
       * <pre>
       * Server payload originally sent by the server. This should
       * be transmitted as-is by the client without interpreting.
       * </pre>
       *
       * <code>optional bytes server_payload = 5;</code>
       */
      public boolean hasServerPayload() {
        return instance.hasServerPayload();
      }
      /**
       * <pre>
       * Server payload originally sent by the server. This should
       * be transmitted as-is by the client without interpreting.
       * </pre>
       *
       * <code>optional bytes server_payload = 5;</code>
       */
      public com.google.protobuf.ByteString getServerPayload() {
        return instance.getServerPayload();
      }
      /**
       * <pre>
       * Server payload originally sent by the server. This should
       * be transmitted as-is by the client without interpreting.
       * </pre>
       *
       * <code>optional bytes server_payload = 5;</code>
       */
      public Builder setServerPayload(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setServerPayload(value);
        return this;
      }
      /**
       * <pre>
       * Server payload originally sent by the server. This should
       * be transmitted as-is by the client without interpreting.
       * </pre>
       *
       * <code>optional bytes server_payload = 5;</code>
       */
      public Builder clearServerPayload() {
        copyOnWrite();
        instance.clearServerPayload();
        return this;
      }

      /**
       * <pre>
       * The chip is only visible if the given element exists.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
       */
      public boolean hasShowOnlyIfElementExists() {
        return instance.hasShowOnlyIfElementExists();
      }
      /**
       * <pre>
       * The chip is only visible if the given element exists.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getShowOnlyIfElementExists() {
        return instance.getShowOnlyIfElementExists();
      }
      /**
       * <pre>
       * The chip is only visible if the given element exists.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
       */
      public Builder setShowOnlyIfElementExists(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
        copyOnWrite();
        instance.setShowOnlyIfElementExists(value);
        return this;
        }
      /**
       * <pre>
       * The chip is only visible if the given element exists.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
       */
      public Builder setShowOnlyIfElementExists(
          org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
        copyOnWrite();
        instance.setShowOnlyIfElementExists(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The chip is only visible if the given element exists.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
       */
      public Builder mergeShowOnlyIfElementExists(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
        copyOnWrite();
        instance.mergeShowOnlyIfElementExists(value);
        return this;
      }
      /**
       * <pre>
       * The chip is only visible if the given element exists.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto show_only_if_element_exists = 6;</code>
       */
      public Builder clearShowOnlyIfElementExists() {  copyOnWrite();
        instance.clearShowOnlyIfElementExists();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.PromptProto.Choice)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice other = (org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice) arg1;
          name_ = visitor.visitString(
              hasName(), name_,
              other.hasName(), other.name_);
          highlight_ = visitor.visitBoolean(
              hasHighlight(), highlight_,
              other.hasHighlight(), other.highlight_);
          elementExists_ = visitor.visitMessage(elementExists_, other.elementExists_);
          serverPayload_ = visitor.visitByteString(
              hasServerPayload(), serverPayload_,
              other.hasServerPayload(), other.serverPayload_);
          showOnlyIfElementExists_ = visitor.visitMessage(showOnlyIfElementExists_, other.showOnlyIfElementExists_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 18: {
                  String s = input.readString();
                  bitField0_ |= 0x00000001;
                  name_ = s;
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000002;
                  highlight_ = input.readBool();
                  break;
                }
                case 34: {
                  org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    subBuilder = elementExists_.toBuilder();
                  }
                  elementExists_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(elementExists_);
                    elementExists_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000004;
                  break;
                }
                case 42: {
                  bitField0_ |= 0x00000008;
                  serverPayload_ = input.readBytes();
                  break;
                }
                case 50: {
                  org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000010) == 0x00000010)) {
                    subBuilder = showOnlyIfElementExists_.toBuilder();
                  }
                  showOnlyIfElementExists_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(showOnlyIfElementExists_);
                    showOnlyIfElementExists_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000010;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.PromptProto.Choice)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Choice();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Choice> PARSER;

    public static com.google.protobuf.Parser<Choice> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int MESSAGE_FIELD_NUMBER = 1;
  private java.lang.String message_;
  /**
   * <pre>
   * Display this message to the user.
   * </pre>
   *
   * <code>optional string message = 1;</code>
   */
  public boolean hasMessage() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Display this message to the user.
   * </pre>
   *
   * <code>optional string message = 1;</code>
   */
  public java.lang.String getMessage() {
    return message_;
  }
  /**
   * <pre>
   * Display this message to the user.
   * </pre>
   *
   * <code>optional string message = 1;</code>
   */
  public com.google.protobuf.ByteString
      getMessageBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(message_);
  }
  /**
   * <pre>
   * Display this message to the user.
   * </pre>
   *
   * <code>optional string message = 1;</code>
   */
  private void setMessage(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    message_ = value;
  }
  /**
   * <pre>
   * Display this message to the user.
   * </pre>
   *
   * <code>optional string message = 1;</code>
   */
  private void clearMessage() {
    bitField0_ = (bitField0_ & ~0x00000001);
    message_ = getDefaultInstance().getMessage();
  }
  /**
   * <pre>
   * Display this message to the user.
   * </pre>
   *
   * <code>optional string message = 1;</code>
   */
  private void setMessageBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    message_ = value.toStringUtf8();
  }

  public static final int CHOICES_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice> choices_;
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice> getChoicesList() {
    return choices_;
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.ChoiceOrBuilder> 
      getChoicesOrBuilderList() {
    return choices_;
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  public int getChoicesCount() {
    return choices_.size();
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice getChoices(int index) {
    return choices_.get(index);
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.ChoiceOrBuilder getChoicesOrBuilder(
      int index) {
    return choices_.get(index);
  }
  private void ensureChoicesIsMutable() {
    if (!choices_.isModifiable()) {
      choices_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(choices_);
     }
  }

  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void setChoices(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureChoicesIsMutable();
    choices_.set(index, value);
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void setChoices(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.Builder builderForValue) {
    ensureChoicesIsMutable();
    choices_.set(index, builderForValue.build());
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void addChoices(org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureChoicesIsMutable();
    choices_.add(value);
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void addChoices(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureChoicesIsMutable();
    choices_.add(index, value);
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void addChoices(
      org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.Builder builderForValue) {
    ensureChoicesIsMutable();
    choices_.add(builderForValue.build());
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void addChoices(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.Builder builderForValue) {
    ensureChoicesIsMutable();
    choices_.add(index, builderForValue.build());
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void addAllChoices(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice> values) {
    ensureChoicesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, choices_);
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void clearChoices() {
    choices_ = emptyProtobufList();
  }
  /**
   * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
   */
  private void removeChoices(int index) {
    ensureChoicesIsMutable();
    choices_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getMessage());
    }
    for (int i = 0; i < choices_.size(); i++) {
      output.writeMessage(4, choices_.get(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getMessage());
    }
    for (int i = 0; i < choices_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, choices_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.PromptProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Allow choosing one or more possibility. If FocusElement was called just
   * before, allow interaction with the touchable element area, otherwise don't
   * allow any interactions.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.PromptProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.PromptProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.PromptProto)
      org.chromium.chrome.browser.autofill_assistant.proto.PromptProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Display this message to the user.
     * </pre>
     *
     * <code>optional string message = 1;</code>
     */
    public boolean hasMessage() {
      return instance.hasMessage();
    }
    /**
     * <pre>
     * Display this message to the user.
     * </pre>
     *
     * <code>optional string message = 1;</code>
     */
    public java.lang.String getMessage() {
      return instance.getMessage();
    }
    /**
     * <pre>
     * Display this message to the user.
     * </pre>
     *
     * <code>optional string message = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      return instance.getMessageBytes();
    }
    /**
     * <pre>
     * Display this message to the user.
     * </pre>
     *
     * <code>optional string message = 1;</code>
     */
    public Builder setMessage(
        java.lang.String value) {
      copyOnWrite();
      instance.setMessage(value);
      return this;
    }
    /**
     * <pre>
     * Display this message to the user.
     * </pre>
     *
     * <code>optional string message = 1;</code>
     */
    public Builder clearMessage() {
      copyOnWrite();
      instance.clearMessage();
      return this;
    }
    /**
     * <pre>
     * Display this message to the user.
     * </pre>
     *
     * <code>optional string message = 1;</code>
     */
    public Builder setMessageBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMessageBytes(value);
      return this;
    }

    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice> getChoicesList() {
      return java.util.Collections.unmodifiableList(
          instance.getChoicesList());
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public int getChoicesCount() {
      return instance.getChoicesCount();
    }/**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice getChoices(int index) {
      return instance.getChoices(index);
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder setChoices(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice value) {
      copyOnWrite();
      instance.setChoices(index, value);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder setChoices(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.Builder builderForValue) {
      copyOnWrite();
      instance.setChoices(index, builderForValue);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder addChoices(org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice value) {
      copyOnWrite();
      instance.addChoices(value);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder addChoices(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice value) {
      copyOnWrite();
      instance.addChoices(index, value);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder addChoices(
        org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.Builder builderForValue) {
      copyOnWrite();
      instance.addChoices(builderForValue);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder addChoices(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.Builder builderForValue) {
      copyOnWrite();
      instance.addChoices(index, builderForValue);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder addAllChoices(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice> values) {
      copyOnWrite();
      instance.addAllChoices(values);
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder clearChoices() {
      copyOnWrite();
      instance.clearChoices();
      return this;
    }
    /**
     * <code>repeated .autofill_assistant.PromptProto.Choice choices = 4;</code>
     */
    public Builder removeChoices(int index) {
      copyOnWrite();
      instance.removeChoices(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.PromptProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.PromptProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        choices_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.PromptProto other = (org.chromium.chrome.browser.autofill_assistant.proto.PromptProto) arg1;
        message_ = visitor.visitString(
            hasMessage(), message_,
            other.hasMessage(), other.message_);
        choices_= visitor.visitList(choices_, other.choices_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                message_ = s;
                break;
              }
              case 34: {
                if (!choices_.isModifiable()) {
                  choices_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(choices_);
                }
                choices_.add(
                    input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.Choice.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.PromptProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.PromptProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.PromptProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new PromptProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.PromptProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PromptProto> PARSER;

  public static com.google.protobuf.Parser<PromptProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

