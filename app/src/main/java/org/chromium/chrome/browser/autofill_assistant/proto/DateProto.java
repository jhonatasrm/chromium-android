// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * Protobuf type {@code autofill_assistant.DateProto}
 */
public  final class DateProto extends
    com.google.protobuf.GeneratedMessageLite<
        DateProto, DateProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.DateProto)
    DateProtoOrBuilder {
  private DateProto() {
  }
  private int bitField0_;
  public static final int YEAR_FIELD_NUMBER = 1;
  private long year_;
  /**
   * <code>optional int64 year = 1;</code>
   */
  public boolean hasYear() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional int64 year = 1;</code>
   */
  public long getYear() {
    return year_;
  }
  /**
   * <code>optional int64 year = 1;</code>
   */
  private void setYear(long value) {
    bitField0_ |= 0x00000001;
    year_ = value;
  }
  /**
   * <code>optional int64 year = 1;</code>
   */
  private void clearYear() {
    bitField0_ = (bitField0_ & ~0x00000001);
    year_ = 0L;
  }

  public static final int MONTH_FIELD_NUMBER = 2;
  private int month_;
  /**
   * <pre>
   * Month of the year in the range [1-12].
   * </pre>
   *
   * <code>optional int32 month = 2;</code>
   */
  public boolean hasMonth() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Month of the year in the range [1-12].
   * </pre>
   *
   * <code>optional int32 month = 2;</code>
   */
  public int getMonth() {
    return month_;
  }
  /**
   * <pre>
   * Month of the year in the range [1-12].
   * </pre>
   *
   * <code>optional int32 month = 2;</code>
   */
  private void setMonth(int value) {
    bitField0_ |= 0x00000002;
    month_ = value;
  }
  /**
   * <pre>
   * Month of the year in the range [1-12].
   * </pre>
   *
   * <code>optional int32 month = 2;</code>
   */
  private void clearMonth() {
    bitField0_ = (bitField0_ & ~0x00000002);
    month_ = 0;
  }

  public static final int DAY_FIELD_NUMBER = 3;
  private int day_;
  /**
   * <pre>
   * Day of the month in the range [1-31].
   * </pre>
   *
   * <code>optional int32 day = 3;</code>
   */
  public boolean hasDay() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Day of the month in the range [1-31].
   * </pre>
   *
   * <code>optional int32 day = 3;</code>
   */
  public int getDay() {
    return day_;
  }
  /**
   * <pre>
   * Day of the month in the range [1-31].
   * </pre>
   *
   * <code>optional int32 day = 3;</code>
   */
  private void setDay(int value) {
    bitField0_ |= 0x00000004;
    day_ = value;
  }
  /**
   * <pre>
   * Day of the month in the range [1-31].
   * </pre>
   *
   * <code>optional int32 day = 3;</code>
   */
  private void clearDay() {
    bitField0_ = (bitField0_ & ~0x00000004);
    day_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt64(1, year_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, month_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, day_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, year_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, month_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, day_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.DateProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code autofill_assistant.DateProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.DateProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.DateProto)
      org.chromium.chrome.browser.autofill_assistant.proto.DateProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.DateProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional int64 year = 1;</code>
     */
    public boolean hasYear() {
      return instance.hasYear();
    }
    /**
     * <code>optional int64 year = 1;</code>
     */
    public long getYear() {
      return instance.getYear();
    }
    /**
     * <code>optional int64 year = 1;</code>
     */
    public Builder setYear(long value) {
      copyOnWrite();
      instance.setYear(value);
      return this;
    }
    /**
     * <code>optional int64 year = 1;</code>
     */
    public Builder clearYear() {
      copyOnWrite();
      instance.clearYear();
      return this;
    }

    /**
     * <pre>
     * Month of the year in the range [1-12].
     * </pre>
     *
     * <code>optional int32 month = 2;</code>
     */
    public boolean hasMonth() {
      return instance.hasMonth();
    }
    /**
     * <pre>
     * Month of the year in the range [1-12].
     * </pre>
     *
     * <code>optional int32 month = 2;</code>
     */
    public int getMonth() {
      return instance.getMonth();
    }
    /**
     * <pre>
     * Month of the year in the range [1-12].
     * </pre>
     *
     * <code>optional int32 month = 2;</code>
     */
    public Builder setMonth(int value) {
      copyOnWrite();
      instance.setMonth(value);
      return this;
    }
    /**
     * <pre>
     * Month of the year in the range [1-12].
     * </pre>
     *
     * <code>optional int32 month = 2;</code>
     */
    public Builder clearMonth() {
      copyOnWrite();
      instance.clearMonth();
      return this;
    }

    /**
     * <pre>
     * Day of the month in the range [1-31].
     * </pre>
     *
     * <code>optional int32 day = 3;</code>
     */
    public boolean hasDay() {
      return instance.hasDay();
    }
    /**
     * <pre>
     * Day of the month in the range [1-31].
     * </pre>
     *
     * <code>optional int32 day = 3;</code>
     */
    public int getDay() {
      return instance.getDay();
    }
    /**
     * <pre>
     * Day of the month in the range [1-31].
     * </pre>
     *
     * <code>optional int32 day = 3;</code>
     */
    public Builder setDay(int value) {
      copyOnWrite();
      instance.setDay(value);
      return this;
    }
    /**
     * <pre>
     * Day of the month in the range [1-31].
     * </pre>
     *
     * <code>optional int32 day = 3;</code>
     */
    public Builder clearDay() {
      copyOnWrite();
      instance.clearDay();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.DateProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.DateProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.DateProto other = (org.chromium.chrome.browser.autofill_assistant.proto.DateProto) arg1;
        year_ = visitor.visitLong(
            hasYear(), year_,
            other.hasYear(), other.year_);
        month_ = visitor.visitInt(
            hasMonth(), month_,
            other.hasMonth(), other.month_);
        day_ = visitor.visitInt(
            hasDay(), day_,
            other.hasDay(), other.day_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                year_ = input.readInt64();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                month_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                day_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.DateProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.DateProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.DateProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new DateProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.DateProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DateProto> PARSER;

  public static com.google.protobuf.Parser<DateProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

