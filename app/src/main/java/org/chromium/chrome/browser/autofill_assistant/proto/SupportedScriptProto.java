// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Supported script.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.SupportedScriptProto}
 */
public  final class SupportedScriptProto extends
    com.google.protobuf.GeneratedMessageLite<
        SupportedScriptProto, SupportedScriptProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.SupportedScriptProto)
    SupportedScriptProtoOrBuilder {
  private SupportedScriptProto() {
    path_ = "";
  }
  public interface PresentationProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.SupportedScriptProto.PresentationProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    boolean hasPrecondition();
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto getPrecondition();

    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    boolean hasInitialPrompt();
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    java.lang.String getInitialPrompt();
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    com.google.protobuf.ByteString
        getInitialPromptBytes();

    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     */
    boolean hasPriority();
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     */
    int getPriority();

    /**
     * <pre>
     * Whether the script should be highlighted.
     * </pre>
     *
     * <code>optional bool highlight = 7;</code>
     */
    boolean hasHighlight();
    /**
     * <pre>
     * Whether the script should be highlighted.
     * </pre>
     *
     * <code>optional bool highlight = 7;</code>
     */
    boolean getHighlight();

    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'. Script won't
     * be shown.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     */
    boolean hasAutostart();
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'. Script won't
     * be shown.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     */
    boolean getAutostart();

    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     */
    boolean hasInterrupt();
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     */
    boolean getInterrupt();
  }
  /**
   * Protobuf type {@code autofill_assistant.SupportedScriptProto.PresentationProto}
   */
  public  static final class PresentationProto extends
      com.google.protobuf.GeneratedMessageLite<
          PresentationProto, PresentationProto.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.SupportedScriptProto.PresentationProto)
      PresentationProtoOrBuilder {
    private PresentationProto() {
      name_ = "";
      initialPrompt_ = "";
    }
    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.String name_;
    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      return name_;
    }
    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }
    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value;
    }
    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = getDefaultInstance().getName();
    }
    /**
     * <pre>
     * Script name.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value.toStringUtf8();
    }

    public static final int PRECONDITION_FIELD_NUMBER = 3;
    private org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto precondition_;
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    public boolean hasPrecondition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto getPrecondition() {
      return precondition_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.getDefaultInstance() : precondition_;
    }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    private void setPrecondition(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      precondition_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    private void setPrecondition(
        org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.Builder builderForValue) {
      precondition_ = builderForValue.build();
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    private void mergePrecondition(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto value) {
      if (precondition_ != null &&
          precondition_ != org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.getDefaultInstance()) {
        precondition_ =
          org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.newBuilder(precondition_).mergeFrom(value).buildPartial();
      } else {
        precondition_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    private void clearPrecondition() {  precondition_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int INITIAL_PROMPT_FIELD_NUMBER = 4;
    private java.lang.String initialPrompt_;
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    public boolean hasInitialPrompt() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    public java.lang.String getInitialPrompt() {
      return initialPrompt_;
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    public com.google.protobuf.ByteString
        getInitialPromptBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(initialPrompt_);
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    private void setInitialPrompt(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      initialPrompt_ = value;
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    private void clearInitialPrompt() {
      bitField0_ = (bitField0_ & ~0x00000004);
      initialPrompt_ = getDefaultInstance().getInitialPrompt();
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    private void setInitialPromptBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      initialPrompt_ = value.toStringUtf8();
    }

    public static final int PRIORITY_FIELD_NUMBER = 5;
    private int priority_;
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     */
    public boolean hasPriority() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     */
    public int getPriority() {
      return priority_;
    }
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     */
    private void setPriority(int value) {
      bitField0_ |= 0x00000008;
      priority_ = value;
    }
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     */
    private void clearPriority() {
      bitField0_ = (bitField0_ & ~0x00000008);
      priority_ = 0;
    }

    public static final int HIGHLIGHT_FIELD_NUMBER = 7;
    private boolean highlight_;
    /**
     * <pre>
     * Whether the script should be highlighted.
     * </pre>
     *
     * <code>optional bool highlight = 7;</code>
     */
    public boolean hasHighlight() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Whether the script should be highlighted.
     * </pre>
     *
     * <code>optional bool highlight = 7;</code>
     */
    public boolean getHighlight() {
      return highlight_;
    }
    /**
     * <pre>
     * Whether the script should be highlighted.
     * </pre>
     *
     * <code>optional bool highlight = 7;</code>
     */
    private void setHighlight(boolean value) {
      bitField0_ |= 0x00000010;
      highlight_ = value;
    }
    /**
     * <pre>
     * Whether the script should be highlighted.
     * </pre>
     *
     * <code>optional bool highlight = 7;</code>
     */
    private void clearHighlight() {
      bitField0_ = (bitField0_ & ~0x00000010);
      highlight_ = false;
    }

    public static final int AUTOSTART_FIELD_NUMBER = 8;
    private boolean autostart_;
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'. Script won't
     * be shown.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     */
    public boolean hasAutostart() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'. Script won't
     * be shown.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     */
    public boolean getAutostart() {
      return autostart_;
    }
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'. Script won't
     * be shown.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     */
    private void setAutostart(boolean value) {
      bitField0_ |= 0x00000020;
      autostart_ = value;
    }
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'. Script won't
     * be shown.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     */
    private void clearAutostart() {
      bitField0_ = (bitField0_ & ~0x00000020);
      autostart_ = false;
    }

    public static final int INTERRUPT_FIELD_NUMBER = 9;
    private boolean interrupt_;
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     */
    public boolean hasInterrupt() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     */
    public boolean getInterrupt() {
      return interrupt_;
    }
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     */
    private void setInterrupt(boolean value) {
      bitField0_ |= 0x00000040;
      interrupt_ = value;
    }
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     */
    private void clearInterrupt() {
      bitField0_ = (bitField0_ & ~0x00000040);
      interrupt_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeString(1, getName());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, getPrecondition());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeString(4, getInitialPrompt());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, priority_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(7, highlight_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(8, autostart_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(9, interrupt_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getPrecondition());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getInitialPrompt());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, priority_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, highlight_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, autostart_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, interrupt_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.SupportedScriptProto.PresentationProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.SupportedScriptProto.PresentationProto)
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProtoOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Script name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <pre>
       * Script name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        return instance.getName();
      }
      /**
       * <pre>
       * Script name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        return instance.getNameBytes();
      }
      /**
       * <pre>
       * Script name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <pre>
       * Script name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }
      /**
       * <pre>
       * Script name.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public boolean hasPrecondition() {
        return instance.hasPrecondition();
      }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto getPrecondition() {
        return instance.getPrecondition();
      }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public Builder setPrecondition(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto value) {
        copyOnWrite();
        instance.setPrecondition(value);
        return this;
        }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public Builder setPrecondition(
          org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.Builder builderForValue) {
        copyOnWrite();
        instance.setPrecondition(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public Builder mergePrecondition(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto value) {
        copyOnWrite();
        instance.mergePrecondition(value);
        return this;
      }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public Builder clearPrecondition() {  copyOnWrite();
        instance.clearPrecondition();
        return this;
      }

      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       */
      public boolean hasInitialPrompt() {
        return instance.hasInitialPrompt();
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       */
      public java.lang.String getInitialPrompt() {
        return instance.getInitialPrompt();
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       */
      public com.google.protobuf.ByteString
          getInitialPromptBytes() {
        return instance.getInitialPromptBytes();
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       */
      public Builder setInitialPrompt(
          java.lang.String value) {
        copyOnWrite();
        instance.setInitialPrompt(value);
        return this;
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       */
      public Builder clearInitialPrompt() {
        copyOnWrite();
        instance.clearInitialPrompt();
        return this;
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       */
      public Builder setInitialPromptBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setInitialPromptBytes(value);
        return this;
      }

      /**
       * <pre>
       * Display priority of the script. Lowest number has highest priority, which
       * means a script with priority 0 should be displayed before a script with
       * priority 1.
       * </pre>
       *
       * <code>optional int32 priority = 5;</code>
       */
      public boolean hasPriority() {
        return instance.hasPriority();
      }
      /**
       * <pre>
       * Display priority of the script. Lowest number has highest priority, which
       * means a script with priority 0 should be displayed before a script with
       * priority 1.
       * </pre>
       *
       * <code>optional int32 priority = 5;</code>
       */
      public int getPriority() {
        return instance.getPriority();
      }
      /**
       * <pre>
       * Display priority of the script. Lowest number has highest priority, which
       * means a script with priority 0 should be displayed before a script with
       * priority 1.
       * </pre>
       *
       * <code>optional int32 priority = 5;</code>
       */
      public Builder setPriority(int value) {
        copyOnWrite();
        instance.setPriority(value);
        return this;
      }
      /**
       * <pre>
       * Display priority of the script. Lowest number has highest priority, which
       * means a script with priority 0 should be displayed before a script with
       * priority 1.
       * </pre>
       *
       * <code>optional int32 priority = 5;</code>
       */
      public Builder clearPriority() {
        copyOnWrite();
        instance.clearPriority();
        return this;
      }

      /**
       * <pre>
       * Whether the script should be highlighted.
       * </pre>
       *
       * <code>optional bool highlight = 7;</code>
       */
      public boolean hasHighlight() {
        return instance.hasHighlight();
      }
      /**
       * <pre>
       * Whether the script should be highlighted.
       * </pre>
       *
       * <code>optional bool highlight = 7;</code>
       */
      public boolean getHighlight() {
        return instance.getHighlight();
      }
      /**
       * <pre>
       * Whether the script should be highlighted.
       * </pre>
       *
       * <code>optional bool highlight = 7;</code>
       */
      public Builder setHighlight(boolean value) {
        copyOnWrite();
        instance.setHighlight(value);
        return this;
      }
      /**
       * <pre>
       * Whether the script should be highlighted.
       * </pre>
       *
       * <code>optional bool highlight = 7;</code>
       */
      public Builder clearHighlight() {
        copyOnWrite();
        instance.clearHighlight();
        return this;
      }

      /**
       * <pre>
       * When set to true this script can be run in 'autostart mode'. Script won't
       * be shown.
       * </pre>
       *
       * <code>optional bool autostart = 8;</code>
       */
      public boolean hasAutostart() {
        return instance.hasAutostart();
      }
      /**
       * <pre>
       * When set to true this script can be run in 'autostart mode'. Script won't
       * be shown.
       * </pre>
       *
       * <code>optional bool autostart = 8;</code>
       */
      public boolean getAutostart() {
        return instance.getAutostart();
      }
      /**
       * <pre>
       * When set to true this script can be run in 'autostart mode'. Script won't
       * be shown.
       * </pre>
       *
       * <code>optional bool autostart = 8;</code>
       */
      public Builder setAutostart(boolean value) {
        copyOnWrite();
        instance.setAutostart(value);
        return this;
      }
      /**
       * <pre>
       * When set to true this script can be run in 'autostart mode'. Script won't
       * be shown.
       * </pre>
       *
       * <code>optional bool autostart = 8;</code>
       */
      public Builder clearAutostart() {
        copyOnWrite();
        instance.clearAutostart();
        return this;
      }

      /**
       * <pre>
       * When set to true this script will be run from WaitForDom actions with
       * allow_interrupt=true.
       * </pre>
       *
       * <code>optional bool interrupt = 9;</code>
       */
      public boolean hasInterrupt() {
        return instance.hasInterrupt();
      }
      /**
       * <pre>
       * When set to true this script will be run from WaitForDom actions with
       * allow_interrupt=true.
       * </pre>
       *
       * <code>optional bool interrupt = 9;</code>
       */
      public boolean getInterrupt() {
        return instance.getInterrupt();
      }
      /**
       * <pre>
       * When set to true this script will be run from WaitForDom actions with
       * allow_interrupt=true.
       * </pre>
       *
       * <code>optional bool interrupt = 9;</code>
       */
      public Builder setInterrupt(boolean value) {
        copyOnWrite();
        instance.setInterrupt(value);
        return this;
      }
      /**
       * <pre>
       * When set to true this script will be run from WaitForDom actions with
       * allow_interrupt=true.
       * </pre>
       *
       * <code>optional bool interrupt = 9;</code>
       */
      public Builder clearInterrupt() {
        copyOnWrite();
        instance.clearInterrupt();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.SupportedScriptProto.PresentationProto)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto other = (org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto) arg1;
          name_ = visitor.visitString(
              hasName(), name_,
              other.hasName(), other.name_);
          precondition_ = visitor.visitMessage(precondition_, other.precondition_);
          initialPrompt_ = visitor.visitString(
              hasInitialPrompt(), initialPrompt_,
              other.hasInitialPrompt(), other.initialPrompt_);
          priority_ = visitor.visitInt(
              hasPriority(), priority_,
              other.hasPriority(), other.priority_);
          highlight_ = visitor.visitBoolean(
              hasHighlight(), highlight_,
              other.hasHighlight(), other.highlight_);
          autostart_ = visitor.visitBoolean(
              hasAutostart(), autostart_,
              other.hasAutostart(), other.autostart_);
          interrupt_ = visitor.visitBoolean(
              hasInterrupt(), interrupt_,
              other.hasInterrupt(), other.interrupt_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readString();
                  bitField0_ |= 0x00000001;
                  name_ = s;
                  break;
                }
                case 26: {
                  org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = precondition_.toBuilder();
                  }
                  precondition_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(precondition_);
                    precondition_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
                case 34: {
                  String s = input.readString();
                  bitField0_ |= 0x00000004;
                  initialPrompt_ = s;
                  break;
                }
                case 40: {
                  bitField0_ |= 0x00000008;
                  priority_ = input.readInt32();
                  break;
                }
                case 56: {
                  bitField0_ |= 0x00000010;
                  highlight_ = input.readBool();
                  break;
                }
                case 64: {
                  bitField0_ |= 0x00000020;
                  autostart_ = input.readBool();
                  break;
                }
                case 72: {
                  bitField0_ |= 0x00000040;
                  interrupt_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.SupportedScriptProto.PresentationProto)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PresentationProto();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PresentationProto> PARSER;

    public static com.google.protobuf.Parser<PresentationProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int PATH_FIELD_NUMBER = 1;
  private java.lang.String path_;
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   */
  public boolean hasPath() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   */
  public java.lang.String getPath() {
    return path_;
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   */
  public com.google.protobuf.ByteString
      getPathBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(path_);
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   */
  private void setPath(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    path_ = value;
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   */
  private void clearPath() {
    bitField0_ = (bitField0_ & ~0x00000001);
    path_ = getDefaultInstance().getPath();
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   */
  private void setPathBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    path_ = value.toStringUtf8();
  }

  public static final int PRESENTATION_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto presentation_;
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  public boolean hasPresentation() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto getPresentation() {
    return presentation_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.getDefaultInstance() : presentation_;
  }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  private void setPresentation(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    presentation_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  private void setPresentation(
      org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.Builder builderForValue) {
    presentation_ = builderForValue.build();
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  private void mergePresentation(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto value) {
    if (presentation_ != null &&
        presentation_ != org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.getDefaultInstance()) {
      presentation_ =
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.newBuilder(presentation_).mergeFrom(value).buildPartial();
    } else {
      presentation_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  private void clearPresentation() {  presentation_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getPath());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, getPresentation());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getPath());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getPresentation());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Supported script.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.SupportedScriptProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.SupportedScriptProto)
      org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     */
    public boolean hasPath() {
      return instance.hasPath();
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     */
    public java.lang.String getPath() {
      return instance.getPath();
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      return instance.getPathBytes();
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     */
    public Builder setPath(
        java.lang.String value) {
      copyOnWrite();
      instance.setPath(value);
      return this;
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     */
    public Builder clearPath() {
      copyOnWrite();
      instance.clearPath();
      return this;
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPathBytes(value);
      return this;
    }

    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public boolean hasPresentation() {
      return instance.hasPresentation();
    }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto getPresentation() {
      return instance.getPresentation();
    }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public Builder setPresentation(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto value) {
      copyOnWrite();
      instance.setPresentation(value);
      return this;
      }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public Builder setPresentation(
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.Builder builderForValue) {
      copyOnWrite();
      instance.setPresentation(builderForValue);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public Builder mergePresentation(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto value) {
      copyOnWrite();
      instance.mergePresentation(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public Builder clearPresentation() {  copyOnWrite();
      instance.clearPresentation();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.SupportedScriptProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto other = (org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto) arg1;
        path_ = visitor.visitString(
            hasPath(), path_,
            other.hasPath(), other.path_);
        presentation_ = visitor.visitMessage(presentation_, other.presentation_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                path_ = s;
                break;
              }
              case 18: {
                org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = presentation_.toBuilder();
                }
                presentation_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(presentation_);
                  presentation_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.SupportedScriptProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SupportedScriptProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SupportedScriptProto> PARSER;

  public static com.google.protobuf.Parser<SupportedScriptProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

