
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/interfaces/jpeg_encode_accelerator.mojom
//

package org.chromium.media.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class JpegEncodeAccelerator_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<JpegEncodeAccelerator, JpegEncodeAccelerator.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<JpegEncodeAccelerator, JpegEncodeAccelerator.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.JpegEncodeAccelerator";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, JpegEncodeAccelerator impl) {
            return new Stub(core, impl);
        }

        @Override
        public JpegEncodeAccelerator[] buildArray(int size) {
          return new JpegEncodeAccelerator[size];
        }
    };


    private static final int INITIALIZE_ORDINAL = 0;

    private static final int ENCODE_WITH_FD_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements JpegEncodeAccelerator.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void initialize(

InitializeResponse callback) {

            JpegEncodeAcceleratorInitializeParams _message = new JpegEncodeAcceleratorInitializeParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    INITIALIZE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new JpegEncodeAcceleratorInitializeResponseParamsForwardToCallback(callback));

        }


        @Override
        public void encodeWithFd(
int bufferId, org.chromium.mojo.system.UntypedHandle inputFd, int inputBufferSize, int codedSizeWidth, int codedSizeHeight, org.chromium.mojo.system.UntypedHandle exifFd, int exifBufferSize, org.chromium.mojo.system.UntypedHandle outputFd, int outputBufferSize, 
EncodeWithFdResponse callback) {

            JpegEncodeAcceleratorEncodeWithFdParams _message = new JpegEncodeAcceleratorEncodeWithFdParams();

            _message.bufferId = bufferId;

            _message.inputFd = inputFd;

            _message.inputBufferSize = inputBufferSize;

            _message.codedSizeWidth = codedSizeWidth;

            _message.codedSizeHeight = codedSizeHeight;

            _message.exifFd = exifFd;

            _message.exifBufferSize = exifBufferSize;

            _message.outputFd = outputFd;

            _message.outputBufferSize = outputBufferSize;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ENCODE_WITH_FD_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new JpegEncodeAcceleratorEncodeWithFdResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<JpegEncodeAccelerator> {

        Stub(org.chromium.mojo.system.Core core, JpegEncodeAccelerator impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                JpegEncodeAccelerator_Internal.MANAGER, messageWithHeader);






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), JpegEncodeAccelerator_Internal.MANAGER, messageWithHeader, receiver);







                    case INITIALIZE_ORDINAL: {

                        JpegEncodeAcceleratorInitializeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().initialize(new JpegEncodeAcceleratorInitializeResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ENCODE_WITH_FD_ORDINAL: {

                        JpegEncodeAcceleratorEncodeWithFdParams data =
                                JpegEncodeAcceleratorEncodeWithFdParams.deserialize(messageWithHeader.getPayload());

                        getImpl().encodeWithFd(data.bufferId, data.inputFd, data.inputBufferSize, data.codedSizeWidth, data.codedSizeHeight, data.exifFd, data.exifBufferSize, data.outputFd, data.outputBufferSize, new JpegEncodeAcceleratorEncodeWithFdResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class JpegEncodeAcceleratorInitializeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private JpegEncodeAcceleratorInitializeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public JpegEncodeAcceleratorInitializeParams() {
            this(0);
        }

        public static JpegEncodeAcceleratorInitializeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static JpegEncodeAcceleratorInitializeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static JpegEncodeAcceleratorInitializeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            JpegEncodeAcceleratorInitializeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new JpegEncodeAcceleratorInitializeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class JpegEncodeAcceleratorInitializeResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;

        private JpegEncodeAcceleratorInitializeResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public JpegEncodeAcceleratorInitializeResponseParams() {
            this(0);
        }

        public static JpegEncodeAcceleratorInitializeResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static JpegEncodeAcceleratorInitializeResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static JpegEncodeAcceleratorInitializeResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            JpegEncodeAcceleratorInitializeResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new JpegEncodeAcceleratorInitializeResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
        }
    }

    static class JpegEncodeAcceleratorInitializeResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final JpegEncodeAccelerator.InitializeResponse mCallback;

        JpegEncodeAcceleratorInitializeResponseParamsForwardToCallback(JpegEncodeAccelerator.InitializeResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(INITIALIZE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                JpegEncodeAcceleratorInitializeResponseParams response = JpegEncodeAcceleratorInitializeResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class JpegEncodeAcceleratorInitializeResponseParamsProxyToResponder implements JpegEncodeAccelerator.InitializeResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        JpegEncodeAcceleratorInitializeResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success) {
            JpegEncodeAcceleratorInitializeResponseParams _response = new JpegEncodeAcceleratorInitializeResponseParams();

            _response.success = success;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    INITIALIZE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class JpegEncodeAcceleratorEncodeWithFdParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int bufferId;
        public org.chromium.mojo.system.UntypedHandle inputFd;
        public int inputBufferSize;
        public int codedSizeWidth;
        public int codedSizeHeight;
        public org.chromium.mojo.system.UntypedHandle exifFd;
        public int exifBufferSize;
        public org.chromium.mojo.system.UntypedHandle outputFd;
        public int outputBufferSize;

        private JpegEncodeAcceleratorEncodeWithFdParams(int version) {
            super(STRUCT_SIZE, version);
            this.inputFd = org.chromium.mojo.system.InvalidHandle.INSTANCE;
            this.exifFd = org.chromium.mojo.system.InvalidHandle.INSTANCE;
            this.outputFd = org.chromium.mojo.system.InvalidHandle.INSTANCE;
        }

        public JpegEncodeAcceleratorEncodeWithFdParams() {
            this(0);
        }

        public static JpegEncodeAcceleratorEncodeWithFdParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static JpegEncodeAcceleratorEncodeWithFdParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static JpegEncodeAcceleratorEncodeWithFdParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            JpegEncodeAcceleratorEncodeWithFdParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new JpegEncodeAcceleratorEncodeWithFdParams(elementsOrVersion);
                    {
                        
                    result.bufferId = decoder0.readInt(8);
                    }
                    {
                        
                    result.inputFd = decoder0.readUntypedHandle(12, false);
                    }
                    {
                        
                    result.inputBufferSize = decoder0.readInt(16);
                    }
                    {
                        
                    result.codedSizeWidth = decoder0.readInt(20);
                    }
                    {
                        
                    result.codedSizeHeight = decoder0.readInt(24);
                    }
                    {
                        
                    result.exifFd = decoder0.readUntypedHandle(28, false);
                    }
                    {
                        
                    result.exifBufferSize = decoder0.readInt(32);
                    }
                    {
                        
                    result.outputFd = decoder0.readUntypedHandle(36, false);
                    }
                    {
                        
                    result.outputBufferSize = decoder0.readInt(40);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bufferId, 8);
            
            encoder0.encode(this.inputFd, 12, false);
            
            encoder0.encode(this.inputBufferSize, 16);
            
            encoder0.encode(this.codedSizeWidth, 20);
            
            encoder0.encode(this.codedSizeHeight, 24);
            
            encoder0.encode(this.exifFd, 28, false);
            
            encoder0.encode(this.exifBufferSize, 32);
            
            encoder0.encode(this.outputFd, 36, false);
            
            encoder0.encode(this.outputBufferSize, 40);
        }
    }



    
    static final class JpegEncodeAcceleratorEncodeWithFdResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int bufferId;
        public int encodedBufferSize;
        public int status;

        private JpegEncodeAcceleratorEncodeWithFdResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public JpegEncodeAcceleratorEncodeWithFdResponseParams() {
            this(0);
        }

        public static JpegEncodeAcceleratorEncodeWithFdResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static JpegEncodeAcceleratorEncodeWithFdResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static JpegEncodeAcceleratorEncodeWithFdResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            JpegEncodeAcceleratorEncodeWithFdResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new JpegEncodeAcceleratorEncodeWithFdResponseParams(elementsOrVersion);
                    {
                        
                    result.bufferId = decoder0.readInt(8);
                    }
                    {
                        
                    result.encodedBufferSize = decoder0.readInt(12);
                    }
                    {
                        
                    result.status = decoder0.readInt(16);
                        EncodeStatus.validate(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bufferId, 8);
            
            encoder0.encode(this.encodedBufferSize, 12);
            
            encoder0.encode(this.status, 16);
        }
    }

    static class JpegEncodeAcceleratorEncodeWithFdResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final JpegEncodeAccelerator.EncodeWithFdResponse mCallback;

        JpegEncodeAcceleratorEncodeWithFdResponseParamsForwardToCallback(JpegEncodeAccelerator.EncodeWithFdResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ENCODE_WITH_FD_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                JpegEncodeAcceleratorEncodeWithFdResponseParams response = JpegEncodeAcceleratorEncodeWithFdResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.bufferId, response.encodedBufferSize, response.status);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class JpegEncodeAcceleratorEncodeWithFdResponseParamsProxyToResponder implements JpegEncodeAccelerator.EncodeWithFdResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        JpegEncodeAcceleratorEncodeWithFdResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer bufferId, Integer encodedBufferSize, Integer status) {
            JpegEncodeAcceleratorEncodeWithFdResponseParams _response = new JpegEncodeAcceleratorEncodeWithFdResponseParams();

            _response.bufferId = bufferId;

            _response.encodedBufferSize = encodedBufferSize;

            _response.status = status;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ENCODE_WITH_FD_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
