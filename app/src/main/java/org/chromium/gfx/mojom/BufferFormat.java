
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     ui/gfx/mojo/buffer_types.mojom
//

package org.chromium.gfx.mojom;

import org.chromium.mojo.bindings.DeserializationException;

public final class BufferFormat {


    public static final int R_8 = 0;

    public static final int R_16 = R_8 + 1;

    public static final int RG_88 = R_16 + 1;

    public static final int BGR_565 = RG_88 + 1;

    public static final int RGBA_4444 = BGR_565 + 1;

    public static final int RGBX_8888 = RGBA_4444 + 1;

    public static final int RGBA_8888 = RGBX_8888 + 1;

    public static final int BGRX_8888 = RGBA_8888 + 1;

    public static final int BGRX_1010102 = BGRX_8888 + 1;

    public static final int RGBX_1010102 = BGRX_1010102 + 1;

    public static final int BGRA_8888 = RGBX_1010102 + 1;

    public static final int RGBA_F16 = BGRA_8888 + 1;

    public static final int YVU_420 = RGBA_F16 + 1;

    public static final int YUV_420_BIPLANAR = YVU_420 + 1;

    public static final int UYVY_422 = YUV_420_BIPLANAR + 1;

    public static final int LAST = (int) (BufferFormat.UYVY_422);

    public static final int MIN_VALUE = (int) (0);
    public static final int MAX_VALUE = (int) (14);

    private static final boolean IS_EXTENSIBLE = false;

    public static boolean isKnownValue(int value) {
        switch (value) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                return true;
        }
        return false;
    }

    public static void validate(int value) {
        if (IS_EXTENSIBLE || isKnownValue(value))
            return;

        throw new DeserializationException("Invalid enum value.");
    }

    private BufferFormat() {}

}