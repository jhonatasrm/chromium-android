
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/service_worker/service_worker_error_type.mojom
//

package org.chromium.blink.mojom;

import org.chromium.mojo.bindings.DeserializationException;

public final class ServiceWorkerResponseError {


    public static final int UNKNOWN = (int) (0L);

    public static final int PROMISE_REJECTED = (int) (1L);

    public static final int DEFAULT_PREVENTED = (int) (2L);

    public static final int NO_V8_INSTANCE = (int) (3L);

    public static final int RESPONSE_TYPE_ERROR = (int) (4L);

    public static final int RESPONSE_TYPE_OPAQUE = (int) (5L);

    public static final int RESPONSE_TYPE_NOT_BASIC_OR_DEFAULT = (int) (6L);

    public static final int BODY_USED = (int) (7L);

    public static final int RESPONSE_TYPE_OPAQUE_FOR_CLIENT_REQUEST = (int) (8L);

    public static final int RESPONSE_TYPE_OPAQUE_REDIRECT = (int) (9L);

    public static final int BODY_LOCKED = (int) (10L);

    public static final int REDIRECTED_RESPONSE_FOR_NOT_FOLLOW_REQUEST = (int) (14L);

    public static final int DATA_PIPE_CREATION_FAILED = (int) (15L);

    public static final int RESPONSE_TYPE_CORS_FOR_REQUEST_MODE_SAME_ORIGIN = (int) (16L);

    public static final int RESPONSE_BODY_BROKEN = (int) (17L);

    public static final int MIN_VALUE = (int) (0);
    public static final int MAX_VALUE = (int) (17);

    private static final boolean IS_EXTENSIBLE = false;

    public static boolean isKnownValue(int value) {
        switch (value) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 14:
            case 15:
            case 16:
            case 17:
                return true;
        }
        return false;
    }

    public static void validate(int value) {
        if (IS_EXTENSIBLE || isKnownValue(value))
            return;

        throw new DeserializationException("Invalid enum value.");
    }

    private ServiceWorkerResponseError() {}

}